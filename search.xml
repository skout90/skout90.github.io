<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>1. 리팩터링 예시</title>
      <link href="/2020/06/20/Refactoring/1.%20%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%98%88%EC%8B%9C/"/>
      <url>/2020/06/20/Refactoring/1.%20%EB%A6%AC%ED%8C%A9%ED%84%B0%EB%A7%81-%EC%98%88%EC%8B%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="검색-엔진-최적화-SEO"><a href="#검색-엔진-최적화-SEO" class="headerlink" title="검색 엔진 최적화 SEO"></a>검색 엔진 최적화 SEO</h2><p>SEO(Search Engine Optimize) : 검색 엔진 최적화, 구글 엔진이 크롤링 보다 잘 하기 위해서 최적화가 필요.</p><ul><li>명확하고 동창적 title 태그 사용.</li><li>description 메타태그 활용하기</li><li>URL 구조 개선</li><li>..</li></ul><h3 id="canonical"><a href="#canonical" class="headerlink" title="canonical"></a>canonical</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"http://www.seo-korea.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>표준 URL을 설정함으로써, 검색엔진이 URL을 쉽게 최적화하여, PageRank 상승에 기여하고, 중복된 컨텐츠를 쉽게 없엘 수 있음.</p><h3 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a>sitemap.xml</h3><p>루트에 sitemap.xml 파일 만들어 놓기 <code>abc.com/sitemap.xml</code></p><ul><li>sitemap.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="sitemap.xsl"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sitemapindex</span> <span class="attr">xmlns</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io/post-sitemap.xml<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2017-07-11T07:52:30.093Z<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sitemap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io/page-sitemap.xml<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2017-07-11T07:52:32.290Z<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sitemap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io/category-sitemap.xml<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2017-07-11T07:52:07.793Z<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sitemap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sitemapindex</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>page-sitemap.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="sitemap.xsl"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:image</span>=<span class="string">"http://www.google.com/schemas/sitemap-image/1.1"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changefreq</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">changefreq</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span>&gt;</span>1<span class="tag">&lt;/<span class="name">priority</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io/all-categories/<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2017-07-11T07:52:32.290Z<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changefreq</span>&gt;</span>weekly<span class="tag">&lt;/<span class="name">changefreq</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span>&gt;</span>0.8<span class="tag">&lt;/<span class="name">priority</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="구글-Search-Console-등록"><a href="#구글-Search-Console-등록" class="headerlink" title="구글 Search Console 등록"></a>구글 Search Console 등록</h3><p><a href="https://www.google.com/webmasters/tools/home" target="_blank" rel="noopener">https://www.google.com/webmasters/tools/home</a></p><p>내 URL을 등록하고, 위의 sitemap.xml도 함께 등록해주자.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.aun-korea.com/%EB%A7%88%EC%BC%80%ED%84%B0%EC%83%81%EC%8B%9D-%EB%84%A4%EC%9D%B4%EB%B2%84-%EA%B5%AC%EA%B8%80%EC%97%90-%EA%B2%80%EC%83%89%EB%85%B8%EC%B6%9C%EC%9D%B4-%EC%9E%98%EB%90%98%EA%B2%8C-%ED%95%98%EB%8A%94/" target="_blank" rel="noopener">http://www.aun-korea.com/%EB%A7%88%EC%BC%80%ED%84%B0%EC%83%81%EC%8B%9D-%EB%84%A4%EC%9D%B4%EB%B2%84-%EA%B5%AC%EA%B8%80%EC%97%90-%EA%B2%80%EC%83%89%EB%85%B8%EC%B6%9C%EC%9D%B4-%EC%9E%98%EB%90%98%EA%B2%8C-%ED%95%98%EB%8A%94/</a></p><p><a href>http://tobeonline.tistory.com/entry/구글이-제시하는-검색엔진-최적화SEO-방법</a></p><p><a href="http://www.seo-korea.com/%ED%91%9C%EC%A4%80-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%84%A4%EC%A0%95-link-rel-canonical/" target="_blank" rel="noopener">http://www.seo-korea.com/%ED%91%9C%EC%A4%80-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%84%A4%EC%A0%95-link-rel-canonical/</a></p><p><a href="http://futurecreator.github.io/2016/06/15/hexo-google-site-search-console-analytics/" target="_blank" rel="noopener">http://futurecreator.github.io/2016/06/15/hexo-google-site-search-console-analytics/</a></p>]]></content>
      
      
      <categories>
          
          <category> Refactoring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Dynamo DB 설계 모범 케이스 분석</title>
      <link href="/2020/03/25/etc/dynamo-db-architecture-best-practice/"/>
      <url>/2020/03/25/etc/dynamo-db-architecture-best-practice/</url>
      
        <content type="html"><![CDATA[<h3 id="스터디-배경"><a href="#스터디-배경" class="headerlink" title="스터디 배경"></a>스터디 배경</h3><p>테이블의 변경 히스토리를 저장하기 위해 DynamoDB를 사용하는 것이 좋다고 판단됌. 로그 데이터이기 때문에  데이터들의 일관성 문제가 없으며 많은 데이터를 효율적으로 저장하고 쿼리할 수 있기 때문.</p><h3 id="개념"><a href="#개념" class="headerlink" title="개념"></a>개념</h3><p><a href="https://yogae.github.io/aws/2018/12/06/dynamodb_summary.html" target="_blank" rel="noopener">https://yogae.github.io/aws/2018/12/06/dynamodb_summary.html</a></p><p><a href="https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/SecondaryIndexes.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/SecondaryIndexes.html</a></p><ul><li><p>기본키</p><ul><li>파티션 키<ul><li>내부 해시 함수에 대한 입력으로 사용되는 키</li><li>파티션 키로만 구성되어 있는 테이블에서는 동일한 파티션 키 값을 가질 수 없음.</li></ul></li><li>파티션 키 및 정렬 키 (복합 기본키)<ul><li>동일한 파티션 키 값을 가질 수 있으며, 두 아이템의 정렬키 값을 달라야함.</li><li>파티션 키가 동일한 모든 항목은 정렬키 값을 기준으로 정렬</li></ul></li></ul></li><li><p>보조 인덱스</p><ul><li>글로벌 보조 인덱스<ul><li>파티션 키 및 정렬키가 기본테이블의 파티션/정렬키와 다를 수 있는 인덱스</li><li>모든 글로벌 보조 인덱스는 파티션 키가 있어야 하며, 선택사항으로 정렬키를 가질 수 있음.</li></ul></li></ul></li><li><p>모든 파티션에서 전체 테이블을 쿼리</p><ul><li>로컬 보조 인덱스<ul><li>기본 테이블과 파티션 키는 동일하지만, 정렬 키는 다른 인덱스</li><li>모든 로컬 보조 인덱스에는 기본 테이블의 파티션 및 정렬키가 자동적으로 포함 된다.</li><li>파티션 키 값으로 지정한 대로 단일 파티션을 쿼리할 수 있음.</li></ul></li></ul></li></ul><h3 id="프로비저닝-vs-온디멘드"><a href="#프로비저닝-vs-온디멘드" class="headerlink" title="프로비저닝 vs 온디멘드"></a>프로비저닝 vs 온디멘드</h3><p><a href="https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/HowItWorks.ReadWriteCapacityMode.html</a></p><p>DynamoDB의 과금 방식중 <code>온디멘드</code> 방식과 <code>프로비저닝</code> 방식이 있다. 우리 서비스의 경우</p><ul><li>트래픽이 점점 증가해나가고 있음, 또한 마케팅 여부에 따라 증가하거나 감소할 가능성이 있음.</li><li>스크래핑 작업 특성상, 한번 스크래핑이 시작하면 많은양의 읽기 쓰기가 동작되며, 최적화된 쓰기/읽기 유닛 책정이 어려움.</li></ul><p>두가지 이유로 인해 읽기/쓰기 유닛을 책정하는 것보다는 온디멘드 방식을 사용하는 것이 좋다고 판단됌.</p><blockquote><p>온디멘드 방식을 사용하게 되면, 읽기/쓰기 유닛을 효율적으로 사용하기 위한 테이블 설계에 대한 부담이 줄어 드는 장점도 있다.</p></blockquote><h3 id="테이블-설계"><a href="#테이블-설계" class="headerlink" title="테이블 설계"></a>테이블 설계</h3><ul><li>DynamoDB 애플리케이션에서는 <strong>가능한 적은 수의 테이블을 유지해</strong>야 합니다. 대부분의 잘 설계된 애플리케이션은 단 <em>하나의</em> 테이블만 요구합니다.</li><li>쿼리를 처리할 때 데이터를 변화시키는 대신(RDBMS 시스템의 방식), NoSQL 데이터베이스는 <strong>데이터베이스의 모양이 쿼리 대상과 일치하도록</strong> 데이터를 구성합니다. 이는 속도와 확장성 향상에 중요한 요소입니다.</li><li><strong>정렬 순서를 사용합니다.</strong>  핵심 설계가 함께 정렬할 것을 요구하는 경우, 관련 항목을 그룹으로 묶어 효율적으로 쿼리할 수 있습니다. 이는 중요한 NoSQL 설계 전략입니다.</li></ul><h3 id="파티션-키-설계"><a href="#파티션-키-설계" class="headerlink" title="파티션 키 설계"></a>파티션 키 설계</h3><ul><li><p>워크로드 배분</p><ul><li><p>파티션 키 설계 : 트래픽이 하나의 항목으로 너무 집중되는 경우, 자주 액세스 하는 항목이 동일한 파티션에 상주하지 않도록 파티션 균형 재조정</p></li><li><p><a href="https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/bp-partition-key-uniform-load.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/bp-partition-key-uniform-load.html</a></p><table><thead><tr><th align="left">파티션 키 값</th><th align="left">균일성</th></tr></thead><tbody><tr><td align="left">사용자 ID, 애플리케이션의 사용자가 많은 경우.</td><td align="left">좋음</td></tr><tr><td align="left">상태 코드, 가능한 상태 코드가 몇 개 없는 경우.</td><td align="left">나쁨</td></tr><tr><td align="left">항목 생성 날짜, 가장 가까운 시간(예: 날, 시, 분)으로 반올림.</td><td align="left">나쁨</td></tr><tr><td align="left">디바이스 ID, 각 디바이스가 비교적 비슷한 간격으로 데이터에 액세스하는 경우.</td><td align="left">좋음</td></tr><tr><td align="left">디바이스 ID, 추적되는 디바이스는 많지만 다른 디바이스보다 한 디바이스가 훨씬 더 인기 있는 경우.</td><td align="left">나쁨</td></tr></tbody></table></li></ul></li><li><p>쓰기 샤딩</p><ul><li><p>여러 파티션 키 공간에 워크로드를 더 골고루 배분할 수 있도록, 파티션 키 값 끝에 난수나 접미사를 추가하여 병렬처리함</p></li><li><p>데이터 입력시, 가능하다면, 여러 파티션을 골고루 순회하며 입력할 수 있도록 쿼리</p><ul><li>아래 표에서 첫번째 표보다, 두번째 표가 서로 다른 파티션 키 값을 사용, 병렬처리 성능 향상</li></ul><table><thead><tr><th align="left">UserID</th><th align="left">MessageID</th></tr></thead><tbody><tr><td align="left">U1</td><td align="left">1</td></tr><tr><td align="left">U1</td><td align="left">2</td></tr><tr><td align="left">U1</td><td align="left">…</td></tr><tr><td align="left">U1</td><td align="left">… 최대 100</td></tr><tr><td align="left">U2</td><td align="left">1</td></tr><tr><td align="left">U2</td><td align="left">2</td></tr><tr><td align="left">U2</td><td align="left">…</td></tr><tr><td align="left">U2</td><td align="left">… 최대 200</td></tr></tbody></table><table><thead><tr><th align="left">UserID</th><th align="left">MessageID</th></tr></thead><tbody><tr><td align="left">U1</td><td align="left">1</td></tr><tr><td align="left">U2</td><td align="left">1</td></tr><tr><td align="left">U3</td><td align="left">1</td></tr><tr><td align="left">…</td><td align="left">…</td></tr><tr><td align="left">U1</td><td align="left">2</td></tr><tr><td align="left">U2</td><td align="left">2</td></tr><tr><td align="left">U3</td><td align="left">2</td></tr><tr><td align="left">…</td><td align="left">…</td></tr></tbody></table></li></ul><blockquote><p>여러 UserID를 순회하면서 값을 입력한다면, 병렬 처리 성능이 향상한다.</p></blockquote></li></ul><h3 id="정렬키-설계"><a href="#정렬키-설계" class="headerlink" title="정렬키 설계"></a>정렬키 설계</h3><ul><li><p><a href="https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/bp-sort-keys.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/bp-sort-keys.html</a></p></li><li><p>복합정렬키를 사용하면, 데이터의 계층적 관계를 정의할 수 있도록 도와준다</p><p><code>[country]#[region]#[state]#[county]#[city]#[neighborhood]</code></p><p>위와같이, 정렬키를 구성한다면, <code>begins_with</code>, <code>between</code>, <code>&gt;</code>, <code>&lt;</code> 등 연산자를 사용하는 범위 쿼리를 사용하여 위치 목록을 효율적으로 범위 쿼리 할 수 있다.</p></li></ul><h3 id="보조키-설계"><a href="#보조키-설계" class="headerlink" title="보조키 설계"></a>보조키 설계</h3><p><a href="https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/bp-indexes-general.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/bp-indexes-general.html</a></p><ul><li><p>일반적으로 로컬 보조 인덱스보다, 글로벌 보조 인덱스 사용</p></li><li><p>스토리지 및 IO 비용 감소를 위해 : 인덱스 수와 크기를 최대한 작게 유지</p></li></ul><h3 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h3><h4 id="Case1"><a href="#Case1" class="headerlink" title="Case1"></a>Case1</h4><p><a href="https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/bp-sort-keys.html" target="_blank" rel="noopener">https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/bp-sort-keys.html</a></p><p><img src="https://docs.aws.amazon.com/ko_kr/amazondynamodb/latest/developerguide/images/VersionControl.png" alt="         기본 키와 데이터 항목 속성을 가진 테이블을 표시하는 버전 관리의 예       "></p><p>버전 관리에 정렬키를 사용하는 경우로 v0_ v00_ v000_ 같은 계층구조로 버전을 효율적으로 쿼링함.</p><h4 id="Case2"><a href="#Case2" class="headerlink" title="Case2"></a>Case2</h4><p><a href="https://dev.overnodes.com/entry/AWS-DynamoDBNoSQL" target="_blank" rel="noopener">https://dev.overnodes.com/entry/AWS-DynamoDBNoSQL</a></p><p><img src="https://i.postimg.cc/gcxtDBmx/dynamodb-example-1.png" alt="image-20200324180519822"></p><p><img src="https://i.postimg.cc/MpSsz6RB/dynamodb-example-2.png" alt="image-20200324180741274"></p><blockquote><p>Collector-1 / Collector-2, Details/Remittance-1 키의 네임이 아니라, Value이다</p></blockquote><h3 id="스터디-적용"><a href="#스터디-적용" class="headerlink" title="스터디 적용"></a>스터디 적용</h3><blockquote><p>거래 태깅 변경 로그의 테이블 설계</p></blockquote><h4 id="파티션키-정렬키-설계"><a href="#파티션키-정렬키-설계" class="headerlink" title="파티션키, 정렬키 설계"></a>파티션키, 정렬키 설계</h4><ul><li><p>키후보</p><ol><li><p>파티션키 : 회사 ID   /  정렬키 : 거래ID + 입력시간(DTS_UPDATE)</p></li><li><p>파티션키 : 거래 ID  /   정렬키 : 입력시간(DTS_UPDATE)</p></li><li><p>파티션키 : 거래ID + 입력시간(DTS_UPDATE)</p></li></ol></li><li><p>사용 쿼리</p><ul><li>조회 쿼리<ul><li>한 회사의 종합적인 태그 변경 로그를 분석할 경우 1번의 케이스가 적절</li><li>한 거래 내역의 태그 변경 로그를 쿼리할 경우 2번의 케이스가 적절</li></ul></li><li>다중 입력시 병렬처리 성능 최적화 관점<ul><li>1번 케이스의 경우, 스크래핑시나 스마트 태그시 한 파티션에 워크로드가 집중되는 문제가 있음</li><li>3번 케이스의 경우, 워크로드 분산에는 최적화되지만, 데이터의 구조가 실제 사용 케이스와 다름</li><li>2번 케이스가 적절함.</li></ul></li></ul></li></ul><blockquote><p>조회쿼리/다중입력을 고려하여 2번 케이스가 가장 적절하다고 판단됌.</p></blockquote><h4 id="보조키-사용"><a href="#보조키-사용" class="headerlink" title="보조키 사용"></a>보조키 사용</h4><ul><li>한 회사의 종합적인 태그 변경 로그를 분석할 케이스가 있을 수 있기 때문에 <code>회사ID</code> 보조키를 사용한다.</li><li>2번 케이스로 구성할경우, 회사 ID는 기본키와 별개이므로, 글로벌 보조키를 사용한다.</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>콘솔로그 console.log 글자 서식 주기</title>
      <link href="/2020/03/09/Web/%EC%BD%98%EC%86%94%EB%A1%9C%EA%B7%B8%EA%B8%80%EC%9E%90%EC%84%9C%EC%8B%9D%EC%A3%BC%EA%B8%B0/"/>
      <url>/2020/03/09/Web/%EC%BD%98%EC%86%94%EB%A1%9C%EA%B7%B8%EA%B8%80%EC%9E%90%EC%84%9C%EC%8B%9D%EC%A3%BC%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">`%c<span class="subst">$&#123;variable&#125;</span>`</span>, <span class="string">"color: blue; font-size: large"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Facebook Pixel Code와 FB App Event의 차이점</title>
      <link href="/2019/12/17/etc/facebook-pixel-event-vs-app-event/"/>
      <url>/2019/12/17/etc/facebook-pixel-event-vs-app-event/</url>
      
        <content type="html"><![CDATA[<p>하이브리드 앱에서 페이스북 픽셀 “이벤트”는 웹에서 JS를 통해 동작함.</p><p>반면 FB App Event의 경우 네이티브 앱을 위해 만들어 졌음</p><p>따라서 하이브리드 앱에서 “앱 이벤트”를 사용할 경우, 아래와 같은 장점이 있다고 함.</p><ul><li><p>앱 설치 이벤트 활용 가능</p></li><li><p>어플리케이션 버전, 디바이스 모델과 같은 구체적인 컨텍스트 정보 획득 가능</p></li><li><p>안정적 이벤트 로그 전송 가능</p></li></ul><p>(<a href="https://developers.facebook.com/ads/blog/post/v2/2018/07/31/hybrid-web-apps" target="_blank" rel="noopener">https://developers.facebook.com/ads/blog/post/v2/2018/07/31/hybrid-web-apps</a>)</p><p>픽셀 이벤트를 앱 이벤트로 인터셉트 하는 방법이 나와있음.<br><a href="https://developers.facebook.com/docs/app-events/hybrid-app-events" target="_blank" rel="noopener">https://developers.facebook.com/docs/app-events/hybrid-app-events</a></p>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>scroll시 이미지 bounce 시키기</title>
      <link href="/2019/12/16/CSS/CSS-scroll-image-bounce/"/>
      <url>/2019/12/16/CSS/CSS-scroll-image-bounce/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">      position: absolute;</span><br><span class="line">      top: 130px;</span><br><span class="line">      left: 177px;</span><br><span class="line">      z-index: 5;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.ani_margin_top</span> &#123;</span></span><br><span class="line">      margin-top: -60px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.ani_margin</span> &#123;</span></span><br><span class="line">padding-top: 60px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.transition_ani1</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">-webkit-transition</span>: <span class="selector-tag">all</span> 2<span class="selector-class">.1s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">-moz-transition</span>: <span class="selector-tag">all</span> 2<span class="selector-class">.1s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">-o-transition</span>: <span class="selector-tag">all</span> 2<span class="selector-class">.1s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 2<span class="selector-class">.1s</span> <span class="selector-tag">ease</span>;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">animation-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(0,0,0<span class="selector-class">.2</span>,1);</span></span><br><span class="line"><span class="css">      <span class="selector-tag">-webkit-animation-timing-function</span>: <span class="selector-tag">cubic-bezier</span>(0,0,0<span class="selector-class">.2</span>,1);</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container transition_ani1 ani_margin ani_motion_2 ani_margin_top"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"assets/img/image.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SCSS 실사용팁 rem 함수 처리, 색상 변수, ellipsis 확장</title>
      <link href="/2019/10/15/CSS/SCSS-%EC%8B%A4%EC%82%AC%EC%9A%A9%ED%8C%81-%EB%B0%98%EC%9D%91%ED%98%95%EC%B2%98%EB%A6%AC/"/>
      <url>/2019/10/15/CSS/SCSS-%EC%8B%A4%EC%82%AC%EC%9A%A9%ED%8C%81-%EB%B0%98%EC%9D%91%ED%98%95%EC%B2%98%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<p>css 단위로 <code>rem</code>을 사용한다.</p><ul><li><p>_variables.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$browser-context</span>: <span class="number">20</span>; <span class="comment">// 브라우저의 기본 폰트</span></span><br><span class="line"></span><br><span class="line">@function rem(<span class="variable">$pixels</span>, <span class="variable">$context</span>: <span class="variable">$browser-context</span>) &#123;</span><br><span class="line">  @return #&#123;$pixels/$context&#125;rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$primary-color</span>: <span class="number">#FF6D70</span>;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> pad-h (<span class="variable">$left</span>, <span class="variable">$right</span>) &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="variable">$left</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">padding-right</span>: <span class="variable">$right</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">%ellipsis &#123;</span><br><span class="line">  <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 사용시</span></span><br><span class="line">@<span class="keyword">import</span> <span class="string">"./variables"</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.page</span> &#123;</span><br><span class="line">  &amp;__icon-container &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: rem(<span class="number">100</span>);</span><br><span class="line">    @<span class="keyword">include</span> pad-h(rem(<span class="number">40</span>), rem(<span class="number">40</span>));</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$primary-color</span>;</span><br><span class="line">    @<span class="keyword">extend</span> %ellipsis;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@mixin</code>을 이용한 <code>@include</code>의 경우는 정의된 CSS를 각각 선언해주며 <code>@extend</code> 공통 CSS를 만들고 추가해주는 차이가 있다.</p></li><li><p>_reset.scss</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto;</span><br><span class="line">  <span class="comment">// 브라우저에서 사용자가 디폴트 폰트 사이즈를 변경할 수 있으므로 %로 설정한다.</span></span><br><span class="line">  <span class="comment">// default 16px, 환산 20px, browswer-context와 맞춰줌</span></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">125%</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: 700px) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">81.3%</span> <span class="meta">!important</span>; <span class="comment">// 환산 13px;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.34</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: 467px) &#123;</span><br><span class="line">  <span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">62.5%</span> <span class="meta">!important</span>; <span class="comment">// 환산 10px;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.34</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Refenrece"><a href="#Refenrece" class="headerlink" title="Refenrece"></a>Refenrece</h2><p> [css에서의 em과 %] : <a href="https://aboooks.tistory.com/142" target="_blank" rel="noopener">https://aboooks.tistory.com/142</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>overflow scroll 일시 right margin이 안먹는 문제</title>
      <link href="/2019/09/16/CSS/overflow-scroll-right-padding-problem/"/>
      <url>/2019/09/16/CSS/overflow-scroll-right-padding-problem/</url>
      
        <content type="html"><![CDATA[<p>margin은 엘리먼트의 위치를 조정할뿐 wrapper의 크기를 확장시켜주지 않는다. 그래서 overflow: scroll일때 margin 값이 먹지 않는다.</p><p>다음과 같은 슈도 코드를 이용해서 해결할 수 있다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">    <span class="attribute">overflow-x</span>: auto;</span><br><span class="line">    <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> grey solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> red solid;</span><br><span class="line">    <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>안녕<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><script async src="//jsfiddle.net/skout90/tupcyvsL/1/embed/"></script><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://blog.alexandergottlieb.com/overflow-scroll-and-the-right-padding-problem-a-css-only-solution-6d442915b3f4" target="_blank" rel="noopener">https://blog.alexandergottlieb.com/overflow-scroll-and-the-right-padding-problem-a-css-only-solution-6d442915b3f4</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Mybatis Query 결과를 보기 좋게 정렬해보자</title>
      <link href="/2019/08/31/Spring/spring-mybatis-pretty-sql-result/"/>
      <url>/2019/08/31/Spring/spring-mybatis-pretty-sql-result/</url>
      
        <content type="html"><![CDATA[<p>mybatis로 나오는 spring 쿼리를 보기 좋게 포매팅 해보자.</p><p>log4j : 속도, 로그 래벨, 멀티스레드 안정성을 고려한 로딩 라이브러리</p><p>slf4j : log4j와 같은 로깅 라이브러리의 인터페이스 역할</p><p>logback : log4j의 강화판이라고 보면 될듯</p><p>log4j -&gt; slf4j -&gt; logback 순서대로 적용된다.</p><p>개념은 <a href="https://goddaehee.tistory.com/45" target="_blank" rel="noopener">https://goddaehee.tistory.com/45</a> 사이트에 잘 정리해두셨다.</p><ul><li><strong>pom.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4jdbc-remix --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.lazyluke<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4jdbc-remix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- logback --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bgee.log4jdbc-log4j2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4jdbc-log4j2-jdbc4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>context-datasource.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:jee</span>=<span class="string">"http://www.springframework.org/schema/jee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceSpied"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"net.sf.log4jdbc.sql.jdbcapi.DriverSpy"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:oracle:thin:@url:port:SID"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"net.sf.log4jdbc.Log4jdbcProxyDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">"dataSourceSpied"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"logFormatter"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"net.sf.log4jdbc.tools.Log4JdbcCustomFormatter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loggingType"</span> <span class="attr">value</span>=<span class="string">"MULTI_LINE"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlPrefix"</span> <span class="attr">value</span>=<span class="string">"SQL : "</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/config/sql/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/config/sql/*/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/config/sql/*/*/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/config/sql/*/*/*/*.xml<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:/config/mybatis/mybatis-config.xml"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>src/main/resources/logback.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss&#125; %-5level - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file_log"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>/app/log/ssp_api.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>/app/log/ssp_api.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timeBasedFileNamingAndTriggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- or whenever the file size reaches 100MB --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.classic.encoder.PatternLayoutEncoder"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; &#123;%thread&#125; %-5level %logger&#123;32&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- &lt;logger name="org.springframework" level="debug"/&gt; &lt;logger name="org.apache.http.wire" level="error" /&gt; &lt;logger name="org.apache.http.client" level="error" /&gt; --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework"</span> <span class="attr">level</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.mybatis.spring"</span> <span class="attr">level</span>=<span class="string">"info"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc"</span>                <span class="attr">level</span>=<span class="string">"OFF"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.sqlonly"</span>        <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span>  <span class="comment">&lt;!-- 파라미터를 셋팅해서 출력--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.resultsettable"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span>  <span class="comment">&lt;!-- 결과값을 보여줌--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"jdbc.sqltiming"</span>      <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"log4jdbc.debug"</span>      <span class="attr">level</span>=<span class="string">"INFO"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file_log"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>src/main/resources/log4jdbc.log4j2.properties</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log4jdbc.spylogdelegator.name=net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator</span><br><span class="line">log4jdbc.dump.sql.maxlinelength=0</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://addio3305.tistory.com/66" target="_blank" rel="noopener">https://addio3305.tistory.com/66</a></p><p><a href="https://goddaehee.tistory.com/45" target="_blank" rel="noopener">https://goddaehee.tistory.com/45</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache[webtier] 서버 파일[nas] 웹서버를 통해 Response 하기</title>
      <link href="/2019/08/30/Web/apache-server-file-setting/"/>
      <url>/2019/08/30/Web/apache-server-file-setting/</url>
      
        <content type="html"><![CDATA[<p>웹티어(Webtier)는 아파치와 동일하게 설정을 가져간다고 한다</p><p><code>httpd.conf</code> 파일을 수정하면 된다.</p><ul><li>웹티어 경로</li></ul><p>/www/webtier/domains/[도메인주소]/config/fmwconfig/components/OHS/VCWeb1/httpd.conf</p><blockquote><p>못찾을 경우 find / -name “httpd.conf” 를 검색해서 알아내자!</p></blockquote><h3 id="alias-설정"><a href="#alias-설정" class="headerlink" title="alias 설정"></a>alias 설정</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule alias_module&gt;</span><br><span class="line">   # ...</span><br><span class="line"></span><br><span class="line">    Alias /vcomattach /vcomattach</span><br></pre></td></tr></table></figure><blockquote><p>Alias /불러올 경로 /실제 파일 경로</p></blockquote><h3 id="해당-디렉터리의-권한-설정"><a href="#해당-디렉터리의-권한-설정" class="headerlink" title="해당 디렉터리의 권한 설정"></a>해당 디렉터리의 권한 설정</h3><ul><li>httpd.conf</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /path&gt;</span><br><span class="line">    AllowOverride none</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure><p>alias 설정과 권한 설정 모두 하위 디렉터리가 다 포함된다.</p><p>웹서버에 다음과 같이 접근 가능</p><p><code>웹서버주소/alias에등록한 경로</code></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bounce 애니메이션</title>
      <link href="/2019/04/01/CSS/CSS-animation-Bounce/"/>
      <url>/2019/04/01/CSS/CSS-animation-Bounce/</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bounce</span> &#123;</span><br><span class="line">  <span class="attribute">border </span>: <span class="number">1px</span> grey solid;</span><br><span class="line">  <span class="attribute">animation</span>: q-bounce <span class="number">2s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> q-bounce &#123;</span><br><span class="line">  0%, 20%, 50%, 80%, 100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(0)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  40% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-30px)</span><br><span class="line">  &#125;</span><br><span class="line">  60% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-15px)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bounce"</span>&gt;</span></span><br><span class="line">  안녕하세요!</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a class="jsbin-embed" href="https://jsbin.com/waqokamali/embed?html,css,output" target="_blank" rel="noopener">JS Bin on jsbin.com</a><script src="https://static.jsbin.com/js/embed.min.js?4.1.7"></script></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>this 바인딩 분석</title>
      <link href="/2018/12/28/Javascript/this%EB%B0%94%EC%9D%B8%EB%94%A9-%EB%B6%84%EC%84%9D/"/>
      <url>/2018/12/28/Javascript/this%EB%B0%94%EC%9D%B8%EB%94%A9-%EB%B6%84%EC%84%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="기본-바인딩"><a href="#기본-바인딩" class="headerlink" title="기본 바인딩"></a>기본 바인딩</h2><p>전역함수 내에서 this 호출시 <strong>this = window</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFruitName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'apple'</span>;</span><br><span class="line"></span><br><span class="line">getFruitName(); <span class="comment">// "apple"</span></span><br></pre></td></tr></table></figure><h2 id="암시적-바인딩"><a href="#암시적-바인딩" class="headerlink" title="암시적 바인딩"></a>암시적 바인딩</h2><h3 id="객체-function-함수-할당시"><a href="#객체-function-함수-할당시" class="headerlink" title="객체 function 함수 할당시"></a>객체 function 함수 할당시</h3><p>객체 내에 function 함수를 호출시 <strong>this = 해당 객체</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFruitName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'apple'</span>,</span><br><span class="line">    onPress: getFruitName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.onPress(); <span class="comment">// "apple"</span></span><br></pre></td></tr></table></figure><h3 id="객체-arrow-function-함수-할당시"><a href="#객체-arrow-function-함수-할당시" class="headerlink" title="객체 arrow function 함수 할당시"></a>객체 arrow function 함수 할당시</h3><p>객체 내 arrow function 함수 호출시 <strong>this = 해당 컨텍스트의 부모 객체</strong></p><blockquote><p>arrow function은 의도적으로 컨텍스트를 할당할 수 있기 때문에 명시적 할당에 더 가깝다고 볼 수도 있다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'banana'</span></span><br><span class="line"><span class="keyword">const</span> z = &#123;</span><br><span class="line">    name: <span class="string">'apple'</span>,</span><br><span class="line">    onPress: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">z.onPress(); <span class="comment">// banana</span></span><br></pre></td></tr></table></figure><h3 id="객체에-할당된-function-함수를-복사시"><a href="#객체에-할당된-function-함수를-복사시" class="headerlink" title="객체에 할당된 function 함수를 복사시"></a>객체에 할당된 function 함수를 복사시</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFruitName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'banana'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'apple'</span>,</span><br><span class="line">    getFruitName: getFruitName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getCopyFruitName = obj.getFruitName</span><br><span class="line"></span><br><span class="line">getCopyFruitName() <span class="comment">// banana</span></span><br></pre></td></tr></table></figure><p>getCopyFruitName은 일반 함수이므로 obj.getFruitName을 할당하는 순간, this는 전역 객체가 되어버린다.</p><h2 id="명시적-바인딩"><a href="#명시적-바인딩" class="headerlink" title="명시적 바인딩"></a>명시적 바인딩</h2><p>우리가 의도한대로, this를 바인딩해보자!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFruitName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'banana'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obje = &#123;</span><br><span class="line">    name: <span class="string">'apple'</span>,</span><br><span class="line">    onPress: getFruitName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getCopyFruitName = obje.onPress</span><br><span class="line"><span class="keyword">const</span> getCorectCopyFruitName = obje.onPress.bind(obje)</span><br><span class="line"></span><br><span class="line">getCopyFruitName() <span class="comment">// banana</span></span><br><span class="line">getCorrectCopyFruitName() <span class="comment">// apple</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://enarastudent.tistory.com/entry/null과-undefined의-차이" target="_blank" rel="noopener">http://enarastudent.tistory.com/entry/null과-undefined의-차이</a></p><p><a href="https://stackoverflow.com/questions/1068834/object-comparison-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/1068834/object-comparison-in-javascript</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Bookshelf plugins를 살펴보자</title>
      <link href="/2018/12/22/Node.js/Bookshelf-Plugins%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90/"/>
      <url>/2018/12/22/Node.js/Bookshelf-Plugins%EC%82%B4%ED%8E%B4%EB%B3%B4%EC%9E%90/</url>
      
        <content type="html"><![CDATA[<p>Bookshelf에 다양한 플러그인들이 많은데, 이번기회에 쓸만한 플러그인이 있나 한번 훝어 보기로 했다.</p><p><a href="https://bookshelfjs.org/#plugins" target="_blank" rel="noopener">https://bookshelfjs.org/#plugins</a></p><h3 id="Virtuals"><a href="#Virtuals" class="headerlink" title="Virtuals"></a>Virtuals</h3><p><a href="https://github.com/bookshelf/bookshelf/wiki/Plugin:-Virtuals" target="_blank" rel="noopener">https://github.com/bookshelf/bookshelf/wiki/Plugin:-Virtuals</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bs = <span class="built_in">require</span>(<span class="string">'bookshelf'</span>)(knex).plugin([<span class="string">'virtuals'</span>]);</span><br><span class="line"><span class="keyword">var</span> ModelWithVirtuals = bookshelf.Model.extend(&#123;</span><br><span class="line">  virtuals: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.get(<span class="string">'firstName'</span>) + <span class="string">' '</span> + <span class="keyword">this</span>.get(<span class="string">'lastName'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>virtuals 안에 새로운 칼럼을 조작해서 만들 수 있다!</p><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h3><p><a href="https://github.com/bookshelf/bookshelf/wiki/Plugin:-Processor" target="_blank" rel="noopener">https://github.com/bookshelf/bookshelf/wiki/Plugin:-Processor</a></p><p>같은 칼럼을 조작하고 싶을때! 인자로 함수를 넘겨야함.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bookshelf.plugin(<span class="string">'processor'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> castToDate = <span class="built_in">require</span>(<span class="string">'./processors/to-date'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> MyModel = bookshelf.Model.extend(&#123;</span><br><span class="line">  tableName: <span class="string">'things'</span>,</span><br><span class="line">  processors: &#123;</span><br><span class="line">    <span class="comment">// loginDate is a model attribute name</span></span><br><span class="line">    loginDate: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h3><p>패스워드 같은 것을 리턴되지 않게 할 수 있음!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bs = <span class="built_in">require</span>(<span class="string">'bookshelf'</span>)(knex).plugin([<span class="string">'visibility'</span>]);</span><br><span class="line">Db.Users = Orm.Model.extend(&#123;</span><br><span class="line">  tableName: <span class="string">'users'</span></span><br><span class="line">, <span class="attr">hidden</span>: [<span class="string">'password'</span>, <span class="string">'salt'</span>, <span class="string">'secret'</span>, <span class="string">'hashtype'</span>]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// toJSON() 할때 이런식으로 하면 해당 칼럼이 빠짐</span></span><br><span class="line">toJSON(&#123; <span class="attr">visibility</span>: <span class="literal">false</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="bookshelf-signals"><a href="#bookshelf-signals" class="headerlink" title="bookshelf-signals"></a>bookshelf-signals</h3><p><a href="https://github.com/bogus34/bookshelf-signals" target="_blank" rel="noopener">https://github.com/bogus34/bookshelf-signals</a></p><p>이벤트를 각 모델에 셋팅할 필요 없이 중앙에다가 셋팅할 수 있음.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Signals = <span class="built_in">require</span>(<span class="string">'bookshelf-signals'</span>)</span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'bookshelf'</span>)(knex).plugin([Signals]);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="title">extend</span> <span class="title">db</span>.<span class="title">Model</span>(</span>&#123;</span><br><span class="line">  tabeName: <span class="string">'users'</span>  </span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">db.on(<span class="string">'saved'</span>, User, () =&gt; <span class="built_in">console</span>.log(<span class="string">'user was saved!'</span>))</span><br></pre></td></tr></table></figure><p>on(String event, [(Class|String) cls], Function handler)</p><p>두번째 인자가 배열인것에 주목!! 로깅을 위한 공통 createdAt 이나 updatedAt 같은것을 이곳에서 한꺼번에 셋팅할 수 있겠다.</p><p><a href="https://bookshelfjs.org/#plugins" target="_blank" rel="noopener">https://bookshelfjs.org/#plugins</a></p><p>그외에도 더 많은 플러그인이 있으니 위 링크 참조</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://bookshelfjs.org/#plugins" target="_blank" rel="noopener">https://bookshelfjs.org/#plugins</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React Native dev/Staging/Production 코드 푸시 적용 참고 링크</title>
      <link href="/2018/12/05/React/RN-CODE-PUSH/"/>
      <url>/2018/12/05/React/RN-CODE-PUSH/</url>
      
        <content type="html"><![CDATA[<h2 id="셋팅-방법"><a href="#셋팅-방법" class="headerlink" title="셋팅 방법"></a>셋팅 방법</h2><p><a href="https://github.com/kjk7034/ReactNativeStudy/blob/master/docs/CodePush.md" target="_blank" rel="noopener">https://github.com/kjk7034/ReactNativeStudy/blob/master/docs/CodePush.md</a></p><h2 id="명령어-모음"><a href="#명령어-모음" class="headerlink" title="명령어 모음"></a>명령어 모음</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;code-push:test-a&quot;: &quot;code-push release-react bGlam-Inc/bglam-b2c-app-android android&quot;,</span><br><span class="line">&quot;code-push:prod-a&quot;: &quot;code-push release-react bGlam-Inc/bglam-b2c-app-android android -d Production&quot;,</span><br><span class="line">&quot;code-push:info-a&quot;: &quot;code-push deployment ls bGlam-Inc/bglam-b2c-app-android -k&quot;,</span><br><span class="line">&quot;code-push:test-i&quot;: &quot;code-push release-react bGlam-Inc/bglam-b2c-app-ios ios&quot;,</span><br><span class="line">&quot;code-push:prod-i&quot;: &quot;code-push release-react bGlam-Inc/bglam-b2c-app-ios ios -d Production&quot;,</span><br><span class="line">&quot;code-push:info-i&quot;: &quot;code-push deployment ls bGlam-Inc/bglam-b2c-app-ios -k&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CircleCI를 활용해서 build한 파일 서버에 배포하기</title>
      <link href="/2018/09/02/DevOps/circleCI-%EB%B9%8C%EB%93%9C-%EB%B0%B0%ED%8F%AC-%ED%8C%8C%EC%9D%BC%EC%A0%84%EC%86%A1-%EB%A6%AC%EC%8A%A4%ED%83%80%ED%8A%B8/"/>
      <url>/2018/09/02/DevOps/circleCI-%EB%B9%8C%EB%93%9C-%EB%B0%B0%ED%8F%AC-%ED%8C%8C%EC%9D%BC%EC%A0%84%EC%86%A1-%EB%A6%AC%EC%8A%A4%ED%83%80%ED%8A%B8/</url>
      
        <content type="html"><![CDATA[<p>한창 CI/CD에 대한 연동 작업을 하고 있다. Circle CI를 활용하여 빌드 배포 자동화를 완성해보자. Circle CI는 1개의 컨테이너를 제공하는데, 1달에 1500 시간 사용할 수 있으며, 여러 repository 까지 무료로 제공해준다! </p><p><a href="https://circleci.com" target="_blank" rel="noopener">https://circleci.com</a></p><ul><li>작업 흐름은 다음과 같다.</li></ul><ol><li>git push</li><li>circle ci 에서 event catch</li><li>circle ci 빌드 시작<ol><li>docker를 통해 ubuntu, node 이미지 실행</li><li>build</li></ol></li><li>성공한 build 파일을 배포할 서버로 전송</li><li>운영 서버에 접속 후 서버 리스타트</li></ol><h2 id="Circle-CI-셋팅"><a href="#Circle-CI-셋팅" class="headerlink" title="Circle CI 셋팅"></a>Circle CI 셋팅</h2><ul><li>Circle CI에 프로젝트 추가</li></ul><p>Circle CI 대시보드 =&gt; Add Project 에서 원하는 repository 추가</p><ul><li>Circle CI에 연결된 프로젝트에 SSH Key를 추가</li></ul><p>다음 링크를 참고 : <a href="https://twpower.github.io/47-deploy-to-server-in-circle-ci" target="_blank" rel="noopener">https://twpower.github.io/47-deploy-to-server-in-circle-ci</a></p><ul><li>config.yml 셋팅</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd 프로젝트 경로로 이동</span><br><span class="line">mkdir .circleci</span><br><span class="line">cd .circleci</span><br><span class="line">sudo vi config.yml</span><br></pre></td></tr></table></figure><p>다음과 같은 내용을 입력한다</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Javascript Node CircleCI 2.0 configuration file</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Check https://circleci.com/docs/2.0/language-javascript/ for more details</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    docker:</span></span><br><span class="line">      <span class="comment"># specify the version you desire here</span></span><br><span class="line"><span class="attr">      - image:</span> <span class="string">circleci/node:8</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Specify service dependencies here if necessary</span></span><br><span class="line">      <span class="comment"># CircleCI maintains a library of pre-built images</span></span><br><span class="line">      <span class="comment"># documented at https://circleci.com/docs/2.0/circleci-images/</span></span><br><span class="line">      <span class="comment"># - image: circleci/mongo:3.4.4</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    working_directory:</span> <span class="string">~/web2.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line">      <span class="comment"># 빌드한 결과를 SSH를 활용하여 운영서버에 전송하기 위한 모듈 install</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">sudo</span> <span class="string">apt</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">rsync</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">      -</span> <span class="string">checkout</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Download and cache dependencies</span></span><br><span class="line"><span class="attr">      - restore_cache:</span></span><br><span class="line"><span class="attr">          keys:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="comment"># fallback to using the latest cache if no exact match is found</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">v1-dependencies-</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">yarn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - save_cache:</span></span><br><span class="line"><span class="attr">          paths:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">          key:</span> <span class="string">v1-dependencies-&#123;&#123;</span> <span class="string">checksum</span> <span class="string">"package.json"</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment"># run build</span></span><br><span class="line"><span class="attr">      - run:</span> <span class="string">yarn</span> <span class="string">build</span> <span class="comment"># 여기에 해당하는 빌드 커맨드를 입력한다!</span></span><br><span class="line"></span><br><span class="line"><span class="attr">      - deploy:</span></span><br><span class="line"><span class="attr">          name:</span> <span class="string">SSH</span> <span class="string">File</span> <span class="string">Transfer</span></span><br><span class="line">          <span class="comment"># branch가 master라면 실행, 본인의 branch를 입력할것.</span></span><br><span class="line"><span class="attr">          command:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            if [ "$&#123;CIRCLE_BRANCH&#125;" == "master" ]; then</span></span><br><span class="line"><span class="string">                ./deploy-test.sh</span></span><br><span class="line"><span class="string">            fi</span></span><br></pre></td></tr></table></figure><ul><li>deploy-test.sh 생성</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd 프로젝트 루트</span><br><span class="line">sudo vi deploy-test.sh</span><br><span class="line">chmod +x deploy-test.sh</span><br></pre></td></tr></table></figure><p>다음 내용을 입력하자</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"><span class="meta">#</span># file transfer</span><br><span class="line">rsync -avP [circle ci를 통해 빌드된 파일경로] [서버host]@[서버주소]:[빌드된 파일을 저장할 경로] -e "ssh -o StrictHostKeyChecking=no"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span># server restart</span><br><span class="line">ssh [서버host]@[주소] -o StrictHostKeyChecking=no &lt;&lt;'ENDSSH'</span><br><span class="line"><span class="meta">#</span> 이곳에다가 커맨드를 입력한다.</span><br><span class="line"><span class="meta">#</span> 필자의 경우 pm2를 활용하여 서버를 리스타트 시켜주었다.</span><br><span class="line">/home/ubuntu/.yarn-global/bin/pm2 restart web</span><br><span class="line">ENDSSH</span><br></pre></td></tr></table></figure><p>저장후 sh를 실행가능하도록 만든다</p><blockquote><p>chmod +x deploy-test.sh</p></blockquote><p>rsync를 활용하는 것이 굉장히 빠르다. (scp를 사용하면 파일전송만 1시간이 걸린다;;) rsync의 옵션의 경우 다음 링크를 참조( <a href="http://gyus.me/?p=214" target="_blank" rel="noopener">http://gyus.me/?p=214</a> )</p><blockquote><p> &lt;&lt;’ENDSSH’   ENDSSH</p></blockquote><p>여기서 ENDSSH는 원하는 글자로 바꿔도 된다. 시작 끝 태그만 동일하면 됌.</p><p>자 이제 git 커밋을 자동하면 자동으로 빌드/배포/리스타트가 이루어진다!!</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>circle CI : <a href="https://twpower.github.io/47-deploy-to-server-in-circle-ci" target="_blank" rel="noopener">https://twpower.github.io/47-deploy-to-server-in-circle-ci</a></p><p>rsync : <a href="http://gyus.me/?p=214" target="_blank" rel="noopener">http://gyus.me/?p=214</a></p>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CI / CD 링크 정리</title>
      <link href="/2018/09/02/DevOps/ci-cd-reference/"/>
      <url>/2018/09/02/DevOps/ci-cd-reference/</url>
      
        <content type="html"><![CDATA[<ul><li><p>CI / CD 툴 비교</p><blockquote><p><a href="https://www.slant.co/topics/799/~best-continuous-integration-tools" target="_blank" rel="noopener">https://www.slant.co/topics/799/~best-continuous-integration-tools</a></p></blockquote></li><li><p>jenkins (doker활용) : CI / CD 툴<br><a href="http://woowabros.github.io/experience/2018/06/26/bros-cicd.html" target="_blank" rel="noopener">http://woowabros.github.io/experience/2018/06/26/bros-cicd.html</a><br><a href="https://codeforgeek.com/2016/04/continuous-integration-deployment-jenkins-node-js/" target="_blank" rel="noopener">https://codeforgeek.com/2016/04/continuous-integration-deployment-jenkins-node-js/</a></p></li><li><p>jenkins로 node 배포하기<br><a href="https://setyourmindpark.github.io/2017/04/22/jenkins/jenkins-2/" target="_blank" rel="noopener">https://setyourmindpark.github.io/2017/04/22/jenkins/jenkins-2/</a></p></li><li><p>Circle CI + code climate + heroku<br><a href="https://medium.freecodecamp.org/how-to-set-up-continuous-integration-and-deployment-for-your-react-app-d09ae4525250" target="_blank" rel="noopener">https://medium.freecodecamp.org/how-to-set-up-continuous-integration-and-deployment-for-your-react-app-d09ae4525250</a></p></li><li><p>code deploy : CD 툴- 다양한 배포전략을 도와줌.<br><a href="http://blog.dramancompany.com/2017/04/aws-code-deploy%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94/" target="_blank" rel="noopener">http://blog.dramancompany.com/2017/04/aws-code-deploy%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%B0%B0%ED%8F%AC-%EC%9E%90%EB%8F%99%ED%99%94/</a><br>code deploy 셋팅<br><a href="https://jojoldu.tistory.com/281" target="_blank" rel="noopener">https://jojoldu.tistory.com/281</a></p></li><li><p>circle ci + aws code deploy<br><a href="https://jeongukjae.github.io/GitHub-+-CircleCI-+-AWS-CodeDeploy-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/" target="_blank" rel="noopener">https://jeongukjae.github.io/GitHub-+-CircleCI-+-AWS-CodeDeploy-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</a></p></li><li><p>netlify : 정적 웹페이지를 사용할시에 웹서버 + CI + CD 통합적인 환경 제공<br><a href="https://heropy.blog/2018/01/10/netlify/" target="_blank" rel="noopener">https://heropy.blog/2018/01/10/netlify/</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Lets Encrypt활용 nginx에서 5분만에 https 설정하기</title>
      <link href="/2018/09/01/Web/https-nginx-setup/"/>
      <url>/2018/09/01/Web/https-nginx-setup/</url>
      
        <content type="html"><![CDATA[<p>nginx와 certbot을 이용하면 https 적용이 너무 쉽다…… 괘난 삽질을 많이 한듯.</p><blockquote><p>환경 ubuntu 16.0.4</p></blockquote><ul><li>nginx 설치</li></ul><blockquote><p>sudo apt install nginx</p><p>sudo service nginx start</p></blockquote><ul><li>nginx 경로로 이동</li></ul><blockquote><p>cd /etc/nginx/conf.d</p><p>sudo vi servers.conf</p></blockquote><ul><li>서버 정보 입력</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">        server_name     [도메인 주소 입력];</span><br><span class="line">        location / &#123;</span><br><span class="line">        proxy_pass      http://localhost:[포트];</span><br><span class="line">        proxy_set_header        Host    $host;</span><br><span class="line">        proxy_set_header        X-Real-IP       $remote_addr;</span><br><span class="line">        proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_connect_timeout   150;</span><br><span class="line">        proxy_send_timeout      100;</span><br><span class="line">        proxy_read_timeout      100;</span><br><span class="line">        proxy_buffers   4 256k;</span><br><span class="line">        proxy_buffer_size       128k;</span><br><span class="line">        proxy_busy_buffers_size 256k;</span><br><span class="line">        client_max_body_size    8m;</span><br><span class="line">        client_body_buffer_size 128k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nginx 재시작</li></ul><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ sudo nginx -t</span><br><span class="line">&gt; $ sudo service nginx reload</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>certbot 설치</li></ul><blockquote><p>sudo add-apt repository ppa:certbot/certbot</p><p>sudo apt-get update</p><p>sudo apt-get install certbot</p></blockquote><ul><li>certbot nginx plugin 통해 SSL 인증이 자동으로된다!!</li></ul><blockquote><p>cd certbot</p><p>certbot-auto --nginx -d example.com -d <a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a></p></blockquote><p>그럼 아래와 같은 문구가 나옴</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Please choose whether or not to redirect HTTP traffic to HTTPS, removing HTTP access.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">1: No redirect - Make no further changes to the webserver configuration.</span><br><span class="line">2: Redirect - Make all requests redirect to secure HTTPS access. Choose this for</span><br><span class="line">new sites, or if you're confident your site works on HTTPS. You can undo this</span><br><span class="line">change by editing your web server's configuration.</span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Select the appropriate number [1-2] then [enter] (press 'c' to cancel): 2</span><br></pre></td></tr></table></figure><p>여기서 2번을 선택하면, nginx 설정에 자동으로 https로 리다이렉트 해주는 명령어가 추가된다.</p><p>키도 자동으로 생성해준다!! 대단하지 않은가!!</p><ul><li>테스트</li></ul><p><a href="https://www.ssllabs.com/ssltest/" target="_blank" rel="noopener">https://www.ssllabs.com/ssltest/</a></p><p>적용 끝이다 놀랍지 않은가.</p><p>nginx plugin을 활용하지 않고, 직접 적용하려면 아래와 같이 하면 된다.</p><p><a href="https://itnext.io/node-express-letsencrypt-generate-a-free-ssl-certificate-and-run-an-https-server-in-5-minutes-a730fbe528ca" target="_blank" rel="noopener">https://itnext.io/node-express-letsencrypt-generate-a-free-ssl-certificate-and-run-an-https-server-in-5-minutes-a730fbe528ca</a></p><h2 id="갱신"><a href="#갱신" class="headerlink" title="갱신"></a>갱신</h2><p>매달 자동 갱신을 시키는 로직을 추가하자!</p><p>ubuntu 기준 스케줄러에 등록</p><blockquote><p>crontab -e</p></blockquote><p>눌러 크론탭 수정화면 진입</p><blockquote><p> 0 4 1 * * /home/ubuntu/https/certbot/certbot-auto renew --q --no-self-upgrade</p></blockquote><p>매달, 1일 4시 0분에 갱신 명령어 입력 저장후</p><blockquote><p>crontab -l</p></blockquote><p>저장된 크론탭을 확인!</p><p>1개월마다 자동 갱신된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://twpower.github.io/44-set-free-https-by-using-letsencrypt" target="_blank" rel="noopener">https://twpower.github.io/44-set-free-https-by-using-letsencrypt</a></p><p>크론 사용 팁 : <a href="https://jdm.kr/blog/2" target="_blank" rel="noopener">https://jdm.kr/blog/2</a></p><p>자동갱신 : <a href="http://riseshia.github.io/2016/10/16/certbot-let-s-encrypt.html" target="_blank" rel="noopener">http://riseshia.github.io/2016/10/16/certbot-let-s-encrypt.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>element를 bottom에 위치시키는 3가지 방법</title>
      <link href="/2018/08/29/CSS/element-bottom-%EC%9C%84%EC%B9%98-3%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95/"/>
      <url>/2018/08/29/CSS/element-bottom-%EC%9C%84%EC%B9%98-3%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95/</url>
      
        <content type="html"><![CDATA[<ul><li>flex</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 또는 */</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>absolute</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>table row</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border-collapse</span>:collapse;</span><br><span class="line">    <span class="attribute">display </span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">display </span>: table-row;</span><br><span class="line">    <span class="attribute">vertical-align </span>: bottom;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/526035/how-can-i-position-my-div-at-the-bottom-of-its-container" target="_blank" rel="noopener">https://stackoverflow.com/questions/526035/how-can-i-position-my-div-at-the-bottom-of-its-container</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>EC2 우분투 Node 개발환경 셋팅</title>
      <link href="/2018/08/25/etc/ec2-ubuntu-node-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EC%85%8B%ED%8C%85/"/>
      <url>/2018/08/25/etc/ec2-ubuntu-node-%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD%EC%85%8B%ED%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="ec2-셋팅"><a href="#ec2-셋팅" class="headerlink" title="ec2 셋팅"></a>ec2 셋팅</h3><ul><li><p>보안그룹 </p><ul><li>SSH / Postgresql / HTTP / HTTPS  허용</li></ul></li><li><p>탄력적 IP 생성 후 인스턴스 셋팅</p></li><li><p>ssh 접속</p></li></ul><p>우분투의 경우 ubuntu@를 붙임</p><p>ssh -i <em>/path/my-key-pair</em>.pem ubuntu@<em>public-dns-hostname</em></p><p><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectingMindTerm" target="_blank" rel="noopener">https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectingMindTerm</a></p><h3 id="root-password-변경"><a href="#root-password-변경" class="headerlink" title="root password 변경"></a>root password 변경</h3><blockquote><p>sudo passwd root</p></blockquote><h3 id="locale-설정"><a href="#locale-설정" class="headerlink" title="locale 설정"></a>locale 설정</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">locale</span><br><span class="line">sudo apt install language-pack-ko</span><br><span class="line">sudo locale-gen ko_KR.UTF-<span class="number">8</span></span><br><span class="line">sudo dpkg-reconfigure locales</span><br><span class="line">sudo update-locale LANG=ko_KR.UTF-<span class="number">8</span> LC_MESSAGES=POSIX</span><br></pre></td></tr></table></figure><h3 id="timezone-설정"><a href="#timezone-설정" class="headerlink" title="timezone 설정"></a>timezone 설정</h3><blockquote><p>sudo ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime</p></blockquote><p>KST 확인</p><blockquote><p>date</p></blockquote><h3 id="vim-8-0"><a href="#vim-8-0" class="headerlink" title="vim 8.0"></a>vim 8.0</h3><blockquote><p>sudo add-apt-repository ppa:jonathonf/vim</p><p>sudo apt-get update</p><p>sudo apt-get install vim vim-gtk</p></blockquote><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><blockquote><p> sudo apt install zsh</p><p>sudo vi /etc/pam.d/chsh</p></blockquote><p>auth       required   pam_shells.so  : required =&gt; sufficient로 변경</p><blockquote><p>chsh -s /usr/bin/zsh </p><p>curl -L <a href="https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh" target="_blank" rel="noopener">https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh</a> | sh</p></blockquote><blockquote><p> sudo reboot</p><p>echo $SHELL</p></blockquote><p>위 커맨드로 /usr/bin/zsh가 나오면 okay.</p><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -</span><br><span class="line">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure><h3 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h3><ul><li><p>curl -o- <a href="https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh</a> | bash</p></li><li><blockquote><p> sudo vi ~/.zshrc 에서 아래 내용 추가</p><p>export NVM_DIR=”$HOME/.nvm”</p><p>[ -s “$NVM_DIR/nvm.sh” ] &amp;&amp; . “$NVM_DIR/nvm.sh”</p></blockquote></li></ul><h3 id="이미지-편집"><a href="#이미지-편집" class="headerlink" title="이미지 편집"></a>이미지 편집</h3><p>이미지 편집 기능이 필요하지 않으면 스킵.</p><p>c compiler, libpng, zlib</p><blockquote><p>sudo apt install graphicsmagick build-essential</p></blockquote><p>libjpeg</p><ul><li>wget <a href="https://www.ijg.org/files/jpegsrc.v9c.tar.gz" target="_blank" rel="noopener">https://www.ijg.org/files/jpegsrc.v9c.tar.gz</a></li><li>tar xzf jpegsrc.v9c.tar.gz</li><li>cd jpeg-9b</li><li>./configure –prefix=/usr/local/libjpeg</li><li>make</li><li>sudo make install</li></ul><p>graphicmagick 의 gm 커맨드와 oh-my-zsh gm 커맨드가 겹치므로</p><p>OH-MY-ZSH의 gm을 제거해줘야 한다 : </p><blockquote><p>vi  ~/.oh-my-zsh/plugins/git/git.plugin.zsh 에서 alias gm 주석 처리</p></blockquote><h3 id="global-yarn"><a href="#global-yarn" class="headerlink" title="global yarn"></a>global yarn</h3><ul><li>curl -sS <a href="https://dl.yarnpkg.com/debian/pubkey.gpg" target="_blank" rel="noopener">https://dl.yarnpkg.com/debian/pubkey.gpg</a> | sudo apt-key add    </li><li>echo “deb <a href="https://dl.yarnpkg.com/debian/" target="_blank" rel="noopener">https://dl.yarnpkg.com/debian/</a> stable main” | sudo tee /etc/apt/sources.list.d/yarn.list</li><li>sudo apt update</li><li>sudo apt install yarn</li><li>yarn config set prefix ~/.yarn-global</li><li>yarn config get prefix</li><li>cat ~/.yarnrc</li><li>path<ul><li>vi ~./.zshrc 추가 =&gt; export PATH=”$PATH:<code>yarn global bin</code>“</li></ul></li></ul><blockquote><p>#test 해보장</p><p>yarn global add knex gm pg imagemagick</p></blockquote><h3 id="postgresql"><a href="#postgresql" class="headerlink" title="postgresql"></a>postgresql</h3><ul><li>wget -q <a href="https://www.postgresql.org/media/keys/ACCC4CF8.asc" target="_blank" rel="noopener">https://www.postgresql.org/media/keys/ACCC4CF8.asc</a> -O- | sudo apt-key add -</li><li>echo “deb <a href="http://apt.postgresql.org/pub/repos/apt/" target="_blank" rel="noopener">http://apt.postgresql.org/pub/repos/apt/</a> xenial-pgdg main” | sudo tee /etc/apt/sources.list.d/postgresql.list</li><li>sudo apt-get update &amp;&amp; sudo apt-get install postgresql</li><li>sudo service postgresql start</li><li>sudo su - postgres</li><li>psql</li><li>CREATE USER bglamour WITH PASSWORD ‘bglamour’;</li><li>create database bglam_local;</li><li>psql postgres -U username : postgres DB에 username 롤로 접속</li></ul>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>파일 업로드를 위한 blob 객체 컨트롤</title>
      <link href="/2018/08/24/Node.js/blob-%EA%B0%9D%EC%B2%B4-%EC%BB%A8%ED%8A%B8%EB%A1%A4/"/>
      <url>/2018/08/24/Node.js/blob-%EA%B0%9D%EC%B2%B4-%EC%BB%A8%ED%8A%B8%EB%A1%A4/</url>
      
        <content type="html"><![CDATA[<ul><li><p>front</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//blob 객체가 존재한다고 가정</span></span><br><span class="line"><span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line"></span><br><span class="line">   formData.append(<span class="string">'file'</span>, blob, <span class="string">'filename.jpg'</span>)</span><br><span class="line">   formData.append(<span class="string">'subPath'</span>, <span class="string">'shop'</span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">await</span> axios.post(<span class="string">`/file`</span>, formData)</span><br></pre></td></tr></table></figure></li><li><p>backend</p></li></ul><p>connect-multiparty 라는 npm을 사용하면, multipart로 전송된 파일을 /tmp/blabla.확장자  경로에 저장해준다.</p><p>그 후, 임시 저장된 경로를 file object에 넣어서 return 해주는 백엔드 코드.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'express'</span>).Router()</span><br><span class="line"><span class="keyword">const</span> multipart = <span class="built_in">require</span>(<span class="string">'connect-multiparty'</span>)</span><br><span class="line"><span class="keyword">const</span> multipartMiddleware = multipart()</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/'</span>, multipartMiddleware, errorHandler(<span class="keyword">async</span> (req, res, next) =&gt; &#123;</span><br><span class="line">  res.json(&#123;</span><br><span class="line">    file: _.extend(req.files.file, &#123;<span class="attr">subPath</span>: req.body.subPath&#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>자식 컴포넌트의 함수 호출</title>
      <link href="/2018/08/22/Vue/%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%98%B8%EC%B6%9C/"/>
      <url>/2018/08/22/Vue/%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%9D%98-%EB%A9%94%EC%84%9C%EB%93%9C-%ED%98%B8%EC%B6%9C/</url>
      
        <content type="html"><![CDATA[<p>ref 또는 eventbus 를 사용한다.  여기서는 ref를 사용.</p><ul><li><p>부모 컴포넌트</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;custom-full-calendar ref=&quot;calendar&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;CustomFullCalendar&#125; from &apos;@&apos;</span><br><span class="line"> </span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        CustomFullCalendar</span><br><span class="line">    &#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">      nextWeekDate() &#123;</span><br><span class="line">  this.$refs.calendar.nextDate() // 자식 컴포넌트의 함수를 호출</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>자식 컴포넌트</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;custom-full-calendar&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123;CustomFullCalendar&#125; from &apos;@&apos;</span><br><span class="line"> </span><br><span class="line">  export default &#123;</span><br><span class="line">methods: &#123;</span><br><span class="line">      nextDate() &#123;</span><br><span class="line">  console.log(&apos;다음 날짜 입니다&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/40957008/how-to-access-to-a-child-method-from-the-parent-in-vue-js/47565763#47565763" target="_blank" rel="noopener">https://stackoverflow.com/questions/40957008/how-to-access-to-a-child-method-from-the-parent-in-vue-js/47565763#47565763</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>텍스트 많을 경우 생략 기호</title>
      <link href="/2018/06/20/CSS/%ED%85%8D%EC%8A%A4%ED%8A%B8%20%EB%A7%8E%EC%9D%84%20%EA%B2%BD%EC%9A%B0%20%EA%B8%B0%ED%98%B8%20%EC%83%9D%EB%9E%B5/"/>
      <url>/2018/06/20/CSS/%ED%85%8D%EC%8A%A4%ED%8A%B8%20%EB%A7%8E%EC%9D%84%20%EA%B2%BD%EC%9A%B0%20%EA%B8%B0%ED%98%B8%20%EC%83%9D%EB%9E%B5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">height</span>: 48<span class="selector-tag">px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">-webkit-box</span>;</span><br><span class="line"><span class="selector-tag">-webkit-line-clamp</span>: 2;</span><br><span class="line"><span class="selector-tag">-webkit-box-orient</span><span class="selector-pseudo">:vertical</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">overflow</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br></pre></td></tr></table></figure><p>height 지정,  webkit 브라우저에서는 line-clamp를 사용하고, fallback시 text-overflow: eclipssis가 사용된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/6572330/is-it-possible-to-use-text-overflowellipsis-on-multiline-text" target="_blank" rel="noopener">https://stackoverflow.com/questions/6572330/is-it-possible-to-use-text-overflowellipsis-on-multiline-text</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01. 리액트 컴포넌트를 생성하는 4가지 방법</title>
      <link href="/2018/04/20/React/01-react-component%EC%83%9D%EC%84%B1/"/>
      <url>/2018/04/20/React/01-react-component%EC%83%9D%EC%84%B1/</url>
      
        <content type="html"><![CDATA[<p>리액트에서 컴포넌트를 구성하는 방법에는 다양한 방법이 있다! 한번 정리해볼까?</p><p>우선 기본 엘리먼트를 만드는 방법부터 알아보자.</p><h2 id="리액트-엘리먼트"><a href="#리액트-엘리먼트" class="headerlink" title="리액트 엘리먼트"></a>리액트 엘리먼트</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> items = [</span><br><span class="line">    <span class="string">"울랄라"</span>,</span><br><span class="line">    <span class="string">"후앙후앙"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">React.createElement(</span><br><span class="line"><span class="string">"ul"</span>,</span><br><span class="line">    &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"hihi"</span>, <span class="attr">className</span>: <span class="string">"hoho"</span>&#125;, <span class="comment">// 프로퍼티들이 객체로 들어감</span></span><br><span class="line">    items.map(<span class="function">(<span class="params">e, i</span>) =&gt;</span> </span><br><span class="line">    React.createElement(<span class="string">"li"</span>, &#123; <span class="attr">key</span>: i &#125;, e)</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>리액트는 <code>props.children</code> 을 사용해서 자식 엘리먼트를 렌더링한다. </p><ul><li>결과</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"1"</span> <span class="attr">name</span>=<span class="string">"hihi"</span> <span class="attr">class</span>=<span class="string">"hoho"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>울랄라<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>후앙후앙<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">"type": "ul",</span><br><span class="line">"props" : &#123;</span><br><span class="line">"id" : "1",</span><br><span class="line">"name" : "hihi",</span><br><span class="line">"className": "hoho",</span><br><span class="line">"children": [</span><br><span class="line">&#123;"type": "li", "props": &#123; "children": "울랄라"&#125;&#125;,</span><br><span class="line">&#123;"type": "li", "props": &#123; "children": "후앙후앙"&#125;&#125;,</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="리액트-컴포넌트"><a href="#리액트-컴포넌트" class="headerlink" title="리액트 컴포넌트"></a>리액트 컴포넌트</h3><h4 id="React-createClass"><a href="#React-createClass" class="headerlink" title="React.createClass"></a>React.createClass</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> items = [</span><br><span class="line">    <span class="string">"울랄라"</span>,</span><br><span class="line">    <span class="string">"후앙후앙"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LalaList = React.createClass(&#123;</span><br><span class="line">    displayName: <span class="string">"LalaList"</span>,</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> React.createElement(</span><br><span class="line">            <span class="string">"ul"</span>,</span><br><span class="line">            &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"hihi"</span>, <span class="attr">className</span>: <span class="string">"hoho"</span>&#125;, <span class="comment">// 프로퍼티들이 객체로 들어감</span></span><br><span class="line">            items.map(<span class="function">(<span class="params">e, i</span>) =&gt;</span> </span><br><span class="line">                React.createElement(<span class="string">"li"</span>, &#123; <span class="attr">key</span>: i &#125;, e)</span><br><span class="line">            )</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">React.createElement(LalaList, &#123;items&#125;, <span class="literal">null</span>),</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'react-container'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p> createClass는 사용하지 않는 추세라고 한다.</p></blockquote><blockquote><p>ReactDOM.render`는 현재 DOM을 그대로 두고 갱신이 필요한 DOM 엘리먼트만 변경한다.</p></blockquote><h4 id="React-Component"><a href="#React-Component" class="headerlink" title="React.Component"></a>React.Component</h4><p>React.Component를 상속받으면 더 간결하게 컴포넌트를 만들 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LalaList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    renderListItem(e, i) &#123;</span><br><span class="line">    <span class="keyword">return</span> React.createElement(<span class="string">"li"</span>, &#123;<span class="attr">key</span>: i&#125;, e)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> React.createElement(<span class="string">"ul"</span>, &#123;<span class="attr">className</span>: <span class="string">"ingredients"</span>&#125;,</span><br><span class="line">            <span class="keyword">this</span>.props.items.map(<span class="keyword">this</span>.renderListItem);                           </span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="함수형-컴포넌트"><a href="#함수형-컴포넌트" class="headerlink" title="함수형 컴포넌트"></a>함수형 컴포넌트</h4><p>함수라서, this가 없다. 상태에 영향을 받지 않으므로 함수형 컴포넌트를 많이 활용할 수록 버그가 없는 코드를 작성할 수 있다! </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> items = [</span><br><span class="line">    <span class="string">"울랄라"</span>,</span><br><span class="line">    <span class="string">"후앙후앙"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LalaList = <span class="function"><span class="params">props</span> =&gt;</span>  <span class="comment">// const LalaList = (&#123;items&#125;) DOM의 엘리먼트들을 구조분해 가능!</span></span><br><span class="line">React.createElement(</span><br><span class="line">        <span class="string">"ul"</span>,</span><br><span class="line">        &#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">"hihi"</span>, <span class="attr">className</span>: <span class="string">"hoho"</span>&#125;, <span class="comment">// 프로퍼티들이 객체로 들어감</span></span><br><span class="line">        props.items.map(<span class="function">(<span class="params">e, i</span>) =&gt;</span> </span><br><span class="line">            React.createElement(<span class="string">"li"</span>, &#123; <span class="attr">key</span>: i &#125;, e)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">LalaList(&#123;items&#125;), <span class="comment">// props 값은 객체이므로 객체로 감싸 넘겨준다.</span></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'react-container'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="JSX를-사용한-컴포넌트"><a href="#JSX를-사용한-컴포넌트" class="headerlink" title="JSX를 사용한 컴포넌트"></a>JSX를 사용한 컴포넌트</h3><p>JSX를 사용하면, createElement 사용없이, 일반적으로 html을 작성하는 방식으로 코드를 작성할 수 있다. 하지만 브라우저는 jsx를 읽을 수 없으므로 babel을 사용해서, jsx문법들을 js처럼 바꿔서 사용한다. <strong>굳이 확장자에 jsx를 안써도 괜찮다.</strong> js 파일에 jsx를 작성하고 babel 설정에서 js도 읽어 들여 변환하면 된다.</p><blockquote><p>바벨 프리셋은 babel-preset-react를 사용 : JSX를 React.createElement 호출로 변경해준다.</p></blockquote><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSX를 사용하지 않을 경우 </span></span><br><span class="line">React.createElement(<span class="string">'div'</span>, &#123;<span class="attr">className</span>:”testDivider<span class="string">"&#125;, “test text"</span>, React.createElement(<span class="string">'hr'</span>) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// JSX를 사용할 경우</span></span><br><span class="line">&lt;div className=“testDivider”&gt;test text&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'junho'</span>,</span><br><span class="line">        items: [</span><br><span class="line">            &#123; <span class="attr">bag</span>: <span class="string">'diamond'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">bag</span>: <span class="string">'people'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'sangja'</span>,</span><br><span class="line">        items: [</span><br><span class="line">            &#123; <span class="attr">bag</span>: <span class="string">'niche'</span> &#125;,</span><br><span class="line">            &#123; <span class="attr">bag</span>: <span class="string">'clever'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Item = <span class="function">(<span class="params">&#123; name, items &#125;</span>) =&gt;</span> </span><br><span class="line">&lt;section id=&#123;name.toLowerCase().replace(<span class="regexp">/ /g</span>, <span class="string">"-"</span>)&#125;&gt;</span><br><span class="line">        &lt;ul className=<span class="string">"instructions"</span>&gt;</span><br><span class="line">    &#123;items.map(<span class="function">(<span class="params">e, i</span>) =&gt;</span></span><br><span class="line">            &lt;li key=&#123;i&#125;&gt;&#123;e.bag&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            )&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line">    &lt;<span class="regexp">/section&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Inventory = (&#123; title, invens &#125;) =&gt; </span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;span&gt;&#123;title&#125;&lt;/</span>span&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &#123;invens.map(<span class="function">(<span class="params">inven, i</span>) =&gt;</span> </span><br><span class="line">                &lt;Item key=&#123;i&#125; &#123;...inven&#125; /&gt;           </span><br><span class="line">            )&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Inventory title=<span class="string">"멍청"</span> invens=&#123;data&#125; /&gt;,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"react-container"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>루트가 되는(Inventory) 컴포넌트만 <code>ReactDOM.render</code> 해주면 나머지 컴포넌트도 함께 렌더된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>러닝 리액트 - 알렉스 뱅크스, 이브포셀 지음 오현석 옮김</p><p><a href="http://inforwithme.tistory.com/entry/ReactJsJSX란" target="_blank" rel="noopener">http://inforwithme.tistory.com/entry/ReactJsJSX란</a></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02. React 프로퍼티와 상태</title>
      <link href="/2018/04/20/React/02-react-property%EC%99%80-status/"/>
      <url>/2018/04/20/React/02-react-property%EC%99%80-status/</url>
      
        <content type="html"><![CDATA[<p>앞서 컴포넌트를 만드는 방법으로</p><ul><li>createClass</li><li>React Component Class</li><li>함수형 컴포넌트</li></ul><p>세가지 유형의 컴포넌트에 대해서 알아봤다. 이번에도 세가지 유형의 프로퍼티와 상태를 어떻게 관리하는지 알아보자</p><h2 id="프로퍼티-검증"><a href="#프로퍼티-검증" class="headerlink" title="프로퍼티 검증"></a>프로퍼티 검증</h2><ul><li>createClass</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createClass &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Inventory = createClass(&#123;</span><br><span class="line">    displayName : <span class="string">"Summary"</span>,</span><br><span class="line">    <span class="comment">// 타입 검증</span></span><br><span class="line">    propTypes: &#123;</span><br><span class="line">        id: PropTypes.number,</span><br><span class="line">        name: PropTypes.string,</span><br><span class="line">       items: <span class="comment">// 아래에서 다루겠다.</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 디폴트값</span></span><br><span class="line">    getDefaultProps() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">id: <span class="number">0</span>,</span><br><span class="line">    name: <span class="string">''</span>,</span><br><span class="line">    items : []</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>ES6 클래스</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inventory</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;id, name, items&#125; = <span class="keyword">this</span>.props <span class="comment">// 전개 연산자로 변수를 할당해줄 수 있다.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        id: PropTypes.number,</span><br><span class="line">        name: PropTypes.string,</span><br><span class="line">        items : <span class="function">(<span class="params">props, propName</span>) =&gt;</span></span><br><span class="line">            (<span class="keyword">typeof</span> props[propName] !== <span class="string">'string'</span>) ?</span><br><span class="line">                <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'문자열이어야 해용'</span>)</span><br><span class="line">                (props[propName].length &gt; <span class="number">20</span>) ?</span><br><span class="line">                    <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'20자 이내어야 함.'</span>) : <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">        id: <span class="number">0</span>,</span><br><span class="line">        name: <span class="string">''</span>,</span><br><span class="line">        items: []  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;items.map(<span class="function">(<span class="params">item, i</span>) =&gt;</span> </span><br><span class="line">                    &lt;span key=&#123;i&#125;&gt;&#123;item&#125;&lt;<span class="regexp">/span&gt;        </span></span><br><span class="line"><span class="regexp">                )&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// static 변수를 사용하지 않는다면</span></span><br><span class="line">Inventory.propTypes = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line">Inventory.defaultProps = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Inventory;</span><br></pre></td></tr></table></figure><ul><li>함수형 컴포넌트</li></ul><p>프로퍼티 검증 및 기본값 셋팅 방법은 클래스와 동일하게 처리해도 되고, 디폴트 인자를 지정해도 된다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Inventory = <span class="function">(<span class="params">&#123;id = <span class="number">0</span>, name = <span class="string">''</span>, items = []&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    ...</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Inventory.propTypes = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Inventory;</span><br></pre></td></tr></table></figure><h2 id="참조-ref"><a href="#참조-ref" class="headerlink" title="참조(ref)"></a>참조(ref)</h2><p>엘리먼트와 함수와 상호작용을 해야할 경우 사용된다 </p><ul><li>ES6 클래스</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inventory</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line"><span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.submit = <span class="keyword">this</span>.submit.bind(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    submit(e) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; _title &#125; = <span class="keyword">this</span>.refs; <span class="comment">// 이렇게 받아올 수 있다.</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">        _title = <span class="string">''</span>;</span><br><span class="line">        _title.focus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;form onSubmit=&#123;<span class="keyword">this</span>.submit&#125;&gt;</span><br><span class="line">            &lt;input ref=<span class="string">"_title"</span> /&gt; &#123;<span class="comment">/* 이렇게 정의해준다! */</span>&#125;</span><br><span class="line">                &lt;button&gt;추가&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>form&gt;&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>constructor가 추가됐다. 함수에서 this를 사용하려면 constructor를 재정의해서 <code>메서드에 this를 바인딩</code>해줘야 한다.  constructor를 재정의 해줬으므로 props 역시 Component의 생성자(super)를 통해서 다시 셋팅해주자.</p><blockquote><p>createClass를 이용하면 this영역을 자동으로 바인딩 해준다.</p></blockquote><p>그리고 <code>this.refs</code>를 사용해서  정의한 ref값을 받아온다.</p><h3 id="부모-컴포넌트로-데이터-전달"><a href="#부모-컴포넌트로-데이터-전달" class="headerlink" title="부모 컴포넌트로 데이터 전달"></a>부모 컴포넌트로 데이터 전달</h3><p>콜백을 이용하여, 부모에게 데이터를 전달해보자!</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> logInven = <span class="function">(<span class="params">title</span>) =&gt;</span> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`아이디와 이름 : <span class="subst">$&#123;id&#125;</span> <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&lt;Inventory onNewUser=&#123;logInven&#125; /&gt;</span><br><span class="line"></span><br><span class="line">...    </span><br><span class="line">    submit(e) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; _title &#125; = <span class="keyword">this</span>.refs; <span class="comment">// 이렇게 받아올 수 있다.</span></span><br><span class="line">        <span class="keyword">this</span>.props.onNewUser(_title.value) <span class="comment">// 이렇게 콜백 호출!</span></span><br><span class="line">        _title = <span class="string">''</span>;</span><br><span class="line">        _title.focus();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콜백 함수의 디폴트값 지정해서 안정성 높이기</span></span><br><span class="line">    <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">onNewUser : <span class="function"><span class="params">f</span>=&gt;</span>f <span class="comment">// 기본 더미 함수</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>함수형 컴포넌트</li></ul><p>함수형 컴포넌트 안에서는 this가 없으므로 this.refs를 사용할 수 없다. 대신 함수를 사용한다. 이 함수는 input 엘리먼트 인스턴스를 인자로 받는다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Inventory = <span class="function">(<span class="params">&#123;onNewUser = f=&gt;f&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> _title</span><br><span class="line">    <span class="keyword">const</span> submit = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        onNewColor(_title.value)</span><br><span class="line">        _title = <span class="string">''</span>;</span><br><span class="line">        _title.focus();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    render (</span><br><span class="line">    &lt;form onSubmit=&#123;submit&#125;&gt;</span><br><span class="line">            &lt;input ref=&#123;input =&gt; _title = input&#125; /&gt; &#123;<span class="comment">/* Input 엘리먼트를 받음 */</span>&#125;</span><br><span class="line">            &lt;button&gt;추가&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>form&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="상태-status"><a href="#상태-status" class="headerlink" title="상태(status)"></a>상태(status)</h2><p>프로퍼티(property)는 렌더링하고 나면 바뀌지 않는다! 바뀌는 데이터를 관리하기 위해서는 <code>status</code>를 사용해야한다.</p><ul><li>createClass</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Dog = <span class="function">(<span class="params">&#123;selected = <span class="literal">true</span>, onClick=f=&gt;f&#125;</span>) =&gt;</span></span><br><span class="line">&lt;div className=&#123;(selected)? <span class="string">"dog selected"</span> : <span class="string">"dog"</span>&#125;</span><br><span class="line">        onClick=&#123;onClick&#125;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">Dog.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">selected: PropTypes.bool,</span></span><br><span class="line"><span class="regexp">    onClick: PropTypes.func</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">   </span></span><br><span class="line"><span class="regexp">const DogHouse = createClass(&#123;</span></span><br><span class="line"><span class="regexp">displayName: 'DugHouse',</span></span><br><span class="line"><span class="regexp">  getDefaultProps() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      totalDogs: 1</span></span><br><span class="line"><span class="regexp">    &#125;  </span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 이렇게 초기화 한다.</span></span><br><span class="line"><span class="regexp">  getInitialState() &#123; </span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      dogsSelected: 1</span></span><br><span class="line"><span class="regexp">    &#125;  </span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  change(dogsSelected) &#123;</span></span><br><span class="line"><span class="regexp">    this.setState(&#123;dogsSelected&#125;)</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">        </span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    const &#123;totalDogs&#125; = this.props</span></span><br><span class="line"><span class="regexp">    const &#123;dogsSelected&#125; = this.state /</span><span class="regexp">/ props와 똑같은 방식으로 받는다.</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div className="dog-house"&gt;</span></span><br><span class="line"><span class="regexp">        &#123;[...Array(totalDogs)].map((n, i) =&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Dog key=&#123;i&#125;</span></span><br><span class="line"><span class="regexp">                  selected=&#123;i&lt;dogsSelected&#125;</span></span><br><span class="line"><span class="regexp">                  onClick=&#123;() =&gt; this.change(i+1)&#125;</span></span><br><span class="line"><span class="regexp">            /</span>&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">        &lt;p&gt;&#123;dogsSelected&#125; / &#123;totalDogs&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>콜백함수를 이용하여 자식에게 change함수의 결과를 돌려받아 state값을 받는다.</p><ul><li>ES6 클래스</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Dog 컴포넌트 생략</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogHouse</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">    totalStars: PropTypes.number</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    totalStars: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="comment">// super를 호출하면 상태를 관리해주는 기능으로 인스턴스를 꾸며준다!</span></span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="comment">// constructor에서 초기화 해준다!</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      starsSelected: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 바인딩 필요</span></span><br><span class="line">    <span class="keyword">this</span>.change = <span class="keyword">this</span>.change.bind(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  change(dogsSelected) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;dogsSelected&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;totalDogs&#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">const</span> &#123;dogsSelected&#125; = <span class="keyword">this</span>.state</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"dog"</span>&gt;</span><br><span class="line">        &#123;[...Array(totalDogs)].map(<span class="function">(<span class="params">n, i</span>) =&gt;</span></span><br><span class="line">                                    &lt;Dog key=&#123;i&#125;</span><br><span class="line">                                      selected=&#123;i&lt;dogsSelected&#125;</span><br><span class="line">                                      onClick=&#123;() =&gt; <span class="keyword">this</span>.change(i+<span class="number">1</span>)&#125;</span><br><span class="line">                                      /&gt;</span><br><span class="line">                                   )&#125;</span><br><span class="line">        &lt;p&gt;&#123;dogsSelected&#125; / &#123;totalDogs&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 클래스에서는 <strong>constructor 내부에서 state값을 초기화</strong>해준다</p><h3 id="프로퍼티로-상태-초기화-하기"><a href="#프로퍼티로-상태-초기화-하기" class="headerlink" title="프로퍼티로 상태 초기화 하기"></a>프로퍼티로 상태 초기화 하기</h3><p>입력 프로퍼티로 상태 변수를 초기화할 수 있는데, 다른 컴포넌트에서 재사용 가능한 컴포넌트를 만드는 경우이다.</p><ul><li>createClass</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DogHouse = createClase(&#123;</span><br><span class="line">...</span><br><span class="line">  componentWillMount() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; dogsSelected &#125; = <span class="keyword">this</span>.props</span><br><span class="line">    <span class="keyword">if</span>(dogSelected) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;dogSelected&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>componentWillMount</code> 라는 메서드를 통해 가능하다. 컴포넌트가 마운트될때 단 한번 호출된다.</p><ul><li>ES6 클래스</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props)</span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    dogsSelected: props.dogsSelected || <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.change = <span class="keyword">this</span>.change.bind(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>명료하다!</p><p>그런데, 상태가 있는 컴포넌트의 수를 최소화하는 것이 유지보수 측면에서 좋기 때문에 이런 패턴은 최소화 하는 것이 좋다고 한다.</p><blockquote><p>프로퍼티를 통해 상태를 초기화하기 때문에, componentWillRecevieProps 생애주기를 이용해서, 프로퍼티가 바뀔때 함께 자식 컴포넌트의 값이 바뀌도록 설정할 수 있다.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>에러 핸들링</title>
      <link href="/2018/04/18/Node.js/%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81/"/>
      <url>/2018/04/18/Node.js/%EC%97%90%EB%9F%AC-%ED%95%B8%EB%93%A4%EB%A7%81/</url>
      
        <content type="html"><![CDATA[<h1 id="에러-핸들링"><a href="#에러-핸들링" class="headerlink" title="에러 핸들링"></a>에러 핸들링</h1><p><a href="http://blog.jeonghwan.net/node/2017/08/17/express-error-handling.html" target="_blank" rel="noopener">http://blog.jeonghwan.net/node/2017/08/17/express-error-handling.html</a></p><p><a href="https://github.com/FEDevelopers/tech.description/wiki/%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9D%B5%EC%8A%A4%ED%94%84%EB%A0%88%EC%8A%A4-%EA%B0%80%EC%9D%B4%EB%93%9C" target="_blank" rel="noopener">https://github.com/FEDevelopers/tech.description/wiki/%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%9D%B5%EC%8A%A4%ED%94%84%EB%A0%88%EC%8A%A4-%EA%B0%80%EC%9D%B4%EB%93%9C</a></p><ul><li>에러 래퍼 패턴</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">wrapAsync</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 모든 오류를 .catch() 처리하고 체인의 next() 미들웨어에 전달하세요 </span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// (이 경우에는 오류 처리기)</span></span><br><span class="line"></span><br><span class="line">    fn(req, res, next).catch(next);</span><br><span class="line"></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>에러 정의 및 핸들러<ul><li><a href="https://github.com/hapijs/boom" target="_blank" rel="noopener">https://github.com/hapijs/boom</a></li><li>400<ul><li>400 : 파라미터 불충분 : badRequest</li><li>401 : 로그인 필요 : unauthorized</li><li>404 : 페이지 없음</li></ul></li><li>500<ul><li>500 : 서버 에러 </li><li>504 : gatewayTimeout : 서버 시간 초과</li></ul></li></ul></li><li>에러 핸들러</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// inheritance</span></span><br><span class="line">errors.create(&#123;</span><br><span class="line">    name: <span class="string">'FatalError'</span>,</span><br><span class="line">    defaultMessage: <span class="string">'A fatal error occurred'</span>,</span><br><span class="line">&#125;);</span><br><span class="line">errors.create(&#123;</span><br><span class="line">    name: <span class="string">'FatalSecurityError'</span>,</span><br><span class="line">    defaultMessage: <span class="string">'A security error occurred, the app must exit'</span>,</span><br><span class="line">    parent: errors.FatalError</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> errors.FatalSecurityError();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (e <span class="keyword">instanceof</span> errors.FatalError) &#123;</span><br><span class="line">        <span class="comment">// exit</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Application is shutting down..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> <span class="title">handleAssertionError</span>(<span class="params">error, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> AssertionError) &#123;</span><br><span class="line">    res.status(<span class="number">400</span>).json(&#123;</span><br><span class="line">      type: <span class="string">'AssertionError'</span>,</span><br><span class="line">      message: error.message</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  next(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> <span class="title">handleDatabaseError</span>(<span class="params">error, req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error <span class="keyword">instanceof</span> MongoError) &#123;</span><br><span class="line">    res.status(<span class="number">503</span>).json(&#123;</span><br><span class="line">      type: <span class="string">'MongoError'</span>,</span><br><span class="line">      message: error.message</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  next(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="남은-해결-과제"><a href="#남은-해결-과제" class="headerlink" title="남은 해결 과제"></a>남은 해결 과제</h3><p>bookshelf 에러 핸들링</p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06. 웹팩(Webpack) Typescript 연동</title>
      <link href="/2018/03/25/Frontend/6.%EC%9B%B9%ED%8C%A9-Typescript%EC%97%B0%EB%8F%99/"/>
      <url>/2018/03/25/Frontend/6.%EC%9B%B9%ED%8C%A9-Typescript%EC%97%B0%EB%8F%99/</url>
      
        <content type="html"><![CDATA[<p>웹팩과 타입스크립트를 연동한다. 웹팩 3번 포스팅에 이어서 작성</p><blockquote><p>npm i typescript awesome-typescript-loader</p></blockquote><ul><li>webpack.dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      main: [<span class="string">"./src/main.js"</span>],</span><br><span class="line">      ts: [<span class="string">"./src/index.ts"</span>]  <span class="comment">// ts파일을 추가하자!</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"awesome-typescript-loader"</span> <span class="comment">// loader를 추가</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      ...</span><br></pre></td></tr></table></figure><ul><li>tsconfig.js</li></ul><p>타입스크립트 컴파일 설정 파일이다!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"module"</span>: <span class="string">"commonjs"</span>, <span class="comment">// commonjs 모듈 방식 사용</span></span><br><span class="line">        <span class="string">"moduleResolution"</span>: <span class="string">"node"</span>, <span class="comment">// node_modules폴더에서 모듈 검색</span></span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"es5"</span>, <span class="comment">// es5 코드로 컴파일</span></span><br><span class="line">        <span class="string">"allowJS"</span> : <span class="literal">true</span>, <span class="comment">// JS파일 포함 허용</span></span><br><span class="line">        <span class="string">"lib"</span>: [<span class="string">"es5"</span>, <span class="string">"es6"</span>, <span class="string">"dom"</span>], <span class="comment">// 컴파일을 위한 라이브러리</span></span><br><span class="line">        <span class="string">"sourceMap"</span> : <span class="literal">true</span>, </span><br><span class="line">        <span class="string">"experimentalDecorators"</span>: <span class="literal">true</span>, <span class="comment">// 데코레이터 허용</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Greeting</span>(<span class="params">greeting: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(greeting)</span><br><span class="line">&#125;</span><br><span class="line">Greeting(<span class="string">'lala'</span>)</span><br></pre></td></tr></table></figure><p>타입스크립트 연동 완료.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.udemy.com/webpack-beyond-the-basics/" target="_blank" rel="noopener">https://www.udemy.com/webpack-beyond-the-basics/</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05. 웹팩(Webpack) SCSS, POSTCSS 연동</title>
      <link href="/2018/03/25/Frontend/5.%EC%9B%B9%ED%8C%A9-SCSS-POSTCSS%EC%97%B0%EB%8F%99.md/"/>
      <url>/2018/03/25/Frontend/5.%EC%9B%B9%ED%8C%A9-SCSS-POSTCSS%EC%97%B0%EB%8F%99.md/</url>
      
        <content type="html"><![CDATA[<p>scss파일도 sass-loader를 사용하더라.</p><p>node-sass : scss 파일에 변화가 있을 떄 마다 자동으로 리컴파일</p><blockquote><p>npm i sass-loader node-sass</p></blockquote><ul><li>webpack-dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"sass-loader"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">     ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>src/main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-runtime/regenerator"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"react-hot-loader/patch"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"babel-register"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"webpack-hot-middleware/client?reload=true"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./main.scss"</span>);  <span class="comment">// scss파일을 추가</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.html"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./app.js"</span>)</span><br></pre></td></tr></table></figure><ul><li>main.scss</li></ul><p>SCSS 문법 작성</p><p>끝.</p><h2 id="POSTCSS"><a href="#POSTCSS" class="headerlink" title="POSTCSS"></a>POSTCSS</h2><p>여기에 원하는 CSS  코딩 방법을 골라 사용하는 POSTCSS도 연동할 수 있다.</p><blockquote><p>npm i postcss-loader</p></blockquote><ul><li>webpack.dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      ...</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"postcss-loader"</span>&#125;, <span class="comment">// 추가</span></span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"sass-loader"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// scss 없이 postcss 개별 연동도 가능!</span></span><br><span class="line">      <span class="comment">//&#123;</span></span><br><span class="line">        <span class="comment">//test: /\.css$/,</span></span><br><span class="line">        <span class="comment">//exclude: /node_modules/,</span></span><br><span class="line">        <span class="comment">//use: [</span></span><br><span class="line">          <span class="comment">//&#123; loader: "style-loader" &#125;,</span></span><br><span class="line">          <span class="comment">//&#123; loader: "css-loader" &#125;,</span></span><br><span class="line">          <span class="comment">//&#123; loader: "postcss-loader" &#125;</span></span><br><span class="line">        <span class="comment">//]</span></span><br><span class="line">      <span class="comment">//&#125;,</span></span><br><span class="line">     ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>postcss.config.js</li></ul><p>원하는 CSS 모듈을 추가해준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>) <span class="comment">// 자동으로 브라우저에 맞는 Css 프리픽스를 추가해준다.</span></span><br><span class="line">        <span class="comment">// require('postcss-nested') scss 방식의 nested css 지원</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>postcss만 사용할 경우는 파일 확장자도 css로 쓰면 된다.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.udemy.com/webpack-beyond-the-basics" target="_blank" rel="noopener">https://www.udemy.com/webpack-beyond-the-basics</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04. 웹팩(webpack) React 연동</title>
      <link href="/2018/03/25/Frontend/4.%EC%9B%B9%ED%8C%A9-React%EC%97%B0%EB%8F%99/"/>
      <url>/2018/03/25/Frontend/4.%EC%9B%B9%ED%8C%A9-React%EC%97%B0%EB%8F%99/</url>
      
        <content type="html"><![CDATA[<p>react를 연동해보자, 이전 포스팅과 연결된다.</p><blockquote><p>npm i react react-dom babel-preset-react</p></blockquote><ul><li>src/main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-runtime/regenerator"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"babel-register"</span>); <span class="comment">// 추가</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"webpack-hot-middleware/client?reload=true"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./main.css"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.html"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./app.js"</span>); <span class="comment">// 추가</span></span><br></pre></td></tr></table></figure><ul><li>src/index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/bglam.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Sunwoo!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"react-root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main-bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>src/app.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">"react-dom"</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1&gt;Hello, <span class="keyword">from</span> React!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"react-root"</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>.babelrc</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"targets"</span>: &#123;</span><br><span class="line">                    <span class="string">"browsers"</span>: [<span class="string">"last 2 versions"</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            </span><br><span class="line">                <span class="string">"debug"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"babel-preset-react"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 리액트 바벨 프리셋을 추가해주자!</p><blockquote><p>소스변경시에도 리액트의 state 값을 유지시켜주는 핫모듈도 있지만, 왜 때문인지 연동이 안되서 일단 보류 한다.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.udemy.com/webpack-beyond-the-basics" target="_blank" rel="noopener">https://www.udemy.com/webpack-beyond-the-basics</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20. 웹팩(Webpack) 디버깅</title>
      <link href="/2018/03/18/Frontend/20.%EC%9B%B9%ED%8C%A9-%EB%94%94%EB%B2%84%EA%B9%85/"/>
      <url>/2018/03/18/Frontend/20.%EC%9B%B9%ED%8C%A9-%EB%94%94%EB%B2%84%EA%B9%85/</url>
      
        <content type="html"><![CDATA[<p>디버깅도 편하게 할 수 있다. 서버/클라이언트 코드 모두.</p><ul><li>config/webpack.dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  contentBase: <span class="string">"dist"</span>,</span><br><span class="line">  overlay: <span class="literal">true</span>,</span><br><span class="line">  stats: &#123;</span><br><span class="line">    colors: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  hot: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 해당줄을 추가: 웹팩 번들링된 코드가 아니라</span></span><br><span class="line"><span class="comment">// 본래 JS 코드로 볼 수 있게 해준다.</span></span><br><span class="line">devtool: <span class="string">"source-map"</span>,</span><br></pre></td></tr></table></figure><ol><li>원하는 라인에 <code>debugger</code>를 입력한다.</li><li>브라우저에서 크롬 개발자 도구를 킨다.</li><li>서버 코드는 개발자 도구 Element 탭 옆에 초록색 nodejs 버튼을 클릭해서 확인가능</li><li>클라이언트 코드는 기존 개발자 도구 창에서 확인 가능하다!</li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.udemy.com/webpack-beyond-the-basics" target="_blank" rel="noopener">https://www.udemy.com/webpack-beyond-the-basics</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03. 웹팩(webpack) express 연동, 핫리로딩</title>
      <link href="/2018/03/18/Frontend/3.%EC%9B%B9%ED%8C%A9-%ED%95%AB%EB%A6%AC%EB%A1%9C%EB%94%A9/"/>
      <url>/2018/03/18/Frontend/3.%EC%9B%B9%ED%8C%A9-%ED%95%AB%EB%A6%AC%EB%A1%9C%EB%94%A9/</url>
      
        <content type="html"><![CDATA[<p>2번 바벨 포스팅에 이어서 웹팩을 셋팅해보자! 웹팩3(3.8.1) 환경에서 테스트하였다.</p><p>우선 node express에 웹팩을 붙여보자.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i express --save</span><br><span class="line">npm i babel-register --save-dev</span><br><span class="line">mkdir src/server</span><br><span class="line">touch src/server/main.js src/server/express.js</span><br></pre></td></tr></table></figure><ul><li>src/server/main.js </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-register"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./express"</span>)</span><br></pre></td></tr></table></figure><p>babel-register를 선언해주면, 다른 require 에서도 babel을 적용시킬 수 있다.  <code>require(&#39;./express&#39;)</code> 안에서 ES6 문법인 import를 사용할 것이다. nodejs는 해당 문법을 디폴트로 제공해주지 않는데, <code>babel-register</code>를 통해 require를 사용하는 모듈들 안에도 최신 JS 문법을 사용할 수 있게 해준다!</p><ul><li>src/server/express.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">"express"</span> <span class="comment">// import 사용이 가능하다!</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"path"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = express()</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack의 output 장소인 dist를 express static으로 등록한다.</span></span><br><span class="line"><span class="keyword">const</span> staticMiddleWare = express.static(<span class="string">"dist"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack 설정</span></span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">"../../config/webpack.dev.js"</span>)</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 웹팩을 미들웨어로 등록해서 사용하기 위한 모듈</span></span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-dev-middleware"</span>)(</span><br><span class="line">    compiler,</span><br><span class="line">    config.devServer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 웹팩미들웨어가 static 미들웨어 이전에 위치!</span></span><br><span class="line">server.use(webpackDevMiddleware);</span><br><span class="line">server.use(staticMiddleWare);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Server is Listening"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>자 그럼 <code>node src/server/main.js</code> 를 실행해서 express 서버를 구동시켜보자.</p><p><code>localhost:8080</code> 포트를 통해 dist 파일 내용들을 확인할 수 있다.</p><h2 id="핫-리로딩"><a href="#핫-리로딩" class="headerlink" title="핫 리로딩"></a>핫 리로딩</h2><p>매우 경이롭게 자동으로 파일들이 다시 리로드되는 셋팅이다.</p><ul><li>src/server/express.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express <span class="keyword">from</span> <span class="string">"express"</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">"path"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = express()</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> staticMiddleWare = express.static(<span class="string">"dist"</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">"../../config/webpack.dev.js"</span>)</span><br><span class="line"><span class="keyword">const</span> compiler = webpack(config);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> webpackDevMiddleware = <span class="built_in">require</span>(<span class="string">"webpack-dev-middleware"</span>)(</span><br><span class="line">    compiler,</span><br><span class="line">    config.devServer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 핫 로딩 미들웨어를 추가하자!</span></span><br><span class="line"><span class="keyword">const</span> webpackHotMiddleware = </span><br><span class="line">    <span class="built_in">require</span>(<span class="string">"webpack-hot-middleware"</span>)(compiler)</span><br><span class="line"></span><br><span class="line">server.use(webpackDevMiddleware);</span><br><span class="line"> <span class="comment">// 웹팩dev 미들웨어 다음, static 미들웨어 이전</span></span><br><span class="line">server.use(webpackHotMiddleware);</span><br><span class="line">server.use(staticMiddleWare);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8080</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Server is Listening"</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>config/webpack.dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>)</span><br><span class="line"><span class="comment">// HTML 핫 리로딩을 위해 필요한 플러그인</span></span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      main: [<span class="string">"./src/main.js"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name]-bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"dist"</span>,</span><br><span class="line">    overlay: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 웹팩의 상태값에 색상을 부여한다.</span></span><br><span class="line">    stats: &#123;</span><br><span class="line">      colors: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// hot 프로퍼티를 true로 설정!</span></span><br><span class="line">    hot: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"babel-loader"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"style-loader"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"css-loader"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 원래 extract-loader와 file-loader가 있었다.</span></span><br><span class="line">          <span class="comment">// 그러나 html을 핫리로딩 시키기 위해서는 위 로더 대신 HTML 웹팩 플러그인을 사용한다!</span></span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"html-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              attrs: [<span class="string">"img:src"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"file-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">"images/[name].[ext]"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// Hot 모듈과 HTML웹팩 플러그인을 추가한다.</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">"./src/index.html"</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>/main.js : 클라이언트 main.js 파일에 핫 리로드 되는 결과를 전달받을 수 있게한다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-runtime/regenerator"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"webpack-hot-middleware/client?reload=true"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./main.css"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.html"</span>);</span><br></pre></td></tr></table></figure><ul><li>config/webpack.dev.js와 server 파일들 자동 리로딩</li></ul><p>서버측 파일 및 config파일은 위 셋팅으로 자동으로 리로딩 되지 않는다. 서버측 파일을 리로딩 시키기 위해서는 nodemon을 활용한다.</p><blockquote><p>npm i -g nodemon</p><p>nodemon –watch config –watch src/server src/server/main</p></blockquote><p>서버와, 프론트 코드 모두가 새로고침 없이 리로딩 되는것을 확인할 수 있다!!</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.udemy.com/webpack-beyond-the-basics" target="_blank" rel="noopener">https://www.udemy.com/webpack-beyond-the-basics</a></p><p>nodejs의 import 지원 : <a href="https://stackoverflow.com/questions/39436322/node-js-syntaxerror-unexpected-token-import" target="_blank" rel="noopener">https://stackoverflow.com/questions/39436322/node-js-syntaxerror-unexpected-token-import</a></p><p>babel-register : <a href="https://jaeyeophan.github.io/2017/05/16/Everything-about-babel/" target="_blank" rel="noopener">https://jaeyeophan.github.io/2017/05/16/Everything-about-babel/</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>20. 웹팩(Webpack) 플러그인</title>
      <link href="/2018/03/13/Frontend/20.%EC%9B%B9%ED%8C%A9-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8/"/>
      <url>/2018/03/13/Frontend/20.%EC%9B%B9%ED%8C%A9-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="NamedModulesPlugin"><a href="#NamedModulesPlugin" class="headerlink" title="NamedModulesPlugin"></a>NamedModulesPlugin</h2><p>번들링된 웹팩 파일 로그에, 상세 경로를 알려준다</p><p>사용전</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[14] (webpack)-hot-middleware/client-overlay.js 2.21 kB &#123;0&#125; [built]</span><br><span class="line">[19] (webpack)-hot-middleware/process-update.js 4.33 kB &#123;0&#125; [built]</span><br><span class="line">[20] ./src/main.css 1.07 kB &#123;0&#125; [built]</span><br><span class="line">[22] ./node_modules/style-loader/lib/addStyles.js 9.92 kB &#123;0&#125; [built]</span><br><span class="line">[24] ./src/index.html 269 bytes &#123;0&#125; [built]</span><br><span class="line">[25] ./src/images/bglam.png 62 bytes &#123;0&#125; [built]</span><br></pre></td></tr></table></figure><p>사용후</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[./node_modules/webpack-hot-middleware/client-overlay.js] (webpack)-hot-middleware/client-overlay.js 2.21 kB &#123;0&#125; [built]</span><br><span class="line">[./node_modules/webpack-hot-middleware/client.js?reload=true] (webpack)-hot-middleware/client.js?reload=true 7.35 kB &#123;0&#125; [built]</span><br><span class="line">[./node_modules/webpack-hot-middleware/process-update.js] (webpack)-hot-middleware/process-update.js 4.33 kB &#123;0&#125; [built]</span><br><span class="line">[./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 517 bytes &#123;0&#125; [built]</span><br><span class="line">[./src/images/bglam.png] ./src/images/bglam.png 62 bytes &#123;0&#125; [built]</span><br><span class="line">   [0] multi ./src/main.js 28 bytes &#123;0&#125; [built]</span><br><span class="line">[./src/index.html] ./src/index.html 269 bytes &#123;0&#125; [built]</span><br><span class="line">[./src/main.css] ./src/main.css 1.07 kB &#123;0&#125; [built]</span><br></pre></td></tr></table></figure><h4 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h4><ul><li>웹팩설정파일 - webpack.dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">new</span> webpack.NamedModulesPlugin(),</span><br><span class="line">  ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01. 웹팩3(Webpack3) 환경셋팅</title>
      <link href="/2018/03/03/Frontend/1.%EC%9B%B9%ED%8C%A9%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"/>
      <url>/2018/03/03/Frontend/1.%EC%9B%B9%ED%8C%A9%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>번들러의 종결자 웹팩을 셋팅해보자!</p><p>여러 파일을 하나로 합쳐서, request를 최소화 시켜주고,</p><p>소스 파일의 변경 watch</p><p>babel, lint 와 같은 여러 플러그인과의 통합도 도와준다!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpack-practice</span><br><span class="line">cd webpack-practice</span><br><span class="line">mkdir config dist src</span><br><span class="line">npm init -y</span><br><span class="line">npm i -g webpack@^3.8.1</span><br></pre></td></tr></table></figure><ul><li>src/main.js</li></ul><p>웹팩을 적용할 main.js를 생성하자.</p><ul><li>config 폴더에 webpack.dev.js를 생성</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      main: [<span class="string">"./src/main.js"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name]-bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>webpack –config=config/webpack.dev.js</p></blockquote><p>그럼 dist에 main-bundle.js가 생성된다.</p><ul><li>dist/index.html</li></ul><p>해당 번들 js를 실행하는 html을 생성해준다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main-bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="hot-reload-적용"><a href="#hot-reload-적용" class="headerlink" title="hot reload 적용"></a>hot reload 적용</h2><p>webpack-dev-server를 깔아서 리로딩을 적용시켜보자</p><p><code>npm i -g webpack-dev-server@^2.7.1</code></p><ul><li>webpack.dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      main: [<span class="string">"./src/main.js"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name]-bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./dist"</span>,</span><br><span class="line">    overlay: <span class="literal">true</span> <span class="comment">// 오류내용을 화면에 보여주게 함.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>webpack –config=config/webpack.dev.js</p></blockquote><ul><li>main.js</li></ul><h2 id="CSS와-HTML-번들링"><a href="#CSS와-HTML-번들링" class="headerlink" title="CSS와 HTML 번들링"></a>CSS와 HTML 번들링</h2><ul><li>src/main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./main.css"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.html"</span>)</span><br></pre></td></tr></table></figure><ul><li>src/main.css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#444</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src/index.html</li></ul><p>dist에 있던 html 도 src로 이동시킨다.</p><ul><li>webpack-dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">      main: [<span class="string">"./src/main.js"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">"[name]-bundle.js"</span>,</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"../dist"</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">"./dist"</span>,</span><br><span class="line">    overlay: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"style-loader"</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"css-loader"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123; </span><br><span class="line">            loader: <span class="string">"file-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">"[name].html"</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"extract-loader"</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">loader</span>: <span class="string">"html-loader"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif)$/</span>, <span class="comment">// 내친김에 이미지 까지 불러오자</span></span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"file-loader"</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              name: <span class="string">"images/[name].[ext]"</span></span><br><span class="line">                <span class="comment">// "images/[name]-[hash:8].[ext] 를 하면 이미지 이름에 해쉬를 적용할 수 있음!</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src/images/이미지 하나를 복사하자</li></ul><blockquote><p>wget <a href="https://skout90.github.io/assets/images/favicon.png">https://skout90.github.io/assets/images/favicon.png</a></p></blockquote><ul><li>src/index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"profile"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./images/favicon.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main-bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>webpack-dev-server –config=config/webpack.dev.js</p><p>cf) 매번 위 명령어를 입력하지 말고 package.json에 아래 명령어를 추가하고</p><p>npm run dev 또는 yarn dev로 짧게 명령어를 단축할 수 있다!</p><p>  “scripts”: {</p><p>​    “dev”: “webpack-dev-server –config=config/webpack.dev.js”,</p><p>  },</p></blockquote><p>결과!</p><blockquote><p>굳이 html에 css를 삽입할 필요 없이, 웹팩이 CSS를 읽어 html 파일에 삽입해준다!</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.udemy.com/webpack-beyond-the-basics" target="_blank" rel="noopener">https://www.udemy.com/webpack-beyond-the-basics</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02. 웹팩(Webpack) 바벨(babel) 연동</title>
      <link href="/2018/03/03/Frontend/2.%EC%9B%B9%ED%8C%A9-%EB%B0%94%EB%B2%A8(babel)-%EC%97%B0%EB%8F%99/"/>
      <url>/2018/03/03/Frontend/2.%EC%9B%B9%ED%8C%A9-%EB%B0%94%EB%B2%A8(babel)-%EC%97%B0%EB%8F%99/</url>
      
        <content type="html"><![CDATA[<p>구버젼 IE/안드로이드에서 최신 JS를 사용할 수 있도록 도와주는 바벨을 셋팅해보자</p><h2 id="기본셋팅-및-arrow-function"><a href="#기본셋팅-및-arrow-function" class="headerlink" title="기본셋팅 및 arrow function"></a>기본셋팅 및 arrow function</h2><p>arrow function을 일반 function으로 바꿔보겠다!</p><blockquote><p>npm i babel-core babel-loader babel-plugin-transform-es2015-arrow-functions</p><p>npm i babel-cli -g</p></blockquote><ul><li>.babelrc 생성</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"transform-es2015-arrow-functions"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src/main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./main.css"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.html"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'하하!'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>babel src/main.js 명령어 입력하면 converting 되는걸 볼 수 있음</p></blockquote><ul><li>config/webpack.dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">"babel-loader"</span></span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">      &#125;,</span><br><span class="line"> ...</span><br></pre></td></tr></table></figure><blockquote><p> webpack –config=config/webpack.dev.js</p></blockquote><p>dist에서 변환된 내용을 확인할 수 있다!</p><h2 id="Async-Await-Promise-적용"><a href="#Async-Await-Promise-적용" class="headerlink" title="Async Await(Promise) 적용"></a>Async Await(Promise) 적용</h2><blockquote><p>npm i babel-plugin-async-to-promises</p></blockquote><ul><li>.babelrc</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-es2015-arrow-functions"</span>,</span><br><span class="line">        <span class="string">"async-to-promises"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"./main.css"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.html"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">console</span>.log(<span class="string">'하하!'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'후후'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>babel src/main.js</p></blockquote><p>Promise 함수로 변환시키는 것을 볼 수 있다. 여기까지 해도, Promise를 지원하는 최신 브라우저에서는 동작하는데, IE11에서는 Promise를 이해하지 못한다. 그래서 polyfill을 적용해, Promise함수를 자동으로 삽입해주도록 해야한다.</p><blockquote><p>npm i babel-polyfill</p></blockquote><ul><li>config/webpack.dev.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">entry: &#123;</span><br><span class="line">    main: [<span class="string">"babel-polyfill"</span>, <span class="string">"./src/main.js"</span>]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>npm run dev</p><p>yarn dev 또는 webpack-dev-server –config=config/webpack.dev.js</p></blockquote><p>main.js가 생성이 되었지만 용량이 꾀나 크다! [big]라고 나옴. polyfill은 모든 함수를 넣어주기 때문이다. 필요한 함수가 선별적으로 넣어주는 것이 가장 좋다!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  entry: &#123;</span><br><span class="line">      main: [<span class="string">"core-js/fn/promise"</span>, <span class="string">"./src/main.js"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="babel-사용을-조금더-간편하게"><a href="#babel-사용을-조금더-간편하게" class="headerlink" title="babel 사용을 조금더 간편하게"></a>babel 사용을 조금더 간편하게</h3><p>babel을 매번 찾아 선언해주는 것은 번거로운일이다. 그래서 바벨을 preset을 제공해준다. </p><p>바로 <code>babel-preset-env</code> es2015, es2016, es2017 및 latest를 포함하고 있다.</p><p><a href="http://babeljs.io/docs/plugins/" target="_blank" rel="noopener">http://babeljs.io/docs/plugins/</a></p><blockquote><p> <code>babel-stage</code> 를 사용하면 JS 표준으로 채택되지 않은 문법도 사용할 수가 있다!</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"targets"</span>: &#123;</span><br><span class="line">                    <span class="comment">// 브라우저 타겟을 설정</span></span><br><span class="line">                    <span class="string">"browsers"</span>: [<span class="string">"last 2 versions"</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">"debug"</span>: <span class="literal">true</span> <span class="comment">// 어떤 바벨 플러그인이 적용됐는지 확인</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-runtime"><a href="#babel-runtime" class="headerlink" title="babel-runtime"></a>babel-runtime</h2><p>babel-polyfill 대신에 babel-runtime을 활용할 수도 있다. polyfill이 전역에 최신 JS 함수를 추가하는 거라면, babel-rutime은 전역 스코프를 오염시키지 않으며, 모듈 단위로 최신JS 파일을 포함시킨다.</p><ul><li>사용 시기</li></ul><blockquote><p>전역 스코프를 오염해서 안되는 경우</p><p>public 모듈 또는 가볍게 작동해야하는 라이브러리를 만들경우</p></blockquote><ul><li>.babelrc</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"presets"</span>: [</span><br><span class="line">        [</span><br><span class="line">            <span class="string">"env"</span>,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">"targets"</span>: &#123;</span><br><span class="line">                    <span class="string">"browsers"</span>: [<span class="string">"last 2 versions"</span>]</span><br><span class="line">                &#125;,</span><br><span class="line">            </span><br><span class="line">                <span class="string">"debug"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"plugins"</span>: [<span class="string">"transform-runtime"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">"babel-runtime/regenerator"</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./main.css"</span>);</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./index.html"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">async</span> (args) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> <span class="built_in">console</span>.log(<span class="string">'하하!'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'후후'</span>)</span><br><span class="line">    <span class="keyword">const</span> &#123;a, b&#125; = args</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(&#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;);</span><br></pre></td></tr></table></figure><ul><li>webpack.dev.js 에서 설정했던 폴리필을 제거</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">entry: &#123;</span><br><span class="line">      main: [<span class="string">"./src/main.js"</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><p>webpack -config=config/webpack.dev.js</p></blockquote><p>babel-runtime에 대한 상세 설정은 아래 URL을 참조</p><p> <a href="https://babeljs.io/docs/plugins/transform-runtime/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/transform-runtime/</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.udemy.com/webpack-beyond-the-basics" target="_blank" rel="noopener">https://www.udemy.com/webpack-beyond-the-basics</a></p><p>polyfill vs runtime : <a href="https://codersmind.com/babel-polyfill-babel-runtime-explained/" target="_blank" rel="noopener">https://codersmind.com/babel-polyfill-babel-runtime-explained/</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cordova에서 플랫폼 체크 css 방법</title>
      <link href="/2018/02/02/etc/cordova-css-check/"/>
      <url>/2018/02/02/etc/cordova-css-check/</url>
      
        <content type="html"><![CDATA[<p>cordova에서 빌드시 자동으로 body 태그의 클래스가 추가 된다.</p><blockquote><p>.cordova</p><p>.platform-ios</p><p>.platform-android</p></blockquote><p>즉 코르도바에서, ios 플랫폼인지 체크하고 싶다면</p><blockquote><p>.platform-ios.cordova </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05. 스타일</title>
      <link href="/2018/01/25/Vue/5.%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B0%8F-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%81%EC%9A%A9/"/>
      <url>/2018/01/25/Vue/5.%EC%8A%A4%ED%83%80%EC%9D%BC-%EB%B0%8F-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A0%81%EC%9A%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="스타일-바인딩"><a href="#스타일-바인딩" class="headerlink" title="스타일 바인딩"></a>스타일 바인딩</h3><ol><li><strong>:style</strong>을 활용하고, 인자로 <strong>css 객체</strong>를 넘겨 적용하거나</li><li>개별적인 속성 하나하나를 바인딩 가능(비추천-유지보수 힘듬)</li><li>여러 스타일 객체 바인딩 <strong>:style=”[스타일1, 스타일2]”</strong></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">  &lt;!-- 바인딩 방법 1 --&gt;</span><br><span class="line">  &lt;button id=&quot;a&quot; v-bind:style=&quot;style1&quot; @mouseover.stop=&quot;overEvent&quot; </span><br><span class="line">      @mouseout.stop=&quot;outEvent&quot;&gt;테스트&lt;/button&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 바인딩 방법 2 --&gt;</span><br><span class="line">  &lt;div :style=&quot;&#123; backgroundColor: style2.bc, width:style2.w+&apos;px&apos;, height:style2.h+&apos;px&apos; &#125;&quot;&gt;&lt;/div&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- 복수 스타일 바인딩 --&gt;</span><br><span class="line">  &lt;div :style=&quot;[myColor, myLayout]&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el : &quot;#example&quot;,</span><br><span class="line">  data : &#123;</span><br><span class="line">    style1 : &#123; backgroundColor:&quot;aqua&quot;, border:&apos;solid 1px gray&apos;, </span><br><span class="line">      with:&apos;100px&apos;, textAlign:&apos;center&apos; &#125;,</span><br><span class="line">    style2 : &#123; bc:&quot;yellow&quot;, bd:&apos;solid 1px gray&apos;, w:200, h:100 &#125;,</span><br><span class="line">    myColor : &#123; backgroundColor: &apos;purple&apos;, color: &apos;yellow&apos; &#125;,</span><br><span class="line">    myLayout : &#123; width: &apos;150px&apos;, height: &apos;80px&apos; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods : &#123;</span><br><span class="line">    overEvent : function(e) &#123;</span><br><span class="line">      this.style1.backgroundColor = &quot;purple&quot;;</span><br><span class="line">      this.style1.color = &quot;yellow&quot;;</span><br><span class="line">    &#125;,</span><br><span class="line">    outEvent : function(e) &#123;</span><br><span class="line">      this.style1.backgroundColor = &quot;aqua&quot;;</span><br><span class="line">      this.style1.color = &quot;black&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="클래스-바인딩"><a href="#클래스-바인딩" class="headerlink" title="클래스 바인딩"></a>클래스 바인딩</h3><ol><li>:class=”{ 클래스명 : true/false, 클래스명 : true/false }”와 같이 반영한다.</li><li>객체의 속성을 style명과 동일 하게 가져가면 더 직관적으로 사용이 가능하다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .set1 &#123; background-color: aqua; color:purple; &#125;</span><br><span class="line">  .set2 &#123; text-align:center; width:120px; &#125;</span><br><span class="line">  .set3 &#123; border:sandybrown dashed 1px; &#125;</span><br><span class="line">&lt;/style&gt;  </span><br><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;button id=&quot;btn1&quot; :class=&quot;&#123; set1:s1, set2:s2, set3:s3 &#125;&quot;&gt;버튼1&lt;/button&gt;</span><br><span class="line">  &lt;button id=&quot;btn2&quot; :class=&quot;myStyle&quot;&gt;버튼1&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el : &quot;#example&quot;,</span><br><span class="line">  data : &#123;</span><br><span class="line">    s1 : false,</span><br><span class="line">    s2 : false,</span><br><span class="line">    s3 : false,</span><br><span class="line">    // 객체 속성 이름과, style명을 동일하게 가져간다.</span><br><span class="line">    mystyle : &#123; set1: false, set2: false, set3: false &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="계산형-속성을-이용"><a href="#계산형-속성을-이용" class="headerlink" title="계산형 속성을 이용!"></a>계산형 속성을 이용!</h3><p>v-model에 바인딩한 데이터를 computed 시켜, { 클래스명 : true/false }를 리턴하여 사용할 수도 있다!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  .score &#123; border:solid 1px black; &#125;</span><br><span class="line">  .warning &#123; background-color: orange; color:purple; &#125;</span><br><span class="line">  .warnimage &#123; width:18px; height:18px; top:5px; position:relative;   &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">  점수 : &lt;input type=&quot;text&quot; class=&quot;score&quot; </span><br><span class="line">              v-model.number=&quot;score&quot; v-bind:class=&quot;info&quot; /&gt;</span><br><span class="line">  &lt;img src=&quot;images/error.png&quot; class=&quot;warnimage&quot; v-show=&quot;info.warning&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el : &quot;#example&quot;,</span><br><span class="line">  data : &#123; </span><br><span class="line">    score : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  computed : &#123;</span><br><span class="line">    info : function() &#123;</span><br><span class="line">        if (this.score &gt;= 1 &amp;&amp; this.score &lt;= 100) </span><br><span class="line">            return &#123; warning:false &#125;;</span><br><span class="line">        else </span><br><span class="line">            return &#123; warning:true &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Vue.js Quick Start 원형섭</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.2. Watch 중첩데이터 감시(deep) 및 즉시실행(immediate)</title>
      <link href="/2018/01/24/Vue/1.2.Watch-%E1%84%8C%E1%85%AE%E1%86%BC%E1%84%8E%E1%85%A5%E1%86%B8%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%80%E1%85%A1%E1%86%B7%E1%84%89%E1%85%B5-%E1%84%8C%E1%85%B3%E1%86%A8%E1%84%89%E1%85%B5%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC/"/>
      <url>/2018/01/24/Vue/1.2.Watch-%E1%84%8C%E1%85%AE%E1%86%BC%E1%84%8E%E1%85%A5%E1%86%B8%E1%84%83%E1%85%A6%E1%84%8B%E1%85%B5%E1%84%90%E1%85%A5%E1%84%80%E1%85%A1%E1%86%B7%E1%84%89%E1%85%B5-%E1%84%8C%E1%85%B3%E1%86%A8%E1%84%89%E1%85%B5%E1%84%89%E1%85%B5%E1%86%AF%E1%84%92%E1%85%A2%E1%86%BC/</url>
      
        <content type="html"><![CDATA[<p>0.1. 포스팅에서 watch를 사용해야하는 경우에 대해 정리하였다.</p><ul><li>watch를 사용해야할 경우</li></ul><ol><li>mustache(템플릿 표현식) 없이 값의 변화를 관찰하고 싶을때는 watch를 사용한다.</li><li>비동기적 처리시 사용한다!</li><li>값이 바뀔 때마다 매번 호출되어야 할 경우</li><li>연산을 얼마나 자주 수행하는지 제한가능(lodash의 debounce 이용)</li></ol><hr><p>그런데! 데이터가 배열이나, 객체일 경우에 값이 변해도 변수는 여전히 같은 객체를 가리키고 있기 때문에 <code>watch</code> 가 실행되지 않는다. 아래와 같이 해결한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data: <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">    processingItems: [<span class="string">'a'</span>, <span class="string">'b '</span>]</span><br><span class="line">  &#125;),</span><br><span class="line">  </span><br><span class="line">  watch: &#123;</span><br><span class="line">    processingItems() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'123'</span>) <span class="comment">// 실행되지 않는다.</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    processingItems: &#123;</span><br><span class="line">      immediate: <span class="literal">true</span>, <span class="comment">// 최초 초기화시 1회 실행되게 한다.</span></span><br><span class="line">      deep: <span class="literal">true</span>, <span class="comment">// 변화를 deep하게 감시한다.</span></span><br><span class="line">      handler(newVal, oldVal) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'change'</span>) <span class="comment">// 실행된다.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/52343140/how-to-implement-dirty-state-in-vuejs" target="_blank" rel="noopener">https://stackoverflow.com/questions/52343140/how-to-implement-dirty-state-in-vuejs</a></p><p><a href="https://ui.toast.com/weekly-pick/ko_20190307/" target="_blank" rel="noopener">https://ui.toast.com/weekly-pick/ko_20190307/</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.1. Computed VS Watch vs Method 정리</title>
      <link href="/2018/01/24/Vue/1.1.Computed-VS-Watch/"/>
      <url>/2018/01/24/Vue/1.1.Computed-VS-Watch/</url>
      
        <content type="html"><![CDATA[<p>computed와 watch… watch는 비동기적인 코드를 처리할때 쓴다고 정도만 알고 있었더니 너무 헷갈린다. computed로 안되지만 watch로는 동작하는 코드가 있다.. 한번 정리해보자.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">  &#123;&#123;x&#125;&#125; &#123;&#123;y&#125;&#125; &#123;&#123;z&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &apos;#example&apos;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    y: &apos;y&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  created: function() &#123;</span><br><span class="line">    // 3초후에 y값을 바꾼다.</span><br><span class="line">setTimeout(()=&gt; this.y=&apos;kill bill&apos;, 3000);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  computed: &#123;</span><br><span class="line">    x: function () &#123;</span><br><span class="line">      console.log(&apos;x open&apos;);</span><br><span class="line">  return this.y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  watch: &#123;</span><br><span class="line">    y: function (newVal, oldVal) &#123;</span><br><span class="line">      console.log(&apos;y open&apos;);</span><br><span class="line">      return this.y;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">z: function() &#123;</span><br><span class="line">  console.log(&apos;z open&apos;);</span><br><span class="line">  return &apos;z&apos;;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>3초 후에  y값을 바꾼다. y값을 바꾸면 y를 관찰하고 있던 y가 실행되며, y에 종속성이 있는 x 역시도 실행된다.</p><blockquote><p>y open</p><p>x open</p></blockquote><p>자 그럼 아래와 같은 템플릿은 어떨까?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>선언한 값들을 참조하지 않았다. 3초 후에 y값을 바꾸면</p><blockquote><p>y open</p></blockquote><p>computed는 아예 실행되지 않는다! 사용되지 않았으므로. </p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>watch를 사용해야할 경우</li></ul><ol><li>mustache(템플릿 표현식) 없이 값의 변화를 관찰하고 싶을때는 watch를 사용한다.</li><li>비동기적 처리시 사용한다!</li><li>값이 바뀔 때마다 매번 호출되어야 할 경우</li><li>연산을 얼마나 자주 수행하는지 제한가능(lodash의 debounce 이용)</li></ol><ul><li>computed 사용해야 할 경우</li></ul><ol><li><p>종속된 값의 변화를 관찰하고 싶은 경우</p></li><li><p>mustache(템플릿 표현식) 을 사용하는 경우</p></li><li><p>동기 호출에 무관할 경우</p><p>input의 v-model로 서버호출이 필요한데 computed 를 사용할 경우, 입력이 멈춰버린다. 값을 직접 리턴해야하기 때문.</p></li><li><p>동일한 인풋 값에 대해선, 캐싱이 적용된다!</p></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Vue.js Quick Start 원형섭</p><p><a href="https://kr.vuejs.org/v2/guide/computed.html" target="_blank" rel="noopener">https://kr.vuejs.org/v2/guide/computed.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>v-model 사용하는 커스텀 컴포넌트 만들기</title>
      <link href="/2018/01/21/Vue/v-model-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%A0%9C%EC%9E%91/"/>
      <url>/2018/01/21/Vue/v-model-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%A0%9C%EC%9E%91/</url>
      
        <content type="html"><![CDATA[<h3 id="input-컴포넌트"><a href="#input-컴포넌트" class="headerlink" title="input 컴포넌트"></a>input 컴포넌트</h3><ul><li>아래 처럼, v-model을 커스텀 컴포넌트에 사용하고 싶다! 그리고 객체를 넘기고 싶다!</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;wrapper&quot;&gt;</span><br><span class="line">    &lt;date-picker v-model=&quot;date&quot;&gt;&lt;/date-picker&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">      Month: &#123;&#123;date.month&#125;&#125;</span><br><span class="line">      Year: &#123;&#123;date.year&#125;&#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import DatePicker from &apos;./DatePicker.vue&apos;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    DatePicker</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      date: &#123;</span><br><span class="line">        month: 1,</span><br><span class="line">        year: 2017</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>아래와 같이 선언하면 도니다.</li></ul><p>@input 태그를 이용해서, 부모컴포넌트에게 값을 넘겨 주는 것이다.</p><p>$emit(‘input’, 인자)를 활용하면, 값을 넘겨 줄 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 선언</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;date-picker&quot;&gt;</span><br><span class="line">    Month: &lt;input type=&quot;number&quot; ref=&quot;monthPicker&quot; :value=&quot;value.month&quot; @input=&quot;updateDate()&quot;/&gt;</span><br><span class="line">    Year: &lt;input type=&quot;number&quot; ref=&quot;yearPicker&quot; :value=&quot;value.year&quot; @input=&quot;updateDate()&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&apos;value&apos;],</span><br><span class="line"></span><br><span class="line">  methods: &#123;</span><br><span class="line">    updateDate() &#123;</span><br><span class="line">      this.$emit(&apos;input&apos;, &#123;</span><br><span class="line">        month: +this.$refs.monthPicker.value,</span><br><span class="line">        year: +this.$refs.yearPicker.value</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="select-컴포넌트"><a href="#select-컴포넌트" class="headerlink" title="select 컴포넌트"></a>select 컴포넌트</h3><ul><li>아래와 같이 사용하고 싶다!</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;custom-selectbox :items=&quot;startTimes&quot;</span><br><span class="line">                  v-model=&quot;schedule.$services[0].start&quot;&gt;</span><br><span class="line">&lt;/custom-selectbox&gt;</span><br></pre></td></tr></table></figure><ul><li>이번에는 @change를 이용하고, $emit(‘input’, 인자)를 이용한다</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;custom-selectbox-container&quot;&gt;</span><br><span class="line">    &lt;select :value=&quot;value&quot; @change=&quot;onChange($event.target.value)&quot;&gt;</span><br><span class="line">      &lt;option v-for=&quot;item in items&quot; :value=&quot;item.label&quot;&gt;</span><br><span class="line">        &#123;&#123;item.value&#125;&#125;&#123;&#123;unit&#125;&#125;</span><br><span class="line">      &lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">      onChange: function(value) &#123;</span><br><span class="line">        if (value === &apos;&apos;) &#123;</span><br><span class="line">          value = null;</span><br><span class="line">        &#125;</span><br><span class="line">        this.$emit(&apos;input&apos;, value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    props: [&apos;items&apos;, &apos;value&apos;, &apos;unit&apos;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://alligator.io/vuejs/add-v-model-support/" target="_blank" rel="noopener">https://alligator.io/vuejs/add-v-model-support/</a></p><p><a href="https://jsfiddle.net/dux6q43p/1/" target="_blank" rel="noopener">https://jsfiddle.net/dux6q43p/1/</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04. Vue 이벤트</title>
      <link href="/2018/01/20/Vue/4.%EC%9D%B4%EB%B2%A4%ED%8A%B8/"/>
      <url>/2018/01/20/Vue/4.%EC%9D%B4%EB%B2%A4%ED%8A%B8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>v-on 또는 @를 사용.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot; class=&quot;container layout1&quot;&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;text&quot; v-model=&quot;amount&quot; class=&quot;form-control&quot; /&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        &lt;button id=&quot;deposit&quot; @click=&quot;balance += parseInt(amount)&quot;</span><br><span class="line">          class=&quot;btn btn-primary&quot;&gt;예금&lt;/button&gt;</span><br><span class="line">        &lt;button id=&quot;withdraw&quot; v-on:click=&quot;balance -= parseInt(amount)&quot; </span><br><span class="line">          class=&quot;btn btn-primary&quot;&gt;인출&lt;/button&gt;</span><br><span class="line">    &lt;/p&gt;            </span><br><span class="line">    &lt;h3&gt;계좌 잔고 : &#123;&#123;balance&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el : &quot;#example&quot;,</span><br><span class="line">  data : &#123;</span><br><span class="line">    amount : 0,</span><br><span class="line">    balance : 0,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="이벤트-객체"><a href="#이벤트-객체" class="headerlink" title="이벤트 객체"></a>이벤트 객체</h3><ul><li>target : 이벤트가 발생한 HTML 요소를 리턴함.</li><li>currentTarget : 이벤트 리스너가 발생시키는 HTML 요소를 리턴함.</li><li>path: 배열 값, HTML 요소로부터 document, window 객체로까지 거슬러 올라가는 경로를 나타냄.</li><li>bubbles : 버블링을 일으키는 이벤트인지 여부 리턴함.</li><li>cancelable : 기본 이벤트를 방지할 수 있는지 여부를 리턴.</li><li>defaultPrevented : 기본 이벤트가 방지되었는지 여부를 나타냄.</li><li>eventPhase : 이벤트 흐름의 단계를 나타냄. 포착 -&gt; 이벤트발생 -&gt; 버블링.</li></ul><h3 id="이벤트-메서드"><a href="#이벤트-메서드" class="headerlink" title="이벤트 메서드"></a>이벤트 메서드</h3><ul><li>preventDefault() : 기본 이벤트의 자동 실행을 중지시킴</li><li>stopPropagation() : 이벤트의 전파를 막음.</li></ul><h3 id="기본-이벤트"><a href="#기본-이벤트" class="headerlink" title="기본 이벤트"></a>기본 이벤트</h3><p>다음과 같은 기본 이벤트를 말함</p><blockquote><p>a요소 클릭 href 경로로 페이지 이동, 브라우저 화면 마우스 오른쪽 클릭-&gt; 컨텍스트메뉴 나타남, form submit 버튼 클릭 action 경로로 함수 실행</p></blockquote><p>위 preventDefault를 실행해주면, 위 기본 이벤트가 막힘.</p><p>preventDefulat 더 쉽게 하려면 vue에서 제공해주는 .prevent를 사용하시라.</p><p><code>&lt;div id=&quot;example&quot; @contextmenu.prevent=&quot;ctxStop&quot;&gt;</code></p><h3 id="이벤트-전파와-버블링"><a href="#이벤트-전파와-버블링" class="headerlink" title="이벤트 전파와 버블링"></a>이벤트 전파와 버블링</h3><p>HTML 문서의 이벤트 처리는 3단계를 거친다. </p><p><img src="https://res.cloudinary.com/hzxejch6p/image/upload/c_scale,w_300/v1502872464/capture-bubble_nbgmry.png" alt="event propagation에 대한 이미지 검색결과"></p><blockquote><p>문서 내의 요소에서 이벤트가 발생!</p></blockquote><ul><li><ol><li>포착단계 :  밖에서 부터 이벤트를 발생시킨 HTML 요소까지 포착해 들어감.</li></ol></li><li><ol start="2"><li>이벤트 발생</li></ol></li><li><ol start="3"><li>상위 요소로, 동일한 이벤트 호출시킴.</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;outer&quot; @click=&quot;outerClick&quot;&gt;</span><br><span class="line">        &lt;div id=&quot;inner&quot; @click=&quot;innerClick&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el : &quot;#example&quot;,</span><br><span class="line">  methods : &#123;</span><br><span class="line">    outerClick : function(e) &#123;</span><br><span class="line">        console.log(&quot;### OUTER CLICK&quot;)</span><br><span class="line">        console.log(&quot;Event Phase : &quot;, e.eventPhase);</span><br><span class="line">        console.log(&quot;Current Target : &quot;, e.currentTarget);</span><br><span class="line">        console.log(&quot;Target : &quot;, e.target);</span><br><span class="line">    &#125;,</span><br><span class="line">    innerClick : function(e) &#123;</span><br><span class="line">        console.log(&quot;### INNER CLICK&quot;)</span><br><span class="line">        console.log(&quot;Event Phase : &quot;, e.eventPhase);</span><br><span class="line">        console.log(&quot;Current Target : &quot;, e.currentTarget);</span><br><span class="line">        console.log(&quot;Target : &quot;, e.target);    </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>inner만 클릭해도, outer 클릭 이벤트 역시 실행됌.</p><table><thead><tr><th></th><th>inner</th><th>outer</th></tr></thead><tbody><tr><td>eventPhase</td><td>2(AT_TARGET)</td><td>3(BUBBLING)</td></tr><tr><td>current target</td><td>inner</td><td>outer</td></tr><tr><td>target</td><td>inner</td><td>inner</td></tr></tbody></table><p><code>target</code>은 오리지널을 계속 가리키고, <code>currentTarget</code>은 현재 이벤트가 실행되는 위치를 나타냄을 보라!</p><p>이때 <code>e.stopPropagation()</code>을 실행하면, 이벤트 버블링을 막을 수 있다.</p><p>역시 수식어를 사용가능</p><ul><li><p>@click.stop : 이벤트 전파 중단시킴</p></li><li><p>@click.capture : CAPTURING_PHASE 단계에서만 이벤트 발생</p></li><li><p>@click.self : RAISING_PHASE 일때만 이벤트 발생</p></li><li><p>@click.once : 이벤트가 한번만.</p><p>​</p></li><li><p>@keyup.13: 와 같은 키이벤트도 있음 (13은 키코드의 수식어 이다)</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Vue.js Quick Start 원형섭</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>서브모듈 추가하기</title>
      <link href="/2018/01/07/GIT/submodule/"/>
      <url>/2018/01/07/GIT/submodule/</url>
      
        <content type="html"><![CDATA[<ol><li>서브모듈 추가</li></ol><blockquote><p>git submodule add 주소</p></blockquote><ol start="2"><li>서브모듈 로그 확인</li></ol><blockquote><p>cd 서브모듈</p><p>git log –pretty=short -1</p></blockquote><ol start="3"><li>서브모듈 pull</li></ol><blockquote><p>cd 서브모듈</p><p>git pull origin master</p></blockquote><p>서브모듈의 revision 정보를 더함.</p><blockquote><p>git add 서브모듈</p></blockquote><p>서브 모듈 프로젝트 클론</p><blockquote><p>git clone 부모프로젝트</p><p>cd 부모프로젝트</p><p>git submodule init</p><p>git submodule update</p></blockquote><ul><li>웹스톰 파일 수정이 안될때</li></ul><blockquote><p>sudo chown -R 유저이름 서브모듈폴더</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Vue.js Quick Start 원형섭</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01. Vue객체, 기본 디렉티브</title>
      <link href="/2017/12/08/Vue/1.Vue%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EA%B8%B0%EB%B3%B8%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C/"/>
      <url>/2017/12/08/Vue/1.Vue%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-%EA%B8%B0%EB%B3%B8%EB%94%94%EB%A0%89%ED%8B%B0%EB%B8%8C/</url>
      
        <content type="html"><![CDATA[<p>기본 환경셋팅이나, 자세한 설명보다는 요점만 정리할까 한다.</p><blockquote><p>원형섭씨의 Quick Start Vue.js의 예제를 사용하였다.</p><p><a href="https://github.com/stepanowon/vuejs_book" target="_blank" rel="noopener">https://github.com/stepanowon/vuejs_book</a></p></blockquote><h2 id="Vue-객체"><a href="#Vue-객체" class="headerlink" title="Vue 객체"></a>Vue 객체</h2><p>아주 심플한 사용은 아래와 같다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">  &lt;title&gt;hello vue.js&lt;/title&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/vue/dist/vue.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;simple&quot;&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;message&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;span&gt;&#123;&#123;sum()&#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var model = &#123;</span><br><span class="line">      message : &apos;첫번째 Vue.js 앱 입니다!&apos;,</span><br><span class="line">      num1 : 0,</span><br><span class="line">      num2 : 1</span><br><span class="line">    &#125;;</span><br><span class="line">    var simple = new Vue(&#123;</span><br><span class="line">      el : &apos;#simple&apos;,</span><br><span class="line">      data : model,</span><br><span class="line">      method: &#123;</span><br><span class="line">        sum : function() &#123;</span><br><span class="line">          return this.num1 + this.num2;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>MVVM 패턴</strong> : View -&gt; View 모델 -&gt; 모델로 데이터가 이동한다. 뷰모델이 중계역할을 함!</p><p><img src="https://marcosantadev.com/wp-content/uploads/mvvm.jpg" alt="mvvm에 대한 이미지 검색결과"></p><ol><li><p>새로운 Vue 객체를 생성</p><ul><li>el 값에 태그를 입력</li><li>data에 바인딩시킬 변수를 입력</li><li><code></code> mustache 표현식으로 출력된다!</li></ul></li><li><p><code>model.message = &#39;1111&#39;;</code> 과 같은 식으로 변경시 텍스트가 변한다.</p><p><code>simple.message = &#39; 111&#39;;</code> <code>simple.$data.message = &#39;1111&#39;;</code> 과도 같다. 인스턴스와 data 옵션 사이에는 프록시를 두어 처리하기 때문!</p></li><li><p>el : 뷰 인스턴스에 연결할 HTML 돔요소를 지정, 주의할 점은 1개만 등록가능!</p></li><li><p>method : 뷰 인스턴스에서 사용할 메서드 등록, Mustache 표현식에서도 사용이 가능!</p><p>​</p></li></ol><h2 id="디렉티브"><a href="#디렉티브" class="headerlink" title="디렉티브"></a>디렉티브</h2><ol><li><strong>v-text</strong> : <code></code> 와 같음. 화면에 태그 문자열이 그대로 나타남.</li></ol><ol start="2"><li><strong>v-html</strong> : 태그 문자열을 파싱하여 화면에 나타낸다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;h2 v-text=&quot;message&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;h2 v-html=&quot;message&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var model = &#123;</span><br><span class="line">    message : &apos;&lt;i&gt;랄라&lt;/i&gt;&apos;</span><br><span class="line">  &#125;;</span><br><span class="line">  var simple = new Vue(&#123;</span><br><span class="line">    el : &apos;#simple&apos;,</span><br><span class="line">    data : model</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>v-bind</strong> : 속성 바인딩<br>model의 데이터를 속성에 바인딩하고 싶을때 사용한다.</li></ol><blockquote><p>v-bind:src 는 :src와 같다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> &lt;div id=&quot;simple&quot;&gt;</span><br><span class="line">   &lt;input id=&quot;a&quot; type=&quot;text&quot; v-bind:value=&quot;message&quot;&gt;</span><br><span class="line">   &lt;br /&gt;</span><br><span class="line">   &lt;img v-bind:src=&quot;imagePath&quot; /&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var model = &#123;</span><br><span class="line">    message : &apos;v-bind 디렉티브&apos;,</span><br><span class="line">    imagePath : &quot;http://sample.bmaster.kro.kr/photos/61.jpg&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">  var simple = new Vue(&#123;</span><br><span class="line">    el : &apos;#simple&apos;,</span><br><span class="line">    data : model</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>v-model</strong> : 양방향 바인딩</li></ol><p>1-way바인딩은 모델-&gt;뷰 방향만 전달. 2-way바인딩은 뷰-&gt; 모델도 가능하다!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;simple&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;name&quot; placeholder=&quot;이름을 입력하세요&quot; /&gt;</span><br><span class="line">  &lt;br /&gt;</span><br><span class="line">  입력된 이름 : &lt;h2 v-html=&quot;name&quot;&gt;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  var twoway = new Vue(&#123;</span><br><span class="line">    el : &apos;#simple&apos;,</span><br><span class="line">    data : &#123;</span><br><span class="line">        name : &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ul><li>모델 바인딩</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;simple1&quot;&gt;</span><br><span class="line">  &lt;div&gt;좋아하는 과일을 모두 골라주세요 : &lt;/div&gt;</span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;1&quot; v-model=&quot;fruits&quot;&gt;사과, </span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;2&quot; v-model=&quot;fruits&quot;&gt;키위, </span><br><span class="line">  &lt;input type=&quot;checkbox&quot; value=&quot;3&quot; v-model=&quot;fruits&quot;&gt;포도</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;hr /&gt;</span><br><span class="line">&lt;div id=&quot;simple2&quot;&gt;</span><br><span class="line">   선택한 과일들 : &lt;span v-html=&quot;fruits&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var model = &#123;</span><br><span class="line">  fruits : []</span><br><span class="line">&#125;;</span><br><span class="line">var simple1 = new Vue(&#123;</span><br><span class="line">    el : &apos;#simple1&apos;, data : model</span><br><span class="line">&#125;)</span><br><span class="line">var simple2 = new Vue(&#123;</span><br><span class="line">    el : &apos;#simple2&apos;, data : model</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>다음과 같이 한 모델에 여러 view모델을 바인딩 할 수도 있다.</p><ol start="5"><li><strong>v-show, v-if, v-else, v-else-if</strong></li></ol><p>자세한 설명은 생략한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;account&quot;&gt;</span><br><span class="line">  잔고 : &lt;input type=&quot;text&quot; v-model=&quot;balance&quot; /&gt;</span><br><span class="line">  &lt;br /&gt;</span><br><span class="line">  회원님의 등급 : </span><br><span class="line">  &lt;span v-if=&quot;balance &gt;= 1000000&quot;&gt;Gold&lt;/span&gt;</span><br><span class="line">  &lt;span v-else-if=&quot;balance &gt;= 500000&quot;&gt;Silver&lt;/span&gt;</span><br><span class="line">  &lt;span v-else-if=&quot;balance &gt;= 200000&quot;&gt;Bronze&lt;/span&gt;</span><br><span class="line">  &lt;span v-else&gt;Basic&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var simple1 = new Vue(&#123;</span><br><span class="line">  el : &apos;#account&apos;,</span><br><span class="line">  data : &#123;</span><br><span class="line">      balance : 0</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="6"><li>v-for : 반복 디렉티브</li></ol><ul><li>배열</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;table id=&quot;list&quot;&gt;</span><br><span class="line">&lt;thead&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">               &lt;th&gt;번호&lt;/th&gt;&lt;th&gt;이름&lt;/th&gt;&lt;th&gt;전화번호&lt;/th&gt;&lt;th&gt;주소&lt;/th&gt;</span><br><span class="line">           &lt;/tr&gt;</span><br><span class="line">&lt;/thead&gt;</span><br><span class="line">&lt;tbody id=&quot;contacts&quot;&gt;</span><br><span class="line">           &lt;tr v-for=&quot;(contact, index) in contacts&quot;&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;index+1&#125;&#125;&lt;/td&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;contact.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">               &lt;td&gt;&#123;&#123;contact.address&#125;&#125;&lt;/td&gt;</span><br><span class="line">           &lt;/tr&gt;</span><br><span class="line">&lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">   &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   var model = &#123;</span><br><span class="line">       &quot;pageno&quot;: 1,</span><br><span class="line">       &quot;pagesize&quot;: 10,</span><br><span class="line">       &quot;totalcount&quot;: 100,</span><br><span class="line">       &quot;contacts&quot;: [</span><br><span class="line">           &#123; &quot;no&quot;: 100,&quot;name&quot;: &quot;설현&quot;, &quot;address&quot;: &quot;서울&quot; &#125;,</span><br><span class="line">           &#123; &quot;no&quot;: 99, &quot;name&quot;: &quot;혜리&quot;, &quot;address&quot;: &quot;서울&quot; &#125;,</span><br><span class="line">           &#123; &quot;no&quot;: 98, &quot;name&quot;: &quot;하니&quot;, &quot;address&quot;: &quot;경기&quot; &#125;</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br><span class="line">   var list = new Vue(&#123;</span><br><span class="line">       el : &quot;#exmaple&quot;,</span><br><span class="line">       data : model</span><br><span class="line">   &#125;);</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>(contact, index) in contacts</code>에서 index 생략 가능</p><ul><li>객체</li></ul><p>해시맵 구조이기 때문에 Key, Value 값을 얻어낼 수 있는 구조 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;exmaple&quot;&gt;</span><br><span class="line">    &lt;select id=&quot;regions&quot;&gt;</span><br><span class="line">        &lt;option disabled=&quot;disabled&quot; selected&gt;지역을 선택하세요&lt;/option&gt;</span><br><span class="line">        &lt;option v-for=&quot;(val, key, index) in regions&quot; v-bind:value=&quot;key&quot;&gt;&#123;&#123; index+1 &#125;&#125; : &#123;&#123;val&#125;&#125;&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var regions = &#123;</span><br><span class="line">    &quot;A&quot; : &quot;Asia&quot;,</span><br><span class="line">    &quot;B&quot; : &quot;America&quot;,</span><br><span class="line">    &quot;C&quot; : &quot;Europe&quot;,</span><br><span class="line">    &quot;D&quot; : &quot;Africa&quot;,</span><br><span class="line">    &quot;E&quot; : &quot;Oceania&quot;</span><br><span class="line">&#125;;</span><br><span class="line">var list = new Vue(&#123;</span><br><span class="line">    el : &quot;#exmaple&quot;,</span><br><span class="line">    data : &#123; regions : regions &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>v-for와 v-if를 함께 사용할 경우, v-for가 먼저 작동합니다.</p></blockquote><ul><li>여러 요소를 묶어 반복 렌더링 : <code>&lt;template&gt;</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template  v-for=&quot;(contact, index) in contacts&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;contact.no&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;contact.name&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;contact.tel&#125;&#125;&lt;/td&gt;</span><br><span class="line">      &lt;td&gt;&#123;&#123;contact.address&#125;&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;tr class=&quot;divider&quot; v-if=&quot;index % 5===4&quot;&gt;</span><br><span class="line">    &lt;td colspan=&quot;4&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><ul><li>데이터 변경시 주의할 사항</li></ul><p>인덱스 번호로 직접 변경시</p><p><code>contacts[0] = { no:100 };</code>  : 화면 변화없음</p><p>내부 속성 변경시</p><p><code>contacts[0].no = 100;</code> : 화면 변화</p><p>인덱스 번호를 통해 변경하려면</p><p><code>Vue.set(contacts, 0, {no: 100});</code> : push, pop, shift등 배열 메서드를 사용하면 변경 추적</p><ul><li>v-pre : html 요소 컴파일 수행하지 않음</li><li>v-once : html 요소를 한 번만 렌더링</li><li>v-cloack : mustache 표현식이 나타났다 사라지는 것을 막는다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">  [v-clock] &#123;display: none;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div v-cloak&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="Vue-객체의-추가-속성"><a href="#Vue-객체의-추가-속성" class="headerlink" title="Vue 객체의 추가 속성"></a>Vue 객체의 추가 속성</h2><h3 id="계산형-속성"><a href="#계산형-속성" class="headerlink" title="계산형 속성"></a>계산형 속성</h3><p>v-bind로 간단히 바인딩했지만, 그 속성값에 좀 더 복잡한 로직을 추가하고 싶다면!</p><p><strong>computed</strong> 속성을 사용하자!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;num&quot; /&gt;&lt;br /&gt;</span><br><span class="line">1부터 입력된 수까지의 합 : &lt;span&gt;&#123;&#123;sum&#125;&#125;&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">//1부터 입력된 수까지의 합구하기</span><br><span class="line">var vmSum = new Vue(&#123;</span><br><span class="line">    el : &quot;#example&quot;,</span><br><span class="line">    data : &#123; num : 0 &#125;,</span><br><span class="line">    computed : &#123;</span><br><span class="line">        sum : function() &#123;</span><br><span class="line">            var n = Number(this.num);</span><br><span class="line">            if (Number.isNaN(n) || n &lt; 1)  return 0;</span><br><span class="line">            return ((1+n) * n) / 2;</span><br><span class="line">        &#125;,</span><br><span class="line">      amount : &#123;</span><br><span class="line">            get : function() &#123;</span><br><span class="line">              // num이 변경 될때 마다 amount가 호출된다.  </span><br><span class="line">              return this.num;</span><br><span class="line">            &#125;,</span><br><span class="line">            set : function(amt) &#123;</span><br><span class="line">              // amount에 값을 할당했을때, 할당한 값이 amt로 들어온다.</span><br><span class="line">              // 비동기 호출시에, setter로 하면 값이 어떻게 될까나?</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>Vue 모델에 computed라는 속성과 함께 <code>함수</code>를 등록해 두면 <code>속성</code> 처럼 사용할 수 있다.</p><blockquote><p>Vue 인스턴스 method와의 차이는, computed는 결과값이 캐싱된다는점! method는 무조건 실행</p></blockquote><ul><li>주의점!</li></ul><p><strong>Computed에서는 Arrow Function 사용않기</strong></p><p>computed 내부에서 this 사용할때, Arrow Fuction(=&gt;)을 사용하지 말것!, Arrow Fuction 사용시 this의 컨텍스트가 전역 객체를 가리키게 된다.</p><p><strong>데이터 타입 주의</strong></p><p>html요소 내부에서는 모두 문자열로 다뤄짐을 알자. 연산시에는 명시적으로 <code>Number(this.num)</code>처럼 형변환이 필요하다.</p><h3 id="관찰-속성"><a href="#관찰-속성" class="headerlink" title="관찰 속성"></a>관찰 속성</h3><p>watch에 등록된 속성들은, 변경시 마다 호출! 그러나 비동기적으로 호출될때 사용 된다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;example&quot;&gt;</span><br><span class="line">    x : &lt;input type=&apos;text&apos; v-model=&quot;x&quot; /&gt;&lt;br /&gt;</span><br><span class="line">    y : &lt;input type=&apos;text&apos; v-model=&quot;y&quot; /&gt;&lt;br /&gt;</span><br><span class="line">    덧셈 결과 : &#123;&#123;sum&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">    el : &quot;#example&quot;,</span><br><span class="line">    data : &#123; x:0, y:0, sum:0 &#125;,</span><br><span class="line">    watch : &#123;</span><br><span class="line">        x : function(v) &#123;</span><br><span class="line">            console.log(&apos;## x 변경&apos;)</span><br><span class="line">            var result = Number(v) + Number(this.y);</span><br><span class="line">            if (isNaN(result)) this.sum = 0;</span><br><span class="line">            else this.sum = result;</span><br><span class="line">        &#125;,</span><br><span class="line">        y : function(v) &#123;</span><br><span class="line">            console.log(&apos;## y 변경&apos;)</span><br><span class="line">            this.y = v;</span><br><span class="line">            var result = Number(this.x) + Number(v);</span><br><span class="line">            if (isNaN(result)) this.sum = 0;</span><br><span class="line">            else this.sum = result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="라이프-사이클"><a href="#라이프-사이클" class="headerlink" title="라이프 사이클"></a>라이프 사이클</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">...</span><br><span class="line">  beforeCreate : function() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>위와 같이 시점에 맞게 이벤트가 후킹된다. <code>created updated beforeMount</code> 등이 있다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>Vue.js Quick Start 원형섭</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.1. Vue 컴포넌트 가이드</title>
      <link href="/2017/12/07/Vue/2.1.Vue-%E1%84%8F%E1%85%A5%E1%86%B7%E1%84%91%E1%85%A9%E1%84%82%E1%85%A5%E1%86%AB%E1%84%90%E1%85%B3-%E1%84%80%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%83%E1%85%B3/"/>
      <url>/2017/12/07/Vue/2.1.Vue-%E1%84%8F%E1%85%A5%E1%86%B7%E1%84%91%E1%85%A9%E1%84%82%E1%85%A5%E1%86%AB%E1%84%90%E1%85%B3-%E1%84%80%E1%85%A1%E1%84%8B%E1%85%B5%E1%84%83%E1%85%B3/</url>
      
        <content type="html"><![CDATA[<p>자세한 이유는, 아래 URL을 참고한다.</p><blockquote><p><a href="https://pablohpsilva.github.io/vuejs-component-style-guide/#/korean" target="_blank" rel="noopener">https://pablohpsilva.github.io/vuejs-component-style-guide/#/korean</a></p></blockquote><h3 id="필요하다면-컴포넌트-만들기"><a href="#필요하다면-컴포넌트-만들기" class="headerlink" title="필요하다면 컴포넌트 만들기"></a>필요하다면 컴포넌트 만들기</h3><ul><li>컴포넌트가 너무 크다면, 사용 및 유지보수가 어려울 수 있습니다.</li><li>컴포넌트가 너무 작다면, 프로젝트가 너무 커지고 컴포넌트간 통신이 어려울 수 있습니다.</li><li>확실하지 않다면 만들지마세요! “나중에 쓸모있는 컴포넌트”로 프로젝트를 오염시키지 마십시오. 그 컴포넌트는 영원히 사용하지 않을 수도 있습니다. 프로젝트의 컴포넌트와의 호환성의 복잡성을 피하기 위해 필요할 때 컴포넌트를 만드는게 좋습니다</li></ul><h2 id="컴포넌트-이름"><a href="#컴포넌트-이름" class="headerlink" title="컴포넌트 이름"></a>컴포넌트 이름</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 권장합니다 --&gt;</span><br><span class="line">&lt;app-header&gt;&lt;/app-header&gt;</span><br><span class="line">&lt;user-list&gt;&lt;/user-list&gt;</span><br><span class="line">&lt;range-slider&gt;&lt;/range-slider&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 피하세요! --&gt;</span><br><span class="line">&lt;btn-group&gt;&lt;/btn-group&gt; &lt;!-- 짧지만 발음할 수 없습니다. `button-group`으로 사용하는 것이 좋습니다. --&gt;</span><br><span class="line">&lt;ui-slider&gt;&lt;/ui-slider&gt; &lt;!-- 모든 컴포넌트는 UI 엘리먼트이기 때문에 의미가 없습니다. --&gt;</span><br><span class="line">&lt;slider&gt;&lt;/slider&gt; &lt;!-- 사용자 정의 엘리먼트 스펙을 준수하지 않았습니다. --&gt;</span><br></pre></td></tr></table></figure><h2 id="컴포넌트-props를-원시-자료형으로-사용하기"><a href="#컴포넌트-props를-원시-자료형으로-사용하기" class="headerlink" title="컴포넌트 props를 원시 자료형으로 사용하기"></a>컴포넌트 props를 원시 자료형으로 사용하기</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 권장합니다 --&gt;</span><br><span class="line">&lt;range-slider</span><br><span class="line">  :values=&quot;[10, 20]&quot;</span><br><span class="line">  min=&quot;0&quot;</span><br><span class="line">  max=&quot;100&quot;</span><br><span class="line">  step=&quot;5&quot;</span><br><span class="line">  :on-slide=&quot;updateInputs&quot;</span><br><span class="line">  :on-end=&quot;updateResults&quot;&gt;</span><br><span class="line">&lt;/range-slider&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 피하세요! --&gt;</span><br><span class="line">&lt;range-slider :config=&quot;complexConfigObject&quot;&gt;&lt;/range-slider&gt;</span><br></pre></td></tr></table></figure><h2 id="props-활용"><a href="#props-활용" class="headerlink" title="props 활용!"></a>props 활용!</h2><ul><li>props에 기본 값을 사용하세요.</li><li>값을 <a href="https://kr.vuejs.org/v2/guide/components.html#Prop-검증" target="_blank" rel="noopener">validate</a> 하기위해 <code>type</code> 옵션을 사용하세요.</li><li>중복된 <code>props</code>가 있는지 확인하세요.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;range&quot; v-model=&quot;value&quot; :max=&quot;max&quot; :min=&quot;min&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      max: &#123;</span><br><span class="line">        type: Number, // [1*] &apos;max&apos; prop은 Number로만 사용할 수 있습니다.</span><br><span class="line">        default() &#123; return 10; &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      min: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default() &#123; return 0; &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      value: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default() &#123; return 4; &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="컴포넌트-구조의-활용"><a href="#컴포넌트-구조의-활용" class="headerlink" title="컴포넌트 구조의 활용"></a>컴포넌트 구조의 활용</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template lang=&quot;html&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;Ranger__Wrapper&quot;&gt;</span><br><span class="line">    &lt;!-- ... --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    // 이름 적는 것을 잊지마세요</span><br><span class="line">    name: &apos;RangeSlider&apos;,</span><br><span class="line">    // compose new components</span><br><span class="line">    extends: &#123;&#125;,</span><br><span class="line">    // 컴포넌트 어트리뷰트 그룹</span><br><span class="line">    props: &#123;</span><br><span class="line">      bar: &#123;&#125;, // 알파벳순으로 정렬합니다</span><br><span class="line">      foo: &#123;&#125;,</span><br><span class="line">      fooBar: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    // 컴포넌트 변수 그룹</span><br><span class="line">    data() &#123;&#125;,</span><br><span class="line">    computed: &#123;&#125;,</span><br><span class="line">    // 컴포넌트가 다른 컴포넌트를 사용할 경우</span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">    // 컴포넌트 메서드 그룹</span><br><span class="line">    watch: &#123;&#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    // 컴포넌트 라이프사이클 메서드 그룹</span><br><span class="line">    beforeCreate() &#123;&#125;,</span><br><span class="line">    mounted() &#123;&#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .Ranger__Wrapper &#123; /* ... */ &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://pablohpsilva.github.io/vuejs-component-style-guide/#/korean" target="_blank" rel="noopener">https://pablohpsilva.github.io/vuejs-component-style-guide/#/korean</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>외부 네트워크에서 내 PC로 접속 가능하게 하기</title>
      <link href="/2017/12/07/etc/%EC%99%B8%EB%B6%80%EB%A7%9D%EC%97%90%EC%84%9C-%EB%82%B4PC%EC%A0%91%EC%86%8D%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C%ED%95%98%EA%B8%B0/"/>
      <url>/2017/12/07/etc/%EC%99%B8%EB%B6%80%EB%A7%9D%EC%97%90%EC%84%9C-%EB%82%B4PC%EC%A0%91%EC%86%8D%EA%B0%80%EB%8A%A5%ED%95%98%EA%B2%8C%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>NAT와 PAT를 알아야 하는데</p><p>NAT(Network address translation)은 <a href="https://ko.wikipedia.org/wiki/%EC%82%AC%EC%84%A4_%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC" target="_blank" rel="noopener">사설 네트워크</a>에 속한 여러 개의 호스트가 하나의 공인 IP 주소를 사용하여 <a href="https://ko.wikipedia.org/wiki/%EC%9D%B8%ED%84%B0%EB%84%B7" target="_blank" rel="noopener">인터넷</a>에 접속하기 위함으로, 사설 IP를 라우터에서 공인 IP주소로 바꿔준다.</p><p>PAT(Port Address trasnlation)는 한 개의 공인 IP주소와 여러 개의 사설 IP 주소를 포트번호를 사용하여 물린다. 공유기가 바로 이 PAT를 사용한 통신이다.</p><p><strong>그래서 어떻게 외부 망에서 내 PC로 접속 가능하게 하냐면.</strong></p><p>공유기 설정에 들어가서, 공유기 포워딩 기능을 활용하여</p><p>외부에서 공인 IP의 특정 포트로 접속하는 경우, 나의 사설 IP로 포워딩 해준다!</p><p>이때 DDNS(Dynamic Domain Name Service)를 활용하여, 유동 IP에 네이밍을 부여해줄 수 있다.(iptime에서 지원한다고 함)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>우동사 쫑형</p><p><a href="http://kentj.tistory.com/3" target="_blank" rel="noopener">http://kentj.tistory.com/3</a></p>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02. 컴포넌트</title>
      <link href="/2017/12/07/Vue/2.%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/"/>
      <url>/2017/12/07/Vue/2.%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</url>
      
        <content type="html"><![CDATA[<p>컴포넌트 만들기</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">  Vue.component(&apos;hello-component&apos;, &#123;</span><br><span class="line">    template : &apos;&lt;div&gt;hello world!!!&lt;/div&gt;&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;hello-component&gt;&lt;/hello-component&gt;</span><br><span class="line">    &lt;hello-component&gt;&lt;/hello-component&gt;</span><br><span class="line">    &lt;hello-component&gt;&lt;/hello-component&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="props-부모-gt-자식-에게-데이터-전달"><a href="#props-부모-gt-자식-에게-데이터-전달" class="headerlink" title="props : 부모 &gt; 자식 에게 데이터 전달"></a>props : 부모 &gt; 자식 에게 데이터 전달</h3><ul><li>기본 사용 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 컴포넌트를 아래와 같이 만들고.</span><br><span class="line">Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">  props: [&apos;message&apos;],</span><br><span class="line">  template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 이렇게 사용하면, 컴포넌트의 props 로 message 값이 전달되어 진다.</span><br><span class="line">&lt;child message=&quot;hello!&quot;&gt;&lt;/child&gt;</span><br></pre></td></tr></table></figure><ul><li>디폴트 값 + 데이터 검증</li></ul><p>아래처럼 props를 선언하면,  데이터 타입 및 validation check가 가능하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&apos;example&apos;, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    // basic type check (`null` means accept any type)</span><br><span class="line">    propA: Number,</span><br><span class="line">    // multiple possible types</span><br><span class="line">    propB: [String, Number],</span><br><span class="line">    // a required string</span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    // a number with default value</span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      default: 100</span><br><span class="line">    &#125;,</span><br><span class="line">    // object/array defaults should be returned from a</span><br><span class="line">    // factory function</span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: Object,</span><br><span class="line">      default: function () &#123;</span><br><span class="line">        return &#123; message: &apos;hello&apos; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // custom validator function</span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: function (value) &#123;</span><br><span class="line">        return value &gt; 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03. Vuex</title>
      <link href="/2017/12/07/Vue/3.%20vuex/"/>
      <url>/2017/12/07/Vue/3.%20vuex/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// counter 라는 state 속성을 추가</span></span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  parentCounter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.counter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  childCounter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.counter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">  </span><br><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  Parent counter : &#123;&#123; parentCounter &#125;&#125;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- Child.vue --&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">  Child counter : &#123;&#123; childCounter &#125;&#125;</span></span><br><span class="line"><span class="regexp">  &lt;!-- ... --&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>getters 사용</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js (Vuex)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    doubleCounter: <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state.counter * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  doubleCounter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.doubleCounter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line">computed: &#123;</span><br><span class="line">  doubleCounter() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.doubleCounter;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>mapGetters</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">computed: mapGetters(&#123;</span><br><span class="line">  parentCounter : <span class="string">'getCounter'</span> <span class="comment">// getCounter 는 Vuex 의 getters 에 선언된 속성 이름</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><blockquote><p>주의 mapGetters를 쓰면 다른 computed 속성과 사용 불가, ES6 문법 …을 사용해야 함.</p><p><a href="https://babeljs.io/docs/plugins/preset-stage-2/" target="_blank" rel="noopener">https://babeljs.io/docs/plugins/preset-stage-2/</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  ...mapGetters([</span><br><span class="line">    <span class="string">'getCounter'</span></span><br><span class="line">  ]),</span><br><span class="line">  anotherCounter() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>mutations</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    addCounter: <span class="function"><span class="keyword">function</span> (<span class="params">state, payload</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;!-- App.vue --&gt;</span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  Parent counter : &#123;&#123; parentCounter &#125;&#125; &lt;br&gt;</span><br><span class="line">  &lt;button @click=<span class="string">"addCounter"</span>&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ App.vue</span></span><br></pre></td></tr></table></figure><p>인자 넘길라면</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line">mutations: &#123;</span><br><span class="line">  <span class="comment">// payload 가 &#123; value : 10 &#125; 일 경우</span></span><br><span class="line">  addCounter: <span class="function"><span class="keyword">function</span> (<span class="params">state, payload</span>) </span>&#123;</span><br><span class="line">    state.counter = payload.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// App.vue</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  addCounter() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$store.commit(<span class="string">'addCounter'</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">this</span>.$store.commit(<span class="string">'addCounter'</span>, &#123;</span><br><span class="line">    value: <span class="number">10</span>,</span><br><span class="line">  arr: [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>]</span><br><span class="line">&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>mapMutations</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapMutations &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// Vuex 의 Mutations 메서드 명과 App.vue 메서드 명이 동일할 때 [] 사용</span></span><br><span class="line">  ...mapMutations([</span><br><span class="line">    <span class="string">'addCounter'</span></span><br><span class="line">  ]),</span><br><span class="line">  <span class="comment">// Vuex 의 Mutations 메서드 명과 App.vue 메서드 명을 다르게 매칭할 때 &#123;&#125; 사용</span></span><br><span class="line">  ...mapMutations(&#123;</span><br><span class="line">    addCounter: <span class="string">'addCounter'</span> <span class="comment">// 앞 addCounter 는 해당 컴포넌트의 메서드를, 뒤 addCounter 는 Vuex 의 Mutations 를 의미</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>actions : 비동기 처리시, mutations는 동기 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    addCounter: <span class="function"><span class="keyword">function</span> (<span class="params">state, payload</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state.counter++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    addCounter: <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// commit 의 대상인 addCounter 는 mutations 의 메서드를 의미한다.</span></span><br><span class="line">      <span class="comment">// 상태 변화 추적 위해, mutations의 메서드를 호출해야함.</span></span><br><span class="line">      <span class="keyword">return</span> context.commit(<span class="string">'addCounter'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">// 서버에서 가져올 데이터도 이곳에.</span></span><br><span class="line">    getServerData: <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> axios.get(<span class="string">"sample.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    delayFewMinutes: <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        commit(<span class="string">'addCounter'</span>);</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 인자 넘기기</span></span><br><span class="line">    asyncIncrement: <span class="function"><span class="keyword">function</span> (<span class="params">context, payload</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// payload 는 일반적으로 사용하는 인자 명</span></span><br><span class="line">      <span class="keyword">return</span> setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        context.commit(<span class="string">'increment'</span>, payload.by);</span><br><span class="line">      &#125;, payload.duration);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://joshua1988.github.io/images/posts/web/vuejs/vuex-3/vuex-actions.png" alt="vuex-actions"></p><ul><li>mapActions</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123;mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([</span><br><span class="line">      <span class="string">'asyncIncrement'</span>,</span><br><span class="line">      <span class="string">'asyncDecrement'</span></span><br><span class="line">    ])</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>knex의 Array 컨트롤</title>
      <link href="/2017/11/22/Node.js/knex-array%ED%83%80%EC%9E%85/"/>
      <url>/2017/11/22/Node.js/knex-array%ED%83%80%EC%9E%85/</url>
      
        <content type="html"><![CDATA[<ul><li>데이터 삽입</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> bglam_services (<span class="string">"possibleLanguages"</span>)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'&#123;5, 2, 6&#125;'</span>);</span><br><span class="line"><span class="comment">-- VALUES(ARRAY[5, 2, 6])</span></span><br></pre></td></tr></table></figure><ul><li>업데이트</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> bglam_services</span><br><span class="line"><span class="keyword">SET</span> <span class="string">"possibleLanguages"</span> = <span class="string">'&#123;1, 2, 3&#125;'</span></span><br><span class="line"><span class="comment">-- set "possibleLanguages" = ARRAY[1, 1, 1]</span></span><br><span class="line"><span class="comment">-- set "possibleLanguages"[1] = 3</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">875</span>;</span><br></pre></td></tr></table></figure><ul><li>데이터 조회</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>   <span class="string">"possibleLanguages"</span>[<span class="number">1</span>],</span><br><span class="line"><span class="string">"possibleLanguages"</span>[<span class="number">1</span>:<span class="number">2</span>] <span class="comment">-- 시작인덱스:끝인덱스</span></span><br><span class="line"><span class="keyword">FROM</span>     bglam_services;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> services</span><br><span class="line"><span class="keyword">WHERE</span> types &amp;&amp; <span class="string">'&#123;1,2,3&#125;'</span>;</span><br><span class="line"><span class="comment">-- WHERE 1 = ANY("possibleLanguages")</span></span><br></pre></td></tr></table></figure><p>&amp;&amp; 연산자는 두 배열 사이에서 겹치는게 하나라도 있으면 true를 반환</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/33335338/inserting-array-values" target="_blank" rel="noopener">https://stackoverflow.com/questions/33335338/inserting-array-values</a></p><p>배열 비교 연산자 : <a href="https://www.postgresql.org/docs/9.1/static/functions-array.html" target="_blank" rel="noopener">https://www.postgresql.org/docs/9.1/static/functions-array.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>쉐도우 돔(Shadow Dom)이란</title>
      <link href="/2017/10/29/Web/%EC%9B%B9%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80%EC%89%90%EB%8F%84%EC%9A%B0%EB%8F%94/"/>
      <url>/2017/10/29/Web/%EC%9B%B9%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EC%99%80%EC%89%90%EB%8F%84%EC%9A%B0%EB%8F%94/</url>
      
        <content type="html"><![CDATA[<p><strong>naver D2의 내용을 요약한 포스팅임을 미리 밝힙니다..^^ 문제시 말씀주시면 바로 삭제하겠습니다.</strong></p><h3 id="HTML의-한계"><a href="#HTML의-한계" class="headerlink" title="HTML의 한계"></a>HTML의 한계</h3><p>HTML 엘리먼트는 같은 요소라도 브라우저와 운영체제에 따라 다르게 보인다. 또한 HTML5 이외에도 다양한 엘리먼트가 필요하다.</p><p>그래서 JS 컴포넌트를 사용하기도 하지만, 적용이 힘들고 느리다.</p><h3 id="웹-컴포넌트"><a href="#웹-컴포넌트" class="headerlink" title="웹 컴포넌트"></a>웹 컴포넌트</h3><p>따라서 W3C에서는 이러한 이슈를 개선하고자 <strong>웹 컴포넌트 (Web Component)</strong>라는 명세를 만들었다. <strong>개발자가 자체적으로 HTML 엘리먼트를 만드는 기술</strong>이다.</p><h4 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h4><ol><li>컴포넌트를 캡슐화하여 쉽게 적용 가능</li><li>네이티브 엘리먼트로 동작하기 때문에 성능이 좋다.</li></ol><h3 id="구성"><a href="#구성" class="headerlink" title="구성"></a>구성</h3><p>구성은 템플릿(Templates), 데코레이터(Decorators), 커스텀 엘리먼트(Custom Element), 섀도 DOM(Shadow DOM)으로 되어 있다.</p><p>이 중에 쉐도우 DOM에 대해 정리해본다.</p><p><strong>템플릿</strong></p><p>구조 정의, 템플릿 안에 원하는 엘리먼트 구조를 만들면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"slide"</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;content select=<span class="string">"li"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">content</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;template&gt;</code> 태그 내 엘리먼트는 DOM 구조를 가지고 있지만 렌더링되지 않으며 리소스 파일(이미지)을 내려 받지 않는다.</p><p><strong>데코레이터</strong></p><p><code>&lt;decorator&gt;</code> 태그를 이용하여 엘리먼트를 오버라이드해 엘리먼트를 꾸밈. 템플릿 엘리먼트에 추가적인 구조를 만들고 <strong>스타일 지정</strong>할때 쓰인다.</p><blockquote><p>??????? 좀 이상한거 같다 스타일 지정이 어디에 있는거지</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;decorator id=<span class="string">"decorator-event-demo"</span>&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">h</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">            alert(event.target);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.listen(&#123;<span class="attr">selector</span>: <span class="string">"#b"</span>, <span class="attr">type</span>: <span class="string">"click"</span>, <span class="attr">handler</span>: h&#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">    &lt;template&gt;</span></span><br><span class="line"><span class="regexp">        &lt;content&gt;&lt;/</span>content&gt;</span><br><span class="line">        &lt;button id=<span class="string">"b"</span>&gt;Bar&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/decorator&gt;</span></span><br></pre></td></tr></table></figure><p><strong>커스텀 엘리먼트</strong></p><p>데코레이터와 유사해보이지만, 데코레이터는 스타일을 적용하는 것이라면 커스텀 엘리먼트는 개발자가 새로운 엘리먼트를 만드는 것과 같다.</p><blockquote><p>위에서는 데코레이터가 스타일 지정을 하지 않았는데?? 어쨌든 용도의 차이인건가</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;element name=<span class="string">"x-slide"</span> extends=<span class="string">"ul"</span> <span class="keyword">constructor</span>="SlideControl"&gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">        &lt;div class="slide"&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;content select="li"&gt;&lt;/content&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        SlideControl.prototype = &#123;</span><br><span class="line">            currentNum : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            lastNum : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.lifecycle(&#123;</span><br><span class="line">            created: <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>element&gt;</span><br></pre></td></tr></table></figure><p><code>&lt;element&gt; 태그의 속성</code></p><ol><li>name : 커스텀 엘리먼트 이름 지정</li><li>extends : 어떤 엘리먼트 확장했는지 지정</li><li>constructor : 스크립트로 커스텀 엘리먼트 생성시 사용</li></ol><p><strong>적용</strong></p><ol><li>파일로 위 커스텀 엘리먼트 저장후</li><li>링크에 적용</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"components"</span> href=<span class="string">"./slide-component.html"</span>&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>is 속성에 커스텀 엘리먼트의 name을 적으면 적용</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;x-slide is=<span class="string">"x-slide"</span>&gt;</span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/1.jpeg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"2.jpeg"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/x-slide&gt;</span></span><br></pre></td></tr></table></figure><h2 id="섀도-DOM"><a href="#섀도-DOM" class="headerlink" title="섀도 DOM"></a>섀도 DOM</h2><p>섀도우 DOM은 DOM의 구조를 가지고 있으나, 외부에 노출되지 않은 DOM을 말하며 DOM의 구조를 캡슐화할 때 사용한다.</p><blockquote><p>DOM 이란</p></blockquote><p>웹컴포넌트의 템플릿, 데코레이터, 커스텀 엘리먼트들은 모두 Shadow DOM으로 만들어진다</p><h3 id="특징-1"><a href="#특징-1" class="headerlink" title="특징"></a>특징</h3><ol><li>외부의 style은 적용되지 않는다.</li><li>섀도 DOM을 추가하거나 접근하기 위해서는 별도의 방법이 필요하다.</li><li><strong>데코레이터</strong>에서 만들어진 섀도우 돔은 스크립트로 접근, 수정 불가.</li><li><strong>커스텀 엘리먼트</strong>로 만들어진 섀도 돔은 스크립트로 수정 가능.</li><li>일반적인 DOM은 트리가 렌더링 된후 DOM트리가 수정되서 비용이 크지만, Shadow DOM은 <strong>Shadow Host</strong>를 만나는 순간 렌더링 되기 때문에 비용을 줄일 수 있다.</li></ol><p><img src="http://d2.naver.com/content/images/2015/06/helloworld-188655-3.png" alt="webcomponent3"></p><p>​ &lt;왼쪽이 일반적인 DOM 트리, 오른쪽이 섀도 DOM&gt;</p><p><img src="http://d2.naver.com/content/images/2015/06/helloworld-188655-5.png" alt="webcomponent5"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM 트리 코드</span></span><br><span class="line">&lt;x-slide is=<span class="string">"x-slide"</span>&gt;  <span class="xml"><span class="comment">&lt;!-- 쉐도우 호스트 --&gt;</span></span></span><br><span class="line">    &lt;li&gt;&lt;img src="/1.jpeg"&gt;&lt;/li&gt; &lt;!-- 쉐도우 호스트 차일드 --&gt;</span><br><span class="line">    &lt;li&gt;&lt;img src="2.jpeg"&gt;&lt;/li&gt;</span><br><span class="line">&lt;/x-slide&gt;</span><br><span class="line"></span><br><span class="line">// Shadow DOM 트리 코드</span><br><span class="line">&lt;element name="x-slide" extends="ul" constructor="SlideControl"&gt;</span><br><span class="line">    &lt;template&gt;</span><br><span class="line">        &lt;div class="slide"&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;content select="li"&gt;&lt;/content&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/element&gt;</span><br></pre></td></tr></table></figure><p><img src="http://d2.naver.com/content/images/2015/06/helloworld-188655-4.png" alt="webcomponent4"></p><h3 id="동작-방식"><a href="#동작-방식" class="headerlink" title="동작 방식"></a>동작 방식</h3><ol><li><p><code>Shadow host</code>, 코드로는 <code>x-slide</code> 엘리먼트를 <strong>만나는 순간</strong> Shadow Dom이 렌더링.</p></li><li><p><code>&lt;content&gt;</code> 엘리먼트를 이용하여 쉐도우 호스트 Child를 재배치.</p><p>select 속성의 CSS선택자를 통해서, content에 엘리먼트를 삽입한다.</p></li></ol><p><img src="http://d2.naver.com/content/images/2015/06/helloworld-188655-7.png" alt="webcomponent7"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://d2.naver.com/helloworld/188655" target="_blank" rel="noopener">http://d2.naver.com/helloworld/188655</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>image크기 반응형으로 만들기</title>
      <link href="/2017/10/29/CSS/image%ED%81%AC%EA%B8%B0-%EB%B0%98%EC%9D%91%ED%98%95%EC%9C%BC%EB%A1%9C%20%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
      <url>/2017/10/29/CSS/image%ED%81%AC%EA%B8%B0-%EB%B0%98%EC%9D%91%ED%98%95%EC%9C%BC%EB%A1%9C%20%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.main_image</span> &#123;</span></span><br><span class="line">        background-image: url("http://798beijing.com/wordpress/wp-content/uploads/2017/11/main.png");</span><br><span class="line">        background-size: cover;</span><br><span class="line">        background-repeat: no-repeat;</span><br><span class="line">      background-position: 50% 50%;</span><br><span class="line">      width: 100%;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main_image"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>express session 정리</title>
      <link href="/2017/10/24/Node.js/express-session/"/>
      <url>/2017/10/24/Node.js/express-session/</url>
      
        <content type="html"><![CDATA[<p>express-session과 connect-session-knex를 이용하여 세션관리를 하였다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> session = <span class="built_in">require</span>(<span class="string">'express-session'</span>);</span><br><span class="line"><span class="keyword">let</span> KSS = <span class="built_in">require</span>(<span class="string">'connect-session-knex'</span>)(session);</span><br><span class="line"></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">    <span class="comment">//resave: true,</span></span><br><span class="line">    secret: <span class="string">'abcd'</span>,</span><br><span class="line">    cookie: &#123;<span class="attr">secure</span>: <span class="literal">false</span>, <span class="attr">maxAge</span>: <span class="literal">null</span>&#125;,</span><br><span class="line">    store: <span class="keyword">new</span> KSS(&#123;<span class="attr">knex</span>: knex, <span class="attr">tablename</span>: <span class="string">'sessions'</span>&#125;)</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h4 id="session-options"><a href="#session-options" class="headerlink" title="session(options)"></a>session(options)</h4><p>세션 미들웨어를 생성한다. 세션 데이터는 쿠키가 아닌 서버사이드에 저장된다.</p><blockquote><p>cookie-parser가 없어도 동작하지만, 만약 있다면 secret을 일치시키는 것이 좋다.</p></blockquote><p>기본 서버 세션 저장소인 MemoryStore은 개발 환경을 위한 것.</p><p>&lt;프로퍼티&gt;</p><ul><li><p>cookie</p><p>maxAge : 만료 시간을 밀리초 단위로 설정</p><p>expires : 만료 날짜를 GMT 시간으로 설정(maxAge와 동시 등록시 마지막것 사용)</p><p>path : cookie의 경로 default “/“</p><p>domain : 지정한 도메인으로 쿠키값을 저장한다.</p><p>secure : https에서만 cookie 사용할 수 있도록 한다.(HTTPS여야만 작동)</p><p>httpOnly : 웹서버를 통해서만 cookie 접근할 수 있도록 한다</p><p>signed : cookie가 서명되어야 할 지를 결정한다.</p><p>sameSite : true/false 엄격하게 같은 사이트에서 쿠키를 사용할지.</p></li><li><p>genid</p></li></ul><p>지정된 함수로 세션아이디를 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(session(&#123;</span><br><span class="line">  genid: <span class="function"><span class="keyword">function</span>(<span class="params">req</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> genuuid()</span><br><span class="line">  &#125;,</span><br><span class="line">  secret: <span class="string">'keyboard cat'</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Node 모듈 cookieParser란 무엇인가</title>
      <link href="/2017/10/24/Node.js/cookieParser%EB%9E%80/"/>
      <url>/2017/10/24/Node.js/cookieParser%EB%9E%80/</url>
      
        <content type="html"><![CDATA[<p>요청된 쿠키를 쉽게 추출할 수 있도록 해주는 미들웨어.</p><p>request 객체에 cookies 속성이 부여된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express      = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> cookieParser = <span class="built_in">require</span>(<span class="string">'cookie-parser'</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line">app.use(cookieParser())</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Cookies: '</span>, req.cookies);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(<span class="number">8080</span>)</span><br></pre></td></tr></table></figure><p>아래와 같이 커맨드를 날리면 쿠키 값을 확인할 수 있다.</p><blockquote><p>$ curl <a href="http://127.0.0.1:8080" target="_blank" rel="noopener">http://127.0.0.1:8080</a> –cookie “Cho=Kim;Greet=Hello” </p></blockquote><ul><li>cookieParser(secret, options)</li></ul><blockquote><p>secret : signed 시키는 암호키로 string/array 형태 가능</p><p>options</p><p>maxAge : 만료 시간을 밀리초 단위로 설정</p><p>expires : 만료 날짜를 GMT 시간으로 설정</p><p>path : cookie의 경로 default “/“</p><p>domain : 도메인 네임 default “loaded”</p><p>secure : https에서만 cookie 사용할 수 있도록 한다.</p><p>httpOnly : 웹서버를 통해서만 cookie 접근할 수 있도록 한다</p><p>signed : cookie가 서명되어야 할 지를 결정한다.</p></blockquote><ul><li>res.cookie(쿠키명, 값, options)</li></ul><p>response(브라우저)에 쿠키 생성</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(<span class="string">'hasVisited'</span>, <span class="string">'1'</span>, &#123;</span><br><span class="line">    maxAge: <span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>,</span><br><span class="line">    httpOnly: <span class="literal">true</span>,</span><br><span class="line">    path:<span class="string">'/visitors'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>res.clearCookie(쿠키명, options)</li></ul><p>쿠키 제거, 경로를 지정했다면 options에 해당 경로를 넘겨 삭제할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.clearCookie(<span class="string">'hasVisited'</span>, &#123;<span class="attr">path</span>: <span class="string">'/visitors'</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.npmjs.com/package/cookie-parser" target="_blank" rel="noopener">https://www.npmjs.com/package/cookie-parser</a></p><p><a href="http://cinema4dr12.tistory.com/838" target="_blank" rel="noopener">http://cinema4dr12.tistory.com/838</a></p><p><a href="http://nujabes403.blogspot.kr/2015/03/express-middleware-cookie-parser.html" target="_blank" rel="noopener">http://nujabes403.blogspot.kr/2015/03/express-middleware-cookie-parser.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08. Prototype과 상속</title>
      <link href="/2017/10/22/Javascript/8.%EC%83%81%EC%86%8D/"/>
      <url>/2017/10/22/Javascript/8.%EC%83%81%EC%86%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="Prototype-이란"><a href="#Prototype-이란" class="headerlink" title="Prototype 이란"></a>Prototype 이란</h3><p>해당 객체의 인스턴스가 가져야할 프로퍼티/메서드를 <strong>모든 인스턴스 전체에서 공유</strong>하는 것.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Hi"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.sayName();</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p2.sayName();</span><br><span class="line"><span class="built_in">console</span>.log(p1.sayName == p2.sayName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Prototype은-어떻게-동작하는가"><a href="#Prototype은-어떻게-동작하는가" class="headerlink" title="Prototype은 어떻게 동작하는가?"></a>Prototype은 어떻게 동작하는가?</h3><p><strong>함수 생성시</strong></p><ol><li>함수 생성시마다 Prototype property 생성</li><li>자동으로 constructor 프로퍼티 가짐</li><li>각종 프로퍼티와 메서드가 프로토 타입에 추가된다.</li></ol><blockquote><p>constructor에는 해당 프로토타입을 생성한 생성자가 들어있다.</p></blockquote><p><strong>인스턴스 생성시</strong></p><p>생성자의 프로토타입을 가리키는 포인터 생성(<em>\</em>proto__)</p><blockquote><p><em>\</em>proto__ 는 프로토타입이 들어있고, 생성자 자체를 찾아가려면 프로토타입의 constructor를 조회하면 된다.</p></blockquote><p><img src="https://i.imgur.com/wltMdzk.png" alt="img"></p><p><strong>프로토타입의 변수 검색</strong></p><ol><li>해당 인스턴스 내의 변수를 검색한다.</li><li>없으면 <em>\</em>proto__를 통해 프로토타입 내의 변수를 검색한다.</li></ol><p><strong>프로토타입의 프로퍼티들은 공유 된다.</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">"Hi"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p1.name <span class="comment">// Hi</span></span><br><span class="line">p2.name <span class="comment">// Hi</span></span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"kk"</span>;</span><br><span class="line">p1.name <span class="comment">// kk</span></span><br><span class="line"></span><br><span class="line">p1.name = <span class="string">'lala'</span>; <span class="comment">// 공유가 끊긴다.</span></span><br></pre></td></tr></table></figure><p>프로토타입을 수정하면, 인스턴스의 변수들 또한 수정되는 것을 확인할 수 있다.</p><p><strong>객체 인스턴스에서는 프로토타입 수정 불가</strong></p><p>p1.name을 바꿔도 prototype은 수정되지 않는다. p1.name은 프로토타입과 연결이 되어있었지만, 새로운 값을 할당하면서 이제 둘 사이의 연결이 끊긴다. 이 연결은 <code>p1.name = null;</code>으로 해도 다시 돌아오지 않는다. <code>delete p1.name;</code>을 해야 다시 접근이 가능하다.</p><h3 id="Prototype의-객체-literal-선언"><a href="#Prototype의-객체-literal-선언" class="headerlink" title="Prototype의 객체 literal 선언"></a>Prototype의 객체 literal 선언</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name: <span class="string">"junho"</span>,</span><br><span class="line">  sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person();</span><br><span class="line">friend.consturctor == Person <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>위와 같이 프로토타입을 초기화할 수도 있다.</p><blockquote><p>그러나, constructor값이 Object가 되어 버린다. Person으로 되야하는데..</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">  <span class="keyword">constructor</span> : Person</span><br><span class="line">    name: "junho",</span><br><span class="line">  sayName : function() &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 그러나 이러면 constructor의 [[Enumerable]] 속성이 true로 지정됌</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// defineProperty를 활용하자.</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(Person.prototype, <span class="string">"constructor"</span>, &#123; <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">value</span>: Person &#125;);</span><br></pre></td></tr></table></figure><p>그리고 위에서 설명했듯이 인스턴스와 프로토타입은 공유되고 있어, 프로토타입이 바뀌면 즉시 인스턴스에도 반영이 되지만.</p><p><strong>리터럴을 사용하면, 이전 인스턴스들과의 공유가 끊어진다!</strong></p><p><code>Person.prototype = { ... }</code> 을 통해서 프로토타입을 덮어 쒸우면, 새로운 prototype이 생성되서 이전에 생성한 인스턴스와의 공유가 끊어진다.</p><blockquote><p>하지만, 프로토타입을 사용하면 프로퍼티들이 무조건 공유되는데 공유하기 싫을 때는 어떻게 해야하나? 생성자 패턴과 합쳐버리면 된다.</p></blockquote><h3 id="생성자-패턴-프로토타입패턴"><a href="#생성자-패턴-프로토타입패턴" class="headerlink" title="생성자 패턴 + 프로토타입패턴"></a>생성자 패턴 + 프로토타입패턴</h3><ol><li>생성자 패턴으로 비공유 인스턴스 프로퍼티를 만든다.</li><li>프로토타입으로 메서드 + 공유프로퍼티 정의한다.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">"Sunhak"</span>, <span class="string">"Jiwon"</span>, <span class="string">"JungHyun"</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : Person,</span><br><span class="line">  sayName : function() &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"junho"</span>);</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"sunhak"</span>);</span><br><span class="line"><span class="comment">// name과 friends는 공유되지 않는다.</span></span><br></pre></td></tr></table></figure><blockquote><p>그런데 좀 귀찮다… 모든 정보를 생성자 내부에서 초기화해뻐릴 수 없을까?</p></blockquote><h3 id="종속적-프로토타입-패턴"><a href="#종속적-프로토타입-패턴" class="headerlink" title="종속적 프로토타입 패턴"></a>종속적 프로토타입 패턴</h3><p>모든 정보를 생성자 내부에서 초기화해보자!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.friends = [<span class="string">"Sunhak"</span>, <span class="string">"Jiwon"</span>, <span class="string">"JungHyun"</span>];</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">"function"</span>) &#123;</span><br><span class="line">        Person.prototype.sayName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Person.prototype.sayName</code> 은 생성자가 첫번째로 호출된 다음에만 실행된다. if문을 프로퍼티마다 만들 필요 없이 한 if문에 모든 prototype 초기화를 해주면 된다.</p><h3 id="방탄-생성자-패턴"><a href="#방탄-생성자-패턴" class="headerlink" title="방탄 생성자 패턴"></a>방탄 생성자 패턴</h3><p>this, new 사용금지 환경에서 사용, private의 get/set함수와 비슷하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(name) &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = Person(<span class="string">"hi"</span>);</span><br><span class="line">friend.sayName(); <span class="comment">// hi</span></span><br></pre></td></tr></table></figure><h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><p>본격적으로 prototype을 이용하여 상속을 받아보자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.property = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.getSuperValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.property;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.subproperty = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.getSubValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.subproperty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">alert(instance.getSuperValue());</span><br><span class="line"></span><br><span class="line">instance <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line">instance <span class="keyword">instanceof</span> SuperType <span class="comment">// true</span></span><br><span class="line">instance <span class="keyword">instanceof</span> SubType <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.isPrototypeOf(instance); <span class="comment">// true</span></span><br><span class="line">SuperType.prototype.isPrototypeOf(instance); <span class="comment">// true</span></span><br><span class="line">SubType.prototype.isPrototypeOf(instance); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/Ai1TpCx.png" alt="img"></p><p><strong>변수 검색</strong></p><p>위에서 말한것처럼 property 검색시 인스턴스 -&gt; SubType -&gt; SuperType 순서대로 프로퍼티를 검색해 나간다. 상위 프로토타입으로 올라갈때는 프로토타입체인 <code>__proto__</code> 를 이용한다.</p><blockquote><p>다시 또 문제점이 있다. 상속받으면 공유된다. 위의 프로토타입 패턴에서 처럼, 공유하고 싶지 않은 변수들을 어떻게 처리해야할지 생각해봐야 한다.</p></blockquote><h3 id="생성자-훔치기"><a href="#생성자-훔치기" class="headerlink" title="생성자 훔치기"></a>생성자 훔치기</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   SuperType.call(<span class="keyword">this</span>, <span class="string">"junho"</span>); <span class="comment">// 이 코드가 핵심!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">instance.colors.push(<span class="string">"black"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance.colors); <span class="comment">// red blue black</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance2.colors.push(<span class="string">"green"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(instance.colors); <span class="comment">// red blue green</span></span><br></pre></td></tr></table></figure><p>SuperType 생성자를 새로 생성한 SubType 인스턴스 컨텍스트에서 호출하기 때문에 자신만의 colors 프로퍼티를 갖게 된다.</p><blockquote><p>문제는… 공유해도 되는 함수의 경우 다시 새롭게 생성이 돼서 메모리 낭비가 생긴다는 거다. 공유할 프로퍼티와 그렇지 않을 프로퍼티를 구별할 수 있을까?</p></blockquote><h3 id="조합-상속"><a href="#조합-상속" class="headerlink" title="조합 상속"></a>조합 상속</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name); <span class="comment">// 공유하고 싶지 않은 코드</span></span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 공유할 함수</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType(<span class="string">"Junho"</span>, <span class="number">28</span>);</span><br><span class="line">alert(instance.getSuperValue());</span><br></pre></td></tr></table></figure><p>자신만의 고유 프로퍼티와 메서드를 공유할 수 있다.</p><blockquote><p>근데 상속을 위한 생성자 함수를 좀 심플하게 만들 수는 없을까?</p></blockquote><h3 id="프로토타입-상속"><a href="#프로토타입-상속" class="headerlink" title="프로토타입 상속"></a>프로토타입 상속</h3><p>생성자 함수를 쓰지 않고 상속을 구현해보자.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">"hi"</span>,</span><br><span class="line">  friends : [<span class="string">"junho"</span>, <span class="string">"sunhak"</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anotherPerson = object(person);</span><br><span class="line">anotherPerson.name = <span class="string">"hi"</span>;</span><br><span class="line">anotherPerson.friends.push(<span class="string">"bil"</span>); </span><br><span class="line"><span class="keyword">var</span> anotherPerson2 = object(person);</span><br><span class="line">anotherPerson2.name = <span class="string">"ho"</span>;</span><br><span class="line">anotherPerson2.friends.push(<span class="string">"ho"</span>);</span><br><span class="line"></span><br><span class="line">anotherPerson <span class="comment">// ["junho", "sunhak", "bil", "ho"]</span></span><br><span class="line">anotherPerson2 <span class="comment">// ["junho", "sunhak", "bil", "ho"]</span></span><br></pre></td></tr></table></figure><p>object 함수에서 자체적으로 생성자 함수를 만들고 prototype에 할당 후 리턴해준다.</p><p>ES5에는 위와 같은 패턴을 <code>Object.create</code> 를 통해서 적용할 수 있다.</p><blockquote><p>Object.create(프로토타입이 될 객체, 추가할 프로퍼티 객체)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">"hi"</span>, <span class="attr">friends</span> : [<span class="string">"hi"</span>, <span class="string">"ho"</span>] &#125;</span><br><span class="line"><span class="comment">// p1, p2는 person 객체를 공유하게 된다.</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Object</span>.create(person);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Object</span>.create(person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="built_in">Object</span>.create(person, &#123; <span class="attr">name</span> : &#123; <span class="attr">value</span> : <span class="string">"Gre"</span>&#125; &#125;)</span><br><span class="line"><span class="comment">// 두번째 파라미터는 Object.defineProperties와 유사하다.</span></span><br></pre></td></tr></table></figure><h3 id="기생-상속"><a href="#기생-상속" class="headerlink" title="기생 상속"></a>기생 상속</h3><p>객체를 확장해서 반환</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// object 함수 생략</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">original</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> clone = object(original);</span><br><span class="line">  clone.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'hi'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"junho"</span>,</span><br><span class="line">  friends: [<span class="string">"She"</span>, <span class="string">"junho"</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anotherPerson = createAnother(person);</span><br><span class="line">anotherPerson.sayHi();</span><br></pre></td></tr></table></figure><p>anotherPerson객체는 person의 프로퍼티와 메서드를 상속하며 sayHi() 메서드를 추가로 가진다.</p><h4 id="기생-조합-상속"><a href="#기생-조합-상속" class="headerlink" title="기생 조합 상속"></a>기생 조합 상속</h4><p>조합상속은 JS에서 자주 쓰이지만, 비효율 적인 면이 있음(상위 타입 생성자가 항상 두번 호출됌-? 무슨 말이지)</p><ol><li>하위 타입의 프로토타입을 생성하기 위해</li><li>하위 타입 생성자 내부에서.</li></ol><p>하위 타입의 프로토타입은 상위 타입 객체의 인스턴스 프로퍼티를 모두 상속, 하위 타입 생성자 실행시 모두 덮어씀. 두번 실행 별의미가 없음.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.protoype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name); <span class="comment">// SuperType 두번째 호출</span></span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.protoype = <span class="keyword">new</span> SuperType(); <span class="comment">// 처음 호출</span></span><br><span class="line">SuperType.protoype.consturctor = SubType;</span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>name과 colors프로퍼티는 인스턴스에도 존재, SubType 프로토타입에도 존재. 하위타입의 프로토타입을 할당하기 위해 상위 타입의 생성자를 호출할 필요는 없다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">subType, superType</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prototype = object(superType.prototype);</span><br><span class="line">  prototype.constructor = subType;</span><br><span class="line">  subType.prototype = protoType;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SuperType.protoype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    SuperType.call(<span class="keyword">this</span>, name);</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inheritPrototype(SubType, SuperType);</span><br><span class="line"></span><br><span class="line">SubType.prototype.sayAge = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.age);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol><li>상위 타입의 프로토타입을 복제</li><li>consturctor 프로퍼티를 prototype에 할당하여, 기본 constructor 사라지는 현상 대비</li><li>하위타입의 프로토타입에 새로 생성한 객체를 할당</li></ol><p>SuperType 생성자를 단 한 번만 호출하므로 SubType.prototype에 불필요하고 사용하지 않는 프로퍼티를 만들지 않았다는 점에서 효과적. 포로토타입 체인이 온전히 유지되므로 instanceof와 isPrototypeOf() 메서드로 정상 작동.</p><p>가장 효율적인 상속 패러다임으로 평가.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>프론트엔드 개발자를 위한 Javascript - 니콜라스 자카스</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>transition, transform, animation - 박스 굴리기</title>
      <link href="/2017/10/09/CSS/trainstion-transform/"/>
      <url>/2017/10/09/CSS/trainstion-transform/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123;</span></span><br><span class="line">    border-style: solid;</span><br><span class="line">    border-width: 1px;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#0000FF</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-transition</span><span class="selector-pseudo">:width</span> 2<span class="selector-tag">s</span>, <span class="selector-tag">height</span> 2<span class="selector-tag">s</span>, <span class="selector-tag">background-color</span> 2<span class="selector-tag">s</span>, <span class="selector-tag">-webkit-transform</span> 2<span class="selector-tag">s</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">transition</span><span class="selector-pseudo">:width</span> 2<span class="selector-tag">s</span>, <span class="selector-tag">height</span> 2<span class="selector-tag">s</span>, <span class="selector-tag">background-color</span> 2<span class="selector-tag">s</span>, <span class="selector-tag">transform</span> 2<span class="selector-tag">s</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#FFCCCC</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">-webkit-transform</span><span class="selector-pseudo">:rotate(180deg)</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">transform</span><span class="selector-pseudo">:rotate(180deg)</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>아래 박스는 width, height, background-color, transform을 위한 트랜지션을 결합합니다. 박스 위에 마우스를 올려 속성들의 애니메이션을 보세요.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><style>.box {    border-style: solid;    border-width: 1px;    display: block;    width: 100px;    height: 100px;    background-color: #0000FF;    -webkit-transition:width 2s, height 2s, background-color 2s, -webkit-transform 2s;    transition:width 2s, height 2s, background-color 2s, transform 2s;}.box:hover {    background-color: #FFCCCC;    width:200px;    height:200px;    -webkit-transform:rotate(180deg);    transform:rotate(180deg);}</style><pre><code>&lt;p&gt;아래 박스는 width, height, background-color, transform을 위한 트랜지션을 결합합니다. 박스 위에 마우스를 올려 속성들의 애니메이션을 보세요.&lt;/p&gt;&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;</code></pre><blockquote><p>block, inline-block 요소여야 하는 걸로 추정된다.</p></blockquote><h3 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h3><p>애니메이션을 실행할 시간을 지정할 수 있음.</p><p><code>-webkit-transition:width 2s, height 2s, background-color 2s, -webkit-transform 2s;</code></p><p>다음처럼, 높이/넓이, 배경색, 이동에 대한 transition 값을 지정해 주었음.</p><ul><li>추가적인 속성 정리 예정</li></ul><h3 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h3><p>객체를 움직인다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transform: rotate(90deg); // 회전</span><br><span class="line">transform: skewx(10deg) translatex(150px); // 비틀고 옮긴다.</span><br><span class="line">transform-origin: bottom left; // 초기 위치</span><br></pre></td></tr></table></figure><h3 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h3><p>참고 : <a href="https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation3" target="_blank" rel="noopener">https://www.w3schools.com/css/tryit.asp?filename=trycss3_animation3</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> example &#123;</span><br><span class="line">    0%   &#123;<span class="attribute">background-color</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">    25%  &#123;<span class="attribute">background-color</span>:yellow; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">0px</span>;&#125;</span><br><span class="line">    50%  &#123;<span class="attribute">background-color</span>:blue; <span class="attribute">left</span>:<span class="number">200px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">    75%  &#123;<span class="attribute">background-color</span>:green; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">    100% &#123;<span class="attribute">background-color</span>:red; <span class="attribute">left</span>:<span class="number">0px</span>; <span class="attribute">top</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">-webkit-animation-name</span>: example; <span class="comment">/* Safari 4.0 - 8.0 */</span></span><br><span class="line">    <span class="attribute">-webkit-animation-duration</span>: <span class="number">4s</span>; <span class="comment">/* Safari 4.0 - 8.0 */</span></span><br><span class="line">    <span class="attribute">animation-name</span>: example;</span><br><span class="line">    <span class="attribute">animation-duration</span>: <span class="number">4s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Window 내장객체</title>
      <link href="/2017/10/09/Javascript/window-%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/"/>
      <url>/2017/10/09/Javascript/window-%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/</url>
      
        <content type="html"><![CDATA[<h4 id="프로퍼티"><a href="#프로퍼티" class="headerlink" title="프로퍼티"></a>프로퍼티</h4><h4 id="length"><a href="#length" class="headerlink" title="length"></a>length</h4><p>창안의 프레임수</p><h4 id="self-window"><a href="#self-window" class="headerlink" title="self/window"></a>self/window</h4><h4 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h4><h2 id="이벤트"><a href="#이벤트" class="headerlink" title="이벤트"></a>이벤트</h2><h4 id="onload"><a href="#onload" class="headerlink" title="onload"></a>onload</h4><p>문서를 읽을때, 실행된다.</p><h4 id="onbeforeunload"><a href="#onbeforeunload" class="headerlink" title="onbeforeunload"></a>onbeforeunload</h4><p>브라우저 창을 닫거나, 다른 주소로 이동하면 실행되는 이벤트, <em>크롬에서는 보안상의 이유로 작동하지 않는다.</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> dialogText = <span class="string">'Dialog text here'</span>;</span><br><span class="line">  e.returnValue = dialogText;</span><br><span class="line">  <span class="keyword">return</span> dialogText;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="onblur"><a href="#onblur" class="headerlink" title="onblur"></a>onblur</h4><p>브라우저가 포커스를 잃을 때 실행되는 이벤트, 탭 전환시, alt+tab 시에도 적용된다.</p><h4 id="onfocus"><a href="#onfocus" class="headerlink" title="onfocus"></a>onfocus</h4><p>브라우저가 포커스를 얻을때 실행되는 이벤트, 탭 전환시, alt+tab 시에도 적용된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Html5 Boilerplate</title>
      <link href="/2017/10/08/Frontend/html5-boilerplate/"/>
      <url>/2017/10/08/Frontend/html5-boilerplate/</url>
      
        <content type="html"><![CDATA[<p>웹스톰 새프로젝트 만들다가 보았는데.</p><p>웹개발의 필수적인 요소만 모아둔 프로젝트인듯 하다.</p><blockquote><p>git clone <a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="noopener">https://github.com/h5bp/html5-boilerplate</a></p></blockquote><p><strong>index.html</strong></p><ul><li>X-UA-COMPATIBLE, IE=edge : 호환성 보기 제거</li></ul><ul><li>jquery loading fallback : CDN 사용 실패하면 나의 jquery 사용</li></ul><ul><li>Google Analytics 비동기 로드 최적화</li></ul><p><strong>main.css, normailze.css</strong></p><ul><li>HTML5 요소를 지원하지 않는 브라우저를 위한 표시 처리</li><li>IOS 방향 변경시 텍스트 조정</li><li>모바일 사용자 줌기능 방지 처리</li><li>폼 요소 표시 최적화 </li></ul><p><strong>modernizr</strong></p><ul><li>html5, css3의 기능을 사용할 수 있는지 여부 테스트. 결과를 html 태그의 클래스 이름으로 설정해주는 라이브러리</li></ul><p><strong>etc</strong></p><ul><li>웹 크롤러제어/flash용 크로스 도메인 정책/humans.txt</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="noopener">https://github.com/h5bp/html5-boilerplate</a></p><p><a href="https://www.slideshare.net/UyeongJu/html5-boilerplate-22608784" target="_blank" rel="noopener">https://www.slideshare.net/UyeongJu/html5-boilerplate-22608784</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06. Ionic2 Event</title>
      <link href="/2017/10/03/Ionic/6.%20Ionic-event/"/>
      <url>/2017/10/03/Ionic/6.%20Ionic-event/</url>
      
        <content type="html"><![CDATA[<p>앵귤러2의 이벤트 바인딩에는 여러가지가 있지만. 안드로이드에서 실행하면 특히 keypress, ngModelChange, change 들이 잘 동작하지 않는다.</p><p>이때 <code>ionChange</code>를 활용하면된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;ion-datetime displayFormat=<span class="string">"YYYY.MM.DD"</span> [(ngModel)]=<span class="string">"endDate"</span> (ionChange)=<span class="string">"dateChange()"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">ion-datetime</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://ionicframework.com/docs/native/local-notifications/" target="_blank" rel="noopener">https://ionicframework.com/docs/native/local-notifications/</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>스크롤바 애매하게 남아있을 때</title>
      <link href="/2017/09/26/CSS/%EC%8A%A4%ED%81%AC%EB%A1%A4%EB%B0%94%20%EC%95%A0%EB%A7%A4%ED%95%98%EA%B2%8C%20%EB%82%A8%EC%95%84%EC%9E%88%EC%9D%84%EB%95%8C/"/>
      <url>/2017/09/26/CSS/%EC%8A%A4%ED%81%AC%EB%A1%A4%EB%B0%94%20%EC%95%A0%EB%A7%A4%ED%95%98%EA%B2%8C%20%EB%82%A8%EC%95%84%EC%9E%88%EC%9D%84%EB%95%8C/</url>
      
        <content type="html"><![CDATA[<p>더 멋지게 처리하는 방법을 아시면 댓글 남겨주세요</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.transparent-scrollbar-container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow-y</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.transparent-scrollbar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transparentt-scrollbar-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"transparent-scrollbar"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/16670931/hide-scroll-bar-but-while-still-being-able-to-scroll" target="_blank" rel="noopener">https://stackoverflow.com/questions/16670931/hide-scroll-bar-but-while-still-being-able-to-scroll</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06. Javascript 정규표현식:내장객체</title>
      <link href="/2017/09/23/Javascript/6.%20javascript-RegExp%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/"/>
      <url>/2017/09/23/Javascript/6.%20javascript-RegExp%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="선언방법"><a href="#선언방법" class="headerlink" title="선언방법"></a>선언방법</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/pattern/gi</span>;</span><br><span class="line"><span class="keyword">var</span> pattern2 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"패턴"</span>, <span class="string">"플래그"</span>);</span><br></pre></td></tr></table></figure><p><code>/</code>로 둘러 쓰고 정규표현식을 입력하면 리터럴로 입력 된다.</p><p><code>() [] {} ^ $ |</code> 과 같은 특수기호(메타문자)를 ‘문자’로서 입력하려면 <code>\</code> 역슬러시를 사용하여 입력한다.</p><h3 id="리터럴-VS-문자열"><a href="#리터럴-VS-문자열" class="headerlink" title="리터럴 VS 문자열"></a>리터럴 VS 문자열</h3><table><thead><tr><th>리터럴</th><th>문자열로 입력</th></tr></thead><tbody><tr><td>/\[bc]\]at/</td><td>“\\[bc\\]at”</td></tr><tr><td>/\w\\hello\\123/</td><td>“\\w\\hello\\\\123/“</td></tr></tbody></table><p>문자열 내부에서 특수기호를 입력할때는,  <code>\</code> 를 한 번 더 입력해줘야 한다. 문자열 자체에서도 메타문자를 인식하기 때문에, 그것을 한 번 더 escape한다고 생각하면 될듯.</p><h3 id="플래그"><a href="#플래그" class="headerlink" title="플래그"></a>플래그</h3><p>g : 전역모드</p><p>i : 대소문자 구분</p><p>m : 검사 대상의 첫문자를 뜻하는 <code>$</code>, 와 마지막 문자를 뜻하는  <code>^</code>를 각 행에 적용</p><h3 id="특수기호-메타-문자"><a href="#특수기호-메타-문자" class="headerlink" title="특수기호(메타 문자)"></a>특수기호(메타 문자)</h3><p><img src="https://i.imgur.com/M6PjUz7.png" alt="img"></p><ul><li><code>.{n, m}</code> : 글자수 적어도 n개 이상~m개 이하</li><li><code>()</code> : match를 수행해서 나온 결과를 기억한다. (아래에서 자세히 설명)</li><li><code>(?=.*[0-9])</code> : 숫자가 적어도 하나는 있어야</li><li><code>^()$</code> :</li><li><code>?!.*</code> : 없어야 하는것.</li><li><code>?=.*</code> :  있어야 하는것</li><li><code>?:</code> :  그룹이 아님</li></ul><blockquote><p>JS에선 (?i) 지원하지 않음</p></blockquote><h3 id="응용"><a href="#응용" class="headerlink" title="응용"></a>응용</h3><ul><li>비밀번호 체크 : 숫자, 소문자, 대문자, 특수문자로 구성된 5~10 자리 비밀번호.</li></ul><p><code>/(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%^&amp;+=])(?=\S+$).{5,10}/</code></p><ul><li>동영상 확장자 체크</li></ul><p><code>/^(mp4 |mov|wmv|3gp|flv|avi|mpg|mpeg|mpe|asf|asx|rm|mkv|webm|ogg|ogv|yuv|amv|m4p|m4v)$/</code></p><ul><li>양의 정수</li></ul><p><code>/^[1-9][0-9]*$/</code></p><h2 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h2><ul><li><strong>test()</strong></li></ul><p>검사 패턴의 결과로 true/false를 리턴한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/at/g</span>; <span class="comment">// 모든 at에 일치</span></span><br><span class="line">pattern1.test(<span class="string">"bat cat sommat"</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>exec()</strong></li></ul><p>검사 패턴에 일치하는 문자열 배열을 반환한다. <code>()?</code> 그룹을 사용하여 묶어서 사용한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> matches = <span class="regexp">/mom( and dad( and baby)?)?/gi</span>.exec(<span class="string">"mom and dad and baby xx"</span>);</span><br><span class="line">matches.index; <span class="comment">// 0</span></span><br><span class="line">matches.input; <span class="comment">// mom and dad and baby xx</span></span><br><span class="line">matches[<span class="number">0</span>]; <span class="comment">// 패턴에 일치하는 부분 전체 mom and dad and baby</span></span><br><span class="line">matches[<span class="number">1</span>]; <span class="comment">// 그룹1 and dad and baby</span></span><br><span class="line">matches[<span class="number">2</span>]; <span class="comment">// 그룹2 and baby</span></span><br></pre></td></tr></table></figure><h2 id="프로퍼티"><a href="#프로퍼티" class="headerlink" title="프로퍼티"></a>프로퍼티</h2><p>현재 컨텍스트의 최근 정규표현식 관련 정보를 가져올 수 있다.</p><ul><li>RegExp.input : 최근 입력</li><li>RegExp.lastMatch : 패턴에 일치하는 정보</li><li>RegExp.leftContext : 패턴의 왼쪽 정보</li><li>RegExp.rightContext : 패턴의 오른쪽 정보</li></ul><h2 id="유용한-사이트"><a href="#유용한-사이트" class="headerlink" title="유용한 사이트"></a>유용한 사이트</h2><p><a href="https://regexr.com/" target="_blank" rel="noopener">https://regexr.com/</a> : 결과 확인할때</p><p><a href="https://regexper.com" target="_blank" rel="noopener">https://regexper.com</a> : 표현식 시각화</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>프론트엔드 개발자를 위한 자바스크립트 - 니콜라스 자칼스</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>수정한 npm_module 사용하기</title>
      <link href="/2017/09/22/etc/%EC%9E%90%EC%8B%A0%EC%9D%98-npmmodule-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/"/>
      <url>/2017/09/22/etc/%EC%9E%90%EC%8B%A0%EC%9D%98-npmmodule-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>맘에 드는 npm_module을 수정하고 사용하고 싶을때..</p><ol><li>해당 git repository를 fork 한다</li><li>수정한다.</li><li>pacakge.json에 다음과 같이 등록</li></ol><blockquote><p>npm install <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><username>/<repository>/tarball/master –save</repository></username></p></blockquote><p>/tarball 이라는것으로 해야 한다. 그래야 gz파일이라는 걸로 다운받아지면서 설치가 가능함.</p><p>내가 수정한 knex-logger</p><p><a href="https://github.com/skout90/knex-logger" target="_blank" rel="noopener">https://github.com/skout90/knex-logger</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/13300137/how-to-edit-a-node-module-installed-via-npm" target="_blank" rel="noopener">https://stackoverflow.com/questions/13300137/how-to-edit-a-node-module-installed-via-npm</a></p>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.1. Function 내장객체</title>
      <link href="/2017/09/10/Javascript/5.1.%20javascript-Function%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/"/>
      <url>/2017/09/10/Javascript/5.1.%20javascript-Function%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h3><ul><li>arguments <em>(표준에서 제거 됌)</em></li></ul><p>함수 내부에서, 매개변수에 접근하게 하는 속성</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(g.arguments[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">g(<span class="number">1</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>arguments.callee()</li></ul><p>자신을 호출한다. 재귀함수를 사용할때 함수 이름 의존성 문제를 해결 할 수 있음.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> trueFactorial = factorial;</span><br><span class="line">factorial = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;;</span><br><span class="line"></span><br><span class="line">trueFactorial(<span class="number">5</span>); <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><p>만약 calle를 안썼다면, 값은 0이 될것이다.</p><ul><li>caller</li></ul><p>현재 실행중인 함수를 호출한 함수.</p><ul><li>length</li></ul><p>함수 매개변수의 수</p><ul><li>Function.prototype.constructor</li></ul><p>함수를 생성하면, 함수 + 그 함수의 prototype 생성하게 되는데, prototype.constructor는 생성된 함수를 가리키고 있다.(실제로 무한루프다.)</p><p><img src="https://cdn-images-1.medium.com/max/1000/1*PZe_YnLftVZwT1dNs1Iu0A.png" alt="img"></p><h3 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h3><ul><li>Function.prototype.apply()</li></ul><blockquote><p> 함수.apply(this로 사용될 객체/값, 함수에 전달할 인자집합(배열))</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">v1</span>:<span class="number">1</span>, <span class="attr">v2</span>:<span class="number">2</span>, <span class="attr">v3</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (name <span class="keyword">in</span> <span class="keyword">this</span>) &#123;</span><br><span class="line">    _sum += <span class="keyword">this</span>[name];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum.apply(obj)); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>넘겨준 객체의 메서드로 추가하고, 해당 메서드를 실행시킨다. apply의 중요점은 이를통해 <code>this</code>가 해당 객체를 가리키게 된다는 것이다. <em>객체 값이 바뀌지는 않는다.</em></p><ul><li>Function.prototype.call()</li></ul><blockquote><p>함수.call(this로 사용될 객체/값, 인자1, 인자2, …)</p></blockquote><p>apply와 동일하나, 매개변수 넘기는 방식이 다름</p><ul><li>Function.prototype.bind()</li></ul><blockquote><p>함수.bind(this로 사용될 객체/값, 인자1, 인자3, …)</p></blockquote><p>this 를 교체후, 함수를 리턴해준다.</p><p>call(this, 1, 2, 3) 은 bind(this)(1, 2, 3) 과 같다.</p><ul><li>Function.prototype.toString()</li></ul><p>함수의 소스 코드를 string으로 변환하여 출력.</p><ul><li>Function.prototype.isPrototypeOf()</li></ul><blockquote><p>함수.prototype.isPrototypeOf(인스턴스 객체)</p></blockquote><p>인스턴스 객체의 프로토타입이 해당 “함수”인지 확인</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p><p>프론트엔드 개발자를 위한 자바스크립트 프로그래밍 - 니콜라스 자카스</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05. Function</title>
      <link href="/2017/09/10/Javascript/5.%20javascript-Function/"/>
      <url>/2017/09/10/Javascript/5.%20javascript-Function/</url>
      
        <content type="html"><![CDATA[<h3 id="함수의-선언"><a href="#함수의-선언" class="headerlink" title="함수의 선언"></a><strong>함수의 선언</strong></h3><p>우리가 흔히 사용하는 <code>함수 = Function 객체의 인스턴스</code>이다.  <code>함수이름 = 함수 객체를 가리키는 포인터</code> 이다. 따라서 오버로딩이 불가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수선언</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">v1, v2</span>) </span>&#123; <span class="keyword">return</span> v1 + v2; &#125;</span><br><span class="line"><span class="comment">// 함수 표현식</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">v1, v2</span>) </span>&#123; <span class="keyword">return</span> v1 + v2; &#125;; <span class="comment">// 마지막 ';'</span></span><br><span class="line"><span class="comment">// Funtion 객체 사용(권장X)</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"v1"</span>, <span class="string">"v2"</span>, <span class="string">"return v1 + v2"</span>);</span><br></pre></td></tr></table></figure><p>함수 선언식은 코드 실행전에도, 모든 실행 컨텍스트에서 접근이 가능하다.</p><blockquote><p>why? 함수 선언 호이스팅(끌어 올린다) 과정을 통해 실행 컨텍스트에 추가 되기 때문</p></blockquote><p>그렇지만 함수 표현식은 코드실행전 까지 사용이 불가능하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(sum(<span class="number">10</span>, <span class="number">10</span>)); <span class="comment">// 에러</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">n1, v2</span>) </span>&#123; <span class="keyword">return</span> v1 + v2; &#125;</span><br></pre></td></tr></table></figure><h3 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h3><ul><li><strong>함수는 값이다.</strong></li></ul><p>Javascript에서는 함수도 값이다. <code>var a = function() {}</code> = <code>function a() {}</code> 따라서 객체 안에 저장될 수 있다.(객체 안에 저장되면 메서드라고 불림)</p><ul><li><strong>함수는 인자로 전달될 수 있다.</strong></li></ul><p>함수는 값이기 때문에 인자로 전달 될 수도 있음.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculator</span> (<span class="params">func, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> func(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increase</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrease</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(calculator(increase, <span class="number">1</span>));</span><br><span class="line">alert(calculator(decrease, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li><strong>함수는 함수의 리턴값으로 사용될 수 있다.</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculator</span> (<span class="params">mode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> functions = &#123;</span><br><span class="line">    <span class="string">'increase'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123; <span class="keyword">return</span> num+<span class="number">1</span> &#125;,</span><br><span class="line">    <span class="string">'decrease'</span> : <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123; <span class="keyword">return</span> num<span class="number">-1</span> &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> functions.mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(calculator(<span class="string">'increase'</span>)(<span class="number">1</span>)); <span class="comment">// 2</span></span><br><span class="line">alert(calculator(<span class="string">'decrease'</span>)(<span class="number">1</span>)); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>calculator(‘increase’) = function increase(num) { return num+1 }</p><p>calculator(‘increase’)(1) = increase(1)</p><ul><li><strong>함수는 배열의 값으로 사용될 수 있다</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> calculator = [</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123; <span class="keyword">return</span> num + <span class="number">10</span>; &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123; <span class="keyword">return</span> num * num; &#125;,</span><br><span class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123; <span class="keyword">return</span> num / <span class="number">10</span>; &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; calculator.length; i++) &#123;</span><br><span class="line">  num = calculator[i](num);</span><br><span class="line">  <span class="built_in">console</span>.log(num); <span class="comment">// 11, 121, 12.1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p><p>프론트엔드 개발자를 위한 자바스크립트 프로그래밍 - 니콜라스 자카스</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>float로 레이아웃 만들기</title>
      <link href="/2017/09/06/CSS/CSS-float%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/"/>
      <url>/2017/09/06/CSS/CSS-float%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</url>
      
        <content type="html"><![CDATA[<p>float로 다음 레이아웃을 만들어봅시다.</p><p><img src="http://i.imgur.com/okipVgU.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  *&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">box-sizing</span><span class="selector-pseudo">:border-box</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    width : 500px;</span><br><span class="line">    border: 1px solid gray;</span><br><span class="line">    margin: auto;</span><br><span class="line">  &#125;</span><br><span class="line">  header&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  nav&#123;</span><br><span class="line">    float: left;</span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  main&#123;</span><br><span class="line">    float: left;</span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span> 22<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-left</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line">    margin-left: -1px;</span><br><span class="line">  &#125;</span><br><span class="line">  aside&#123;</span><br><span class="line">    float: left;</span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:150px</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-left</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line">    margin-left: -1px;</span><br><span class="line">  &#125;</span><br><span class="line">  footer&#123;</span><br><span class="line">    clear: both;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-top</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>헤더<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    Lorem ipsum dolor sit amet!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    라젠카</span><br><span class="line">  <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    푸터푸터</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="box-sizing-border-box"><a href="#box-sizing-border-box" class="headerlink" title="box-sizing:border-box;"></a>box-sizing:border-box;</h3><p>원래 width를 border를 제외하고 계산하는데, 같이 계싼하게 하는 옵션.</p><h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><p><code>float:left;</code>로 설정하면, 다음 요소가 옆으로 흐르듯이 겹친다.</p><p>겹치고 싶지 않을 때는 <code>clear: both;</code>를 사용.</p><h3 id="width-설정"><a href="#width-설정" class="headerlink" title="width 설정"></a>width 설정</h3><p>float를 설정하면, 스크롤을 줄였을때 div가 내려오기 때문에, width를 설정하여, 내려오지 않게 한다.</p><h3 id="margin-left-1px"><a href="#margin-left-1px" class="headerlink" title="margin-left: -1px;"></a>margin-left: -1px;</h3><p>border가 겹칠 때는 margin 값을 조작하여 해결!</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course/css-%EA%B8%B0%EB%B3%B8%EB%B6%80%ED%84%B0-%ED%99%9C%EC%9A%A9%EA%B9%8C%EC%A7%80/float-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-holy-grail-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/" target="_blank" rel="noopener">https://www.inflearn.com/course/css-%EA%B8%B0%EB%B3%B8%EB%B6%80%ED%84%B0-%ED%99%9C%EC%9A%A9%EA%B9%8C%EC%A7%80/float-%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%9C-holy-grail-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01. Javascript란?</title>
      <link href="/2017/09/05/Javascript/1.%20javascript%EB%9E%80/"/>
      <url>/2017/09/05/Javascript/1.%20javascript%EB%9E%80/</url>
      
        <content type="html"><![CDATA[<h2 id="ECMA-스크립트의-역사"><a href="#ECMA-스크립트의-역사" class="headerlink" title="ECMA 스크립트의 역사"></a>ECMA 스크립트의 역사</h2><p>자바스크립트는 ECMA의 표준을 따름. ES1부터 ES7스크립트 표준까지 진행돼옴.</p><ul><li><p>ES1(ECMA-262 Ed. 1)</p><p>97년 <code>js</code>와 <code>JScript</code>가 동시에 나오자, ES1이 재정됌.</p></li><li><p>ES2</p></li><li><p>ES3</p><p>브라우저 지원 시작</p></li><li><p>ES4</p><p>불완전한 표준으로, 사용하지 않기로 합의</p></li><li><p><strong>ES5</strong></p><ul><li>현재 자바스크립트가 지원할 수 있는 표준</li><li>JSON/Accessors</li><li>2009 년 Node.js 플랫폼이 등장.(JS가 서버 프로그래밍이 가능한 언어로 확장)</li></ul></li><li><p><strong>ES6</strong></p><ul><li>TypeScript의 기반이 되는, 클래스 문법과 모듈 기능 추가</li><li>IE9 부터 지원</li></ul></li><li><p><strong>ES7</strong></p><ul><li>장식자(decorator)와 Async/Await 특징 추가</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02. Javascript 구문</title>
      <link href="/2017/09/05/Javascript/2.%20javascript-%EA%B5%AC%EB%AC%B8/"/>
      <url>/2017/09/05/Javascript/2.%20javascript-%EA%B5%AC%EB%AC%B8/</url>
      
        <content type="html"><![CDATA[<p>알아두면 좋은 구문들을 기록한다.</p><h3 id="async-defer"><a href="#async-defer" class="headerlink" title="async, defer"></a>async, defer</h3><p>script를 비동기적으로 다운한다. 외부파일만 적용된다.</p><p><img src="http://www.growingwiththeweb.com/images/2014/02/26/async-vs-defer-twitter.png" alt="async defer에 대한 이미지 검색결과"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">".."</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script defer src=<span class="string">".."</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>async</code>는 다운 받는 즉시 실행</p><p><code>defer</code>는 html파싱이 끝난 후 실행시킨다.</p><h3 id><a href="#" class="headerlink" title></a><!DOCTYPE html></h3><p>문서형정의(DTD:Document Type Definition)은 html 버젼을 선언하여, 렌더링에 도움을 준다. 생략시에는 쿼크모드로 돌입한다.</p><blockquote><p>쿼크모드 : 여러 비표준기능이 실행 되는 모드로, 브라우저 별로 실행결과가 다를 수 있다.</p></blockquote><p><code>&lt;!DOCTYPE html&gt;</code>을 선언하면 html5로 파싱한다.</p><p><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01//EN&quot; &quot;http://www.w3.org/TR/html4/strict.dtd&quot;&gt;</code> : Strict DTD  - center, font, iframe, strike, u, 새창띄우기 등이 제외되는 html 4.01 모드</p><h3 id="스트릭트-모드"><a href="#스트릭트-모드" class="headerlink" title="스트릭트 모드"></a>스트릭트 모드</h3><p>“user strict” 를 선언하면 적용된다. : ECMA Script3의 안전하지 않은 구문들을 사용할시 에러를 발생시킨다. IE10+이상 브라우저에서 지원한다. </p><h3 id="with"><a href="#with" class="headerlink" title="with"></a>with</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">with</span>(user) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">  <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>with를 사용하면 객체 이름 없이 변수를 사용할 수 있다. <em>그러나 성능 및 디버깅 어려움의 이유로 사용이 지양된다.</em></p><h3 id="Switch-문"><a href="#Switch-문" class="headerlink" title="Switch 문"></a>Switch 문</h3><p>switch문 ===로 비교.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(<span class="string">"hello world"</span>) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="string">"hello"</span> + <span class="string">"world"</span>) &#123;</span><br><span class="line">  <span class="comment">/* 계속 진행 */</span>    </span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">case</span> <span class="string">"hello world"</span> :</span><br><span class="line">    alert(<span class="string">"45"</span>);</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span> :</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>프론트엔드 개발자를 위한 자바스크립트 프로그래밍, 니콜라스 자카스</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.2. Javascript 연산자, 비교</title>
      <link href="/2017/09/03/Javascript/2.2.%20javascript-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%B9%84%EA%B5%90%EB%AC%B8/"/>
      <url>/2017/09/03/Javascript/2.2.%20javascript-%EC%97%B0%EC%82%B0%EC%9E%90-%EB%B9%84%EA%B5%90%EB%AC%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="과"><a href="#과" class="headerlink" title="==과 ==="></a>==과 ===</h2><p>==는 값이 동일한지 비교, 자동으로 형변환해서 비교한다</p><p>===는 값과 타입 모두 동일한지 비교, 형변환하지 않는다.</p><p>JS는 상당히 유연한 언어라서, 모든 형변환 케이스를 숙지하고 있기 힘들기 때문에 === 사용하는 것을 권장.</p><p>switch 문 인자로 int 값이 아닌 “string”형태도 가능.(다른 자료형이 되는지는 체크 필요.)</p><h2 id="연산자"><a href="#연산자" class="headerlink" title="연산자"></a>연산자</h2><h4 id><a href="#" class="headerlink" title="!"></a>!</h4><p>객체, “”, NaN에도 적용이 가능, Boolean과 같은 효과.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(!!a); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="amp-amp"><a href="#amp-amp" class="headerlink" title="&amp;&amp;"></a>&amp;&amp;</h4><p>값이 boolean이 아닐시</p><ol><li>둘중 하나라도, null/NaN/undefined라면 null/NaN/undefined 반환.</li><li>객체 &amp;&amp; (_)  : 앞 피연산자가 객체라면, 두번째 피연산자 반환.</li><li>true &amp;&amp; (객체) : 앞 피연산자가 true 일때만, 뒤 연산자 반환</li></ol><h4 id="-1"><a href="#-1" class="headerlink" title="||"></a>||</h4><p>값이 boolen이 아닐시</p><ol><li>둘 모두 null/NaN/undefined라면, null/NaN/undefined 반환</li><li>(객체) || _ : 앞 피연산자가 객체라면, 첫번째 객체 반환</li><li>false ||  (객체) : 뒤 피연산자 반환.</li></ol><h4 id="-2"><a href="#-2" class="headerlink" title="+"></a>+</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span> + <span class="string">"5"</span> <span class="comment">// 55</span></span><br><span class="line"><span class="string">"abc ="</span> + <span class="number">3</span> + <span class="number">8</span> <span class="comment">// abc38</span></span><br><span class="line"><span class="number">5</span> - <span class="literal">true</span> <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h4 id="lt"><a href="#lt" class="headerlink" title="&lt;"></a>&lt;</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="string">"Brick"</span> &lt; <span class="string">"alphabet"</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>사전식 배열로 비교하려면, toLowerCase()를 사용해서 비교하자. JS 비교는 대문자가 더 앞서 위치함.</p><h2 id="객체-비교"><a href="#객체-비교" class="headerlink" title="객체 비교"></a>객체 비교</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123;<span class="attr">a</span>: <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">o1 == o2; <span class="comment">// false</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(o1) == <span class="built_in">JSON</span>.stringify(o2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>o1과 o2는 객체 그 자체가 아니라, 객체를 가리키는 포인터이기 때문에 동등비교가 되지 않는다. 따라서 JSON.stringify를 통해 비교하는 것이 좋다고 한다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://enarastudent.tistory.com/entry/null과-undefined의-차이" target="_blank" rel="noopener">http://enarastudent.tistory.com/entry/null과-undefined의-차이</a></p><p><a href="https://stackoverflow.com/questions/1068834/object-comparison-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/1068834/object-comparison-in-javascript</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS 마진 겹침 현상</title>
      <link href="/2017/09/03/CSS/CSS-%EB%A7%88%EC%A7%84%EA%B2%B9%EC%B9%A8%ED%98%84%EC%83%81/"/>
      <url>/2017/09/03/CSS/CSS-%EB%A7%88%EC%A7%84%EA%B2%B9%EC%B9%A8%ED%98%84%EC%83%81/</url>
      
        <content type="html"><![CDATA[<h2 id="마진겹침현상-세-가지"><a href="#마진겹침현상-세-가지" class="headerlink" title="마진겹침현상 세 가지"></a>마진겹침현상 세 가지</h2><ol><li>위,아래 엘리먼트들의 마진이 겹칠시 둘 중 마진이 큰게 둘 사이의 마진이 된다.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-tag">div</span> &#123; <span class="attribute">border </span>: <span class="number">1px</span> solid grey &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.up</span> &#123; <span class="attribute">margin-bottom</span>: <span class="number">40px</span> &#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.down</span> &#123; <span class="attribute">margin-top</span>: <span class="number">30px</span> &#125;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span>def<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://i.imgur.com/Rz5XDXc.png" alt="img"></p><ol start="2"><li>위,아래 엘리먼트들의 마진이 겹치고, 위의 엘리먼트의 시각적 요소가 없어지면, 시각적 요소가 없어진 엘리먼트 마진의 top-bottom과/ left-right은 큰값으로 합쳐져 계산된다.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.up</span> &#123;</span></span><br><span class="line">  margin-top: 30px;</span><br><span class="line">  margin-bottom: 40px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.down</span> &#123;</span></span><br><span class="line">  border : 1px solid grey;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"up"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"down"</span>&gt;</span>def<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>up의 margin-top/margin-bottom, down의 margin-top 중 가장 큰값으로 마진을 계산</p><ol start="3"><li>부모,자식 엘리먼트 사이에서 부모의 시각적 요소가 없어지면 부모,자식 마진 중 마진이 큰 쪽이 자식 마진처럼 사용된다.</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.child</span> &#123;</span></span><br><span class="line">  border : 1px solid grey;</span><br><span class="line">  margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>.child의 margin-top이 60 이상이 될때 적용된다. 그전에 겹쳐서 .parent의 margin-top 이 사용.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>생활코딩 CSS</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.1. Object 내장객체</title>
      <link href="/2017/09/01/Javascript/3.1.%20javascript-Object%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/"/>
      <url>/2017/09/01/Javascript/3.1.%20javascript-Object%EB%82%B4%EC%9E%A5%EA%B0%9D%EC%B2%B4/</url>
      
        <content type="html"><![CDATA[<h3 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h3><ul><li><strong>Object.prototype</strong></li></ul><p>모든 객체는 Object.prototype으로부터 메소드 및 속성을 상속, <strong>모든 객체를 만들면, 해당 속성/메서드가 상속되어 있다.</strong></p><p>다음 코드를 보자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name   : <span class="string">"child of earth"</span>,</span><br><span class="line">  age    : <span class="number">0</span>,</span><br><span class="line">nature : <span class="string">"cool"</span>,</span><br><span class="line">  eat    : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name + <span class="string">"is eating"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> narendra = <span class="built_in">Object</span>.create(person);</span><br><span class="line">narendra.name = <span class="string">"Narendra Sisdoiya"</span>;</span><br><span class="line">narendra.age = <span class="number">29</span>;</span><br><span class="line">narendra.eat();</span><br><span class="line"></span><br><span class="line">narendra.hasOwnProperty(<span class="string">"eat"</span>); <span class="comment">// false</span></span><br><span class="line">narendra.hasOwnProperty(<span class="string">"name"</span>); <span class="comment">// true</span></span><br><span class="line">narendra.hasOwnPropery(<span class="string">"nature"</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><img src="https://image.slidesharecdn.com/142752725-javascript-prototype-and-module-pattern-140501064654-phpapp02/95/javascript-prototype-and-module-pattern-4-638.jpg?cb=1398951030" alt="object prototype에 대한 이미지 검색결과"></p><p>내장 객체인 Object와, Object.prototype이 있다.</p><blockquote><p>자세한 내용은 상속과 prototype 포스팅 참조</p></blockquote><ul><li><strong>Object.prototype.constructor</strong></li></ul><p>객체의 프로토타입을 생성하는 함수, 객체의 타입을 파악하는데 쓰이지만, <code>instance of</code> 연산자가 더 안전하다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line">o.constructor === <span class="built_in">Object</span>; <span class="comment">// true</span></span><br><span class="line">o <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line">a.constructor === <span class="built_in">Array</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">3</span>);</span><br><span class="line">n.constructor === <span class="built_in">Number</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object.prototype.__proto__</strong></li></ul><p>객체가 초기화될 때 프로토타입으로 사용된 객체, 즉 상속받은 내용들이 들어있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a.__proto__ === <span class="built_in">Object</span>; <span class="comment">// false</span></span><br><span class="line">a.__proto__ === <span class="built_in">Object</span>.prototype; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h3><ul><li><strong>Object.hasOwnPropery()</strong></li></ul><p>상속받지 않은, 순수한 자신의 프로퍼티 여부를 확인한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">o.prop = <span class="string">'exists'</span>;</span><br><span class="line">o.hasOwnProperty(<span class="string">'prop'</span>);             <span class="comment">// returns true</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'toString'</span>);         <span class="comment">// returns false</span></span><br><span class="line">o.hasOwnProperty(<span class="string">'hasOwnProperty'</span>);   <span class="comment">// returns false</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object.create()</strong></li></ul><p>constructor 깨짐 없이 깔끔하게, prototype을 적용하여 객체를 생성한다. 아래와 같은 로직과 일치한다. 이때 넘겨준 객체 o는 prototype의 원리와 같이 객체를 공유하게 된다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Object.create(프로토타입이 될 객체, 추가할 프로퍼티 객체)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">"hi"</span>, <span class="attr">friends</span> : [<span class="string">"hi"</span>, <span class="string">"ho"</span>] &#125;</span><br><span class="line"><span class="comment">// p1, p2는 person 객체를 공유하게 된다.</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="built_in">Object</span>.create(person);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="built_in">Object</span>.create(person);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p3 = <span class="built_in">Object</span>.create(person, &#123; <span class="attr">name</span> : &#123; <span class="attr">value</span> : <span class="string">"Gre"</span>&#125; &#125;)</span><br><span class="line"><span class="comment">// 두번째 파라미터는 Object.defineProperties와 유사하다.</span></span><br></pre></td></tr></table></figure><blockquote><p>생성자 함수를 만들어 create를 사용할 경우</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Shape - 상위클래스</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">this</span>.y = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 상위클래스 메서드</span></span><br><span class="line">Shape.prototype.move = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.x += x;</span><br><span class="line">  <span class="keyword">this</span>.y += y;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">'Shape moved.'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Rectangle - 하위클래스</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Rectangle</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  Shape.call(<span class="keyword">this</span>); <span class="comment">// super 생성자 호출.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 하위클래스는 상위클래스를 확장</span></span><br><span class="line">Rectangle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</span><br><span class="line">Rectangle.prototype.constructor = Rectangle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Rectangle?'</span>, rect <span class="keyword">instanceof</span> Rectangle); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Is rect an instance of Shape?'</span>, rect <span class="keyword">instanceof</span> Shape); <span class="comment">// true</span></span><br><span class="line">rect.move(<span class="number">1</span>, <span class="number">1</span>); <span class="comment">// Outputs, 'Shape moved.'</span></span><br></pre></td></tr></table></figure><ol><li><code>Object.create(Shape.prototype)</code> : create의 인자로 프로토타입으로 쓰일 객체를 넘겨줘야 한다.</li><li><code>Shape.call(this)</code> : 상속 포스팅에도 설명했듯이, Shape의 this인자들을 Rectangle 컨텍스트에서 생성하게 하여 자신의 프로퍼티를 가지게 된다.</li></ol><ul><li><strong>Object.defineProperties()</strong></li></ul><p>데이터 프로퍼티와, 접근자 프로퍼티 를 셋팅한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">  <span class="string">'_x'</span>: &#123;</span><br><span class="line">    value: <span class="number">0</span>,</span><br><span class="line">    writable: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'x'</span>: &#123;</span><br><span class="line">    <span class="keyword">get</span>: function() &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>._x;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(newValue) &#123;</span><br><span class="line">       <span class="keyword">this</span>._x = newValue+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'_y'</span>: &#123; ... &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>configurable, enumerable 와 같은 속성을 설정하지 않으면 default로 false가 할당된다.</p><blockquote><p>언제 사용할까?</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// defineProperties 사용하지 않을때</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.imFunc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'aa'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> b <span class="keyword">in</span> a) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 결과 : imFunc</span></span><br></pre></td></tr></table></figure><p>for in문에서 순회하고 싶지 않아도, 함수가 나온다. 이때 사용해보자</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">Object</span>.prototype, <span class="string">'imFunc'</span>, &#123;</span><br><span class="line">enumerable: <span class="literal">false</span>,</span><br><span class="line">  configurable: <span class="literal">false</span>,</span><br><span class="line">  writable: <span class="literal">false</span>,</span><br><span class="line">  value: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'aa'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> b <span class="keyword">in</span> a) &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// imFunc가 순회되지 않는다!</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object.getOwnPropertyDescriptor()</strong></li></ul><p>접근자/데이터 프로퍼티 객체를 읽어온다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 위 예제에서 이어짐</span></span><br><span class="line"><span class="keyword">var</span> descriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, <span class="string">"_x"</span>);</span><br><span class="line">alert(descriptor.value); <span class="comment">// 0</span></span><br><span class="line">alert(descriptor.configurable); <span class="comment">// false</span></span><br><span class="line">alert(descriptor.get);</span><br></pre></td></tr></table></figure><ul><li><strong>Object.preventExtensions(), Object.isExtensible()</strong></li></ul><p>새로운 프로퍼티를 추가할 수 없도록한다. 값 수정은 가능.</p><ul><li><strong>Object.seal(), Object.isSealed()</strong></li></ul><p>새로운 프로퍼티를 추가할 수 없도록한다. 값 수정은 가능하지만, configurable 값은 false로 바꾼다.</p><ul><li><strong>Object.getOwnPropertyNames()</strong></li></ul><blockquote><p>파라미터 : object</p><p>리턴 :  문자열 배열</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(arr).sort()); </span><br><span class="line"><span class="comment">// logs ["0", "1", "2", "length"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array-like object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="number">0</span>: <span class="string">'a'</span>, <span class="number">1</span>: <span class="string">'b'</span>, <span class="number">2</span>: <span class="string">'c'</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(obj).sort()); </span><br><span class="line"><span class="comment">// logs ["0", "1", "2"]</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object.getPrototypeOf()</strong></li></ul><p>prototype을 리턴한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="string">'foo'</span>);</span><br><span class="line"><span class="comment">// TypeError: "foo" is not an object (ES5 code)</span></span><br><span class="line"><span class="built_in">Object</span>.getPrototypeOf(<span class="string">'foo'</span>);</span><br><span class="line"><span class="comment">// String.prototype                  (ES2015 code)</span></span><br></pre></td></tr></table></figure><h3 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h3><ul><li><strong>Object.assign()</strong></li></ul><p>Object 병합하기</p><blockquote><p>파라미터 : 타겟, 소스</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o2 = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> o3 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.assign(o1, o2, o3);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(o1);  <span class="comment">// &#123; a: 1, b: 2, c: 3 &#125;, 타겟 오브젝트, 그 자체도 변화합니다.</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object.freeze()</strong></li></ul><p>객체를 읽기전용으로 바꾼다. 프로퍼티 추가/삭제/변경, 이나 enumerability, configyrability 등의 속성 변경 또한 막는다.</p><h3 id="ES8"><a href="#ES8" class="headerlink" title="ES8"></a>ES8</h3><ul><li><strong>Object.entries()</strong></li></ul><p>열거 가능한 객체를 [key, value] 배열로 만들어 리턴함</p><blockquote><p>파라미터 : key, value 쌍의 객체</p><p>리턴 : key, value 쌍의 배열</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="string">'bar'</span>, <span class="attr">baz</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line"><span class="comment">// [ ['foo', 'bar'], ['baz', 42] ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="number">5</span>, <span class="attr">b</span>: <span class="number">7</span>, <span class="attr">c</span>: <span class="number">9</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [key, value] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key + <span class="string">' '</span> + value); <span class="comment">// "a 5", "b 7", "c 9"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.entries(obj).forEach(<span class="function">(<span class="params">[key, value]</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key + <span class="string">' '</span> + value); <span class="comment">// "a 5", "b 7", "c 9"     </span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://medium.com/@bluesh55/javascript-prototype-이해하기-f8e67c286b67" target="_blank" rel="noopener">https://medium.com/@bluesh55/javascript-prototype-이해하기-f8e67c286b67</a></p><p><a href="http://unikys.tistory.com/320" target="_blank" rel="noopener">http://unikys.tistory.com/320</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>부모에 상관없이 width 100% 주는 법</title>
      <link href="/2017/09/01/CSS/full-width-ignore-parent/"/>
      <url>/2017/09/01/CSS/full-width-ignore-parent/</url>
      
        <content type="html"><![CDATA[<p>상위 요소의 넓이나 높이에 관계없이, <strong>100vw는 브라우저 화면의 넓이</strong>,</p><p><strong>100vh는 브라우저 화면의 높이</strong>를 뜻함.</p><p><img src="https://i.imgur.com/66Sj1pd.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  div &#123;</span><br><span class="line">    min-height: 40px;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-id">#parent</span> &#123;</span></span><br><span class="line">    width: 400px;</span><br><span class="line">    border: 1px solid black;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-id">#something</span> &#123;</span></span><br><span class="line">    border: 2px solid red;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-id">#wide-div</span> &#123;</span></span><br><span class="line">    width: 100vw;</span><br><span class="line">    margin-left: calc(-50vw + 50%);</span><br><span class="line">    border: 2px solid green;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"something"</span>&gt;</span>Red<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wide-div"</span>&gt;</span>Green<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"something-else"</span>&gt;</span>Other content, which is not behind Green as you can see.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vw 는 IE9 이상 및 그 외 브라우저에서 지원해줌.</p><p>calc 함수를 써서, left를 화면의 0의 위치에서 시작하게끔 함. (IE8 이상)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/31391459/how-can-i-expand-a-child-div-to-100-screen-width-if-the-container-div-is-smalle" target="_blank" rel="noopener">https://stackoverflow.com/questions/31391459/how-can-i-expand-a-child-div-to-100-screen-width-if-the-container-div-is-smalle</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Firebase로 CRUD 기능 작성</title>
      <link href="/2017/09/01/Google/firebase/"/>
      <url>/2017/09/01/Google/firebase/</url>
      
        <content type="html"><![CDATA[<p>웹과 모바일 개발에 필요한 기능을 제공하는 BaaS(BackEnd as  a Service)로, 프론트 엔드개발에 더축 집중할 수 있음. 이번 시간에 DB 접근, 인증, CRUD작업에 대해 포스팅한다.</p><h2 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h2><p>프로젝트를 만든다.</p><h3 id="Authentication"><a href="#Authentication" class="headerlink" title="Authentication"></a>Authentication</h3><p><code>로그인방법</code> 탬에서 원하는 인증방식을 활성화 한다. <code>Authorized Domains</code>탬에서 리다이렉션 도메인을 추가할 수 있다.</p><p><code>템플릿</code> 탭에서는 이메일 주소 인증을 위한 템플릿을 설정할 수 있음.</p><h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><p><code>데이터</code> 탭에서 저장된 데이터를 확인</p><ul><li>모든 데이터는 Json으로 저장</li><li>데이터를 import/export 할 수 있음.</li><li>캐싱 방식으로 사용되기 때문에, Offline시에도 사용이 가능.</li><li>모든 클라이언트에게 데이터 변경시, 모든 클라이언트에게 전송이됌.</li></ul><p><code>규칙</code> 탭에서는 데이터의 읽기 쓰기 권한 규칙을 설정</p><ul><li>시뮬레이터를 활용하여 권한이 제대로 설정되었는지 확인 가능.</li></ul><h2 id="로컬-개발환경-셋팅"><a href="#로컬-개발환경-셋팅" class="headerlink" title="로컬 개발환경 셋팅"></a>로컬 개발환경 셋팅</h2><ol><li><a href="http://nodejs.org" target="_blank" rel="noopener">http://nodejs.org</a> 에서 nodejs 설치</li><li>firebase cli 설치</li></ol><blockquote><p>&gt; npm install firebase-tools -g</p></blockquote><ol start="3"><li>firebase cli에 로그인</li></ol><p>컴퓨터와 파이어베이스를 연결하고, 프로젝트에 대한 Access를 허용시켜줌.</p><blockquote><p>&gt; firebase login</p><p>&gt; y</p></blockquote><p>이후 권한허용 여부를 묻는 브라우저 새창이 나오면 Firebase CLI 허용 버튼을 클릭</p><ol start="4"><li>firebase 프로젝트 설정</li></ol><blockquote><p>&gt; cd [파이어베이스 프로젝트 경로]</p><p>&gt; firebase init</p></blockquote><p><img src="http://i.imgur.com/fLauqJj.png" alt="img" title="오오오오오옷!!"></p><blockquote><p>오오오옷!!!! 간지</p></blockquote><p>‘Y’를 눌러 진행해준다</p><ol start="5"><li>Database 셋팅</li></ol><ul><li>설정 항목중에서 첫번째 Database를 선택</li><li>위에서 생성한 프로젝트를 선택해준다.</li></ul><p>CLI를 통해 자동으로 index.html및 기본 파일들이 설정되는데, 안되는 경우 다음과 같이 파일을 확인.</p><ul><li>database.rule.json : DB 데이터 읽기 쓰기 규칙. </li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 디폴트 규칙</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    <span class="attr">".read"</span>: <span class="string">"auth != null"</span>,</span><br><span class="line">    <span class="attr">".write"</span>: <span class="string">"auth != null"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>public/index.html : 폴더를 생성하고 index파일을 생성한다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.gstatic.com/firebasejs/4.1.2/firebase.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// .... 이곳에 웹용 파이어베이스 코드를 추가해준다.(firebase 홈)</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> config = &#123;</span></span><br><span class="line">      ...</span><br><span class="line">    &#125;;</span><br><span class="line">    firebase.initializeApp(config);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">성공!</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>firebase.json : 호스팅시 어떤 폴더를 이용할 것이며, 어떤 경로와 어떤 파일을 연결할지 설정</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"database"</span>: &#123;</span><br><span class="line">    <span class="attr">"rules"</span>: <span class="string">"database.rules.json"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"hosting"</span>: &#123;</span><br><span class="line">    "public": "public", // 페이지가 들어 있는 폴더명</span><br><span class="line">    "rewrites": [&#123;</span><br><span class="line">      "source": "**",   // 페이지 주소</span><br><span class="line">      "destination": "/index.html" // 연결할 페이지</span><br><span class="line">     &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>서버 구동</li></ol><blockquote><p>&gt; firebase serve</p></blockquote><p>위 키워드를 입력하고 <a href="http://localhost:5000" target="_blank" rel="noopener">http://localhost:5000</a> 을 접속하여 페이지가 나오는 것을 확인한다.</p><h2 id="권한-인증"><a href="#권한-인증" class="headerlink" title="권한 인증"></a>권한 인증</h2><ul><li>index.html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> auth = firebase.auth();</span><br><span class="line"><span class="keyword">var</span> userInfo;</span><br><span class="line"><span class="keyword">var</span> authProvider = <span class="keyword">new</span> firebase.auth.GoogleAuthProvider();</span><br><span class="line"><span class="comment">// 팝업 형태로 열어줌</span></span><br><span class="line"><span class="comment">// 성공 실패 구분</span></span><br><span class="line">auth.onAuthStateChanged(<span class="function"><span class="keyword">function</span> (<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (user) &#123;</span><br><span class="line">    <span class="comment">// 인증 성공시</span></span><br><span class="line">    userInfo = user;</span><br><span class="line">    getKanbanlist(); <span class="comment">// 아래 함수 구현</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 인증 실패시, 인증 팝업창을 뛰워줌</span></span><br><span class="line">    auth.signInWithPopup(authProvider);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h2><ul><li>index.html</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> database = firebase.database();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKanbanlist</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Firebase console DB에서 만든 데이터 경로대로 데이터를 받아옴.</span></span><br><span class="line">  <span class="keyword">var</span> kanbanRef = database.ref(<span class="string">'kanbans/'</span> + userInfo.uid);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Firebase는 비동기 방식, FB DB에 추가되면 즉시 콜백으로 데이터를 받아온다.</span></span><br><span class="line">  kanbanRef.on(<span class="string">'child_added'</span>, onChildAdded);</span><br><span class="line">  kanbanRef.on(<span class="string">'child_changed'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> key = data.key;</span><br><span class="line">    <span class="keyword">var</span> txt = data.val().txt;</span><br><span class="line">    <span class="comment">// 해당 데이터로 html에 데이터를 수정.</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Insert</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onChildAdded</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key = data.key;</span><br><span class="line">  <span class="keyword">var</span> kanbanData = data.val();</span><br><span class="line">  <span class="keyword">var</span> txt = kanbanData.txt;</span><br><span class="line">  <span class="comment">// 해당 데이터를 html 요소에 추가.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 데이터 단일 건 가져오기</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getKanban</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> kanbanRef = database.ref(<span class="string">"kanbans/"</span> + userInfo.uid + <span class="string">"/"</span> + key)</span><br><span class="line">  .once(<span class="string">'value'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">snapshot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (snapshot.val() != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 가져온 데이터를 저장</span></span><br><span class="line">      $(<span class="string">".textarea"</span>).val(snapshot.val().txt);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 삭제하기</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteKanban</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">  kanbanRef = database.ref(<span class="string">"kanbans/"</span> + userInfo.uid + <span class="string">"/"</span> + key);</span><br><span class="line">  kanbanRef.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="on"><a href="#on" class="headerlink" title="on"></a>on</h4><p><code>on(&#39;child_added&#39;, 메서드);</code> <code>on(&#39;child_changed&#39;, 메서드);</code> 함수를 통해 DB에 데이터가 수정, 추가시에 콜백 함수가 실행된다. 리얼타임 DB의 위력을 볼 수 있다.</p><h2 id="Firebase-서버-배포"><a href="#Firebase-서버-배포" class="headerlink" title="Firebase 서버 배포"></a>Firebase 서버 배포</h2><blockquote><p>&gt; firebase deploy</p></blockquote><p>서버에 바로 작업 내역이 반영된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course-status-2/" target="_blank" rel="noopener">https://www.inflearn.com/course-status-2/</a></p>]]></content>
      
      
      <categories>
          
          <category> Google </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.3. 유효범위와 컨텍스트</title>
      <link href="/2017/09/01/Javascript/2.3.%20%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84%EC%99%80%20%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/"/>
      <url>/2017/09/01/Javascript/2.3.%20%EC%9C%A0%ED%9A%A8%EB%B2%94%EC%9C%84%EC%99%80%20%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/</url>
      
        <content type="html"><![CDATA[<p>유효범위(Scope)는 변수의 수명을 의미한다. JS에서 <code>함수 내</code>에 선언한 변수는 지역변수가 되고, <code>함수 밖</code>에서 선언한 변수는 전역변수가 된다.</p><ul><li><strong>var 를 빼고 선언하면, 함수 내에서 선언하더라도 전역 변수로 선언된다.</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fscope</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">vscope = <span class="string">'xx'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(vscope); <span class="comment">// xx</span></span><br><span class="line">&#125;</span><br><span class="line">fscope();</span><br><span class="line"><span class="built_in">console</span>.log(vscope); <span class="comment">// xx</span></span><br></pre></td></tr></table></figure><p>함수 내에서 <code>var</code>를 생략했을 때는, 먼저 지역변수를 체크하고 없다면 전역변수로 변수를 할당한다. </p><ul><li><strong>함수 스코프만 존재한다! : <code>{}</code> 스코프는 없음.</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'hahaha'</span>;</span><br><span class="line">&#125;</span><br><span class="line">alert(name); <span class="comment">// hahaha -&gt; 잘 동작!</span></span><br></pre></td></tr></table></figure><p>java와 같은 <code>{}</code>함수 스코프를 쓰는 언어에서는 에러가 날 것이다.</p><ul><li><strong>정적 유효범위(statical scoping), 혹은 렉시컬(lexical scoping)</strong></li></ul><p>사용할때, 해당 함수 스코프에서 지역변수가 없으면 전역변수를 사용.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = <span class="number">10</span>;</span><br><span class="line">  b();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.write(i); <span class="comment">// 5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a();</span><br></pre></td></tr></table></figure><h4 id="전역변수를-불가피하게-사용할-때"><a href="#전역변수를-불가피하게-사용할-때" class="headerlink" title="전역변수를 불가피하게 사용할 때"></a>전역변수를 불가피하게 사용할 때</h4><p>익명함수를 활용하여, 전역 변수를 지역변수화.</p><blockquote><p> 익명함수 선언 및 호출 후 <code>()</code> 괄호로 묶어줌.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> MYAPP = &#123;&#125;</span><br><span class="line">  MYAPP.calculator = &#123;</span><br><span class="line">    <span class="string">'left'</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'right'</span> : <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  MYAPP.coordinate = &#123;</span><br><span class="line">    <span class="string">'left'</span> : <span class="literal">null</span>,</span><br><span class="line">    <span class="string">'right'</span> : <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">  MYAPP.calculator.left = <span class="number">10</span>;</span><br><span class="line">  MYAPP.calculator.right = <span class="number">20</span>;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure><h1 id="컨텍스트"><a href="#컨텍스트" class="headerlink" title="컨텍스트"></a>컨텍스트</h1><p>실행 <code>컨텍스트</code>는 다른 데이터가 접근 가능한지, 어떻게 행동할지(?) 규정되는 곳인다. 보통 <code>this</code>로 자신의 컨텍스트 값들을 접근할 수 있다.</p><ul><li>가장 바깥 컨텍스트는 전역 컨텍스트(Window)이다.</li><li>함수 정의<ol><li>JS 인터프리터 : (전역변수 객체 + 해당 함수 객체)를 함수 내부 [[Scope]] 프로퍼티에 저장한다.</li></ol></li><li>함수 호출<ol><li>실행 컨텍스트 생성</li><li>[[Scope]] 프로퍼티 복사</li><li>스코프 체인 생성</li><li>arguments를 포함한 활성화 객체 만들어짐.</li><li>스코프 체인 첫째에 활성화 객체가 위치하고, 둘째에 전역 밴수 객체가 위치.</li></ol></li><li>함수 실행 끝<ol><li>활성화 객체 파괴</li></ol></li></ul><blockquote><p>스코프 체인? 실행중인 컨텍스트가 접근할 수 있는 모든 변수와 함수에 순서가 정의되어 있다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">"blue"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(color === <span class="string">"blue"</span>) &#123;</span><br><span class="line">        color = <span class="string">"red"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">        color = <span class="string">"blue"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/UEmXjTS.png" alt="img"></p><p>위 changeColor()가 실행되면, 스코프 체인이 만들어지고, 체인의 앞쪽에는 <code>함수자체의 변수객체</code>와 <code>전역 컨텍스트의 변수 객체</code>가 들어 있다. color 변수는 <code>함수자체의 스코프 체인</code>에서 찾을 수 있으므로 접근이 가능하다. 없으면 스코프 체인을 따라 한단계 올라가, 전역 컨텍스트의 변수객체에 접근한다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>프론트엔드 개발자를 위한 자바스크립트 프로그래밍, 니콜라스 자카스</p><p><a href="https://www.inflearn.com/course/%EC%A7%80%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4-%EA%B8%B0%EB%B3%B8/%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B2%95/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%A7%80%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4-%EA%B8%B0%EB%B3%B8/%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B2%95/</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03. Object</title>
      <link href="/2017/09/01/Javascript/3.%20javascript-Object/"/>
      <url>/2017/09/01/Javascript/3.%20javascript-Object/</url>
      
        <content type="html"><![CDATA[<p>Object는 데이터들을 묶는 구조이다. 순서없는 컬렉션이라고도 볼 수 있다. property는 원시값, 객체, 함수를 가질 수 있다.</p><h3 id="선언-방법"><a href="#선언-방법" class="headerlink" title="선언 방법"></a>선언 방법</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">"junho"</span>, <span class="attr">age</span>: <span class="number">29</span> &#125;;</span><br><span class="line">person.name;</span><br><span class="line">person[<span class="string">'name'</span>];</span><br></pre></td></tr></table></figure><h1 id="객체-생성"><a href="#객체-생성" class="headerlink" title="객체 생성"></a>객체 생성</h1><ul><li><strong>팩토리 패턴</strong></li></ul><p>특정 객체 생성 과정 추상화</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreatePerson</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">  o.name = name;</span><br><span class="line">  o.age = age;</span><br><span class="line">  o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = CreatePerson(<span class="string">'junho'</span>, <span class="number">28</span>);</span><br></pre></td></tr></table></figure><p>그러나, 객체가 어떤 타입인지 알 수 없는 단점이 존재한다. 무조건 Object일것이기 때문에</p><ul><li><strong>생성자 패턴</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'junho'</span>, <span class="number">28</span>); <span class="comment">// new를 사용해야 한다!</span></span><br><span class="line">Person(<span class="string">'junho'</span>, <span class="number">28</span>); <span class="comment">// window 객체에 해당 프로퍼티 들이 추가된다.</span></span><br></pre></td></tr></table></figure><blockquote><p>new 연산자의 과정</p><ol><li>객체 생성</li><li>생성자의 this값에 객체 할당</li><li>객체에 프로퍼티 추가.</li><li>새 객체 반환</li></ol></blockquote><p>생성자 패턴에도 문제가 있는데, 아래처럼 여러 Person을 생성할 경우, this.sayName의 경우 똑같은 일을 함에도 불구하고 내부적으로는 <code>this.sayName = new Function()</code> 이 실행되어 Function 인스턴스가 2개 존재하게 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 위 예제에서 계속</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'junho'</span>, <span class="number">28</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'lia'</span>, <span class="number">24</span>);</span><br><span class="line">alert(person.sayName == person2.sayName); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><em>위 문제를 해결하기 위한 생성자 패턴은 prototype을 배운 후에 더 공부해보자(Prototype과 상속 포스팅참조)</em></p><h3 id="프로퍼티"><a href="#프로퍼티" class="headerlink" title="프로퍼티"></a>프로퍼티</h3><ul><li><strong>데이터 프로퍼티</strong><ul><li>[[Configurable]] : 프로퍼티의 삭제, 속성 변경 할 수 있는 여부 (default true)</li><li>[[Enumerable]] : for_in 루프에서 해당 프로퍼티 반환할 수 있음(default true)</li><li>[[Writable]] : 값 바꿀 수 있음 (default true)</li><li>[[value]] : 프로퍼티의 실제 데이터 값 (default undefined)</li></ul></li></ul><p>프로퍼티 저장시, 위 4가지 값이 할당 된다. 데이터 프로퍼티를 셋팅하기 위해서 Object.defineProperty를 이용하면 된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    writable : <span class="literal">false</span>,</span><br><span class="line">  value : <span class="string">'junho'</span></span><br><span class="line">&#125;);</span><br><span class="line">alert(person.name); <span class="comment">// junho</span></span><br><span class="line">person.name = <span class="string">'lia'</span>;</span><br><span class="line">alert(person.name); <span class="comment">// junho</span></span><br></pre></td></tr></table></figure><ul><li><strong>접근자 프로퍼티</strong><ul><li>[[Configurable]] : 프로퍼티의 삭제, 속성 변경 할 수 있는 여부 (default true)</li><li>[[Enumerable]] : for_in 루프에서 해당 프로퍼티 반환할 수 있음(default true)</li></ul></li></ul><p>getter/setter 함수로 구성된다. 프로퍼티 값 바꿀 때 부수적 절차 필요한 경우 사용된다. 데이터 프로퍼티와는 달리 실제 데이터가 없다. 정의 위해서는 반드시 Object.defineProperty를 이용해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123; <span class="attr">_year</span> : <span class="number">2004</span>, <span class="attr">edition</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(book, <span class="string">"year"</span>, &#123;</span><br><span class="line">   <span class="keyword">get</span>: function() &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>._year;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="keyword">set</span>: function(newValue) &#123;</span><br><span class="line">       <span class="keyword">if</span>(newValue &gt; <span class="number">2004</span>) &#123;</span><br><span class="line">           <span class="keyword">this</span>._year = newValue;</span><br><span class="line">           <span class="keyword">this</span>.edition += (newValue - <span class="number">2004</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   enumerable: <span class="literal">true</span>,</span><br><span class="line">   configurable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">book.year = <span class="number">2005</span>;</span><br><span class="line">alert(book.edition); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>getter만 지정시 읽기전용이되며, setter만 지정시 프로퍼티를 읽을때 undefined를 반환한다.</p><h3 id="객체-반복"><a href="#객체-반복" class="headerlink" title="객체 반복"></a>객체 반복</h3><p><strong>객체</strong>에는 <strong>in</strong>을 쓰고, <strong>배열</strong>에는 <strong>of</strong> 를 쓰자. 배열의 인덱스는 number지만, in을 쓸 경우 string형으로 리턴되기 때문이다. 겪어보지는 않았지만, 루프문이 무작위로 도는 경우도 있다고 한다.</p><p>객<strong>체인</strong><br>배<strong>열오</strong></p><p><del>체인열오!</del></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> people = &#123;<span class="string">'name'</span>:<span class="string">'junho'</span>, <span class="string">'old'</span>: <span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(key <span class="keyword">in</span> people) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'key : '</span> + key + <span class="string">'value : '</span> + people[key]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>in 연산자에선 [[Enumberable]] 프로퍼티가 true 인 프로퍼티들이 모두 리턴된다. 프로토타입의 변수들 역시 리턴된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://medium.com/@bluesh55/javascript-prototype-이해하기-f8e67c286b67" target="_blank" rel="noopener">https://medium.com/@bluesh55/javascript-prototype-이해하기-f8e67c286b67</a></p><p><a href="http://unikys.tistory.com/320" target="_blank" rel="noopener">http://unikys.tistory.com/320</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/</a></p><p>프론트엔드 개발자를 위한 Javascript - 니콜라스 자카스</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>FLEX 레이아웃 정리</title>
      <link href="/2017/09/01/CSS/CSS-flex%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/"/>
      <url>/2017/09/01/CSS/CSS-flex%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83/</url>
      
        <content type="html"><![CDATA[<p>다음 레이아웃을 flex로 표현해보자<br><img src="http://i.imgur.com/okipVgU.png" alt="img"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">  &#125;</span><br><span class="line">  header&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-bottom</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  footer&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-top</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">display</span><span class="selector-pseudo">:flex</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> <span class="selector-tag">nav</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-right</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.content</span> <span class="selector-tag">aside</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-left</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-tag">gray</span>;  </span></span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:20px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line">  nav, aside&#123;</span><br><span class="line">    flex-basis: 150px;</span><br><span class="line">    flex-shrink: 0;</span><br><span class="line">  &#125;</span><br><span class="line">  main&#123;</span><br><span class="line"><span class="css">    <span class="selector-tag">padding</span><span class="selector-pseudo">:10px</span> 22<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 4<span class="selector-tag">px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>헤더<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>html<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>css<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      Lorem ipsum dolor sit amet!</span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">      라젠카</span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    푸터푸터</span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex;"></a>display: flex;</h4><p>컨테이너에 등록함으써 flex 레이아웃 적용을 시작!</p><h4 id="flex-direction-row"><a href="#flex-direction-row" class="headerlink" title="flex-direction : row;"></a>flex-direction : row;</h4><p><code>row</code>, <code>row-reverse</code>, <code>column</code>, <code>column-reverse</code> 값이 있다. row가 기본값, row는 세로 방향으로 행 레이아웃, column은 가로 방향으로 열 레이아웃.</p><p>   1</p><p>   2</p><p>   3                        1      2      3     4     5</p><p>   4</p><p>   5</p><p><code>&lt;row&gt;</code>                        <code>&lt;column&gt;</code></p><h4 id="flex-basis-200px"><a href="#flex-basis-200px" class="headerlink" title="flex-basis : 200px;"></a>flex-basis : 200px;</h4><p>row와 column에 따라 해당방향으로 기본 크기를 설정한다.</p><h4 id="flex-grow-1"><a href="#flex-grow-1" class="headerlink" title="flex-grow : 1;"></a>flex-grow : 1;</h4><p>모두 1이면 스크롤을 늘릴때, 공평하게 크기가 늘어남, 다른 것들은 1, 하나는 2이면 2가 2배의 비율로 늘어난다.</p><h4 id="flex-shrink-0"><a href="#flex-shrink-0" class="headerlink" title="flex-shrink: 0;"></a>flex-shrink: 0;</h4><p>크기 클 수록 빨리 줄어든다. 0이면, 안줄어듬.</p><h4 id="flex-wrap-nowrap"><a href="#flex-wrap-nowrap" class="headerlink" title="flex-wrap: nowrap;"></a>flex-wrap: nowrap;</h4><p>wrap : 창 크기에 따라 줄바꿈이 됌.</p><p>nowrap : 줄바꿈이 안됌.</p><h4 id="align-items-stretch"><a href="#align-items-stretch" class="headerlink" title="align-items: stretch;"></a>align-items: stretch;</h4><p>stretch : 컨테이너만큼 아이템들을 늘림</p><p>flex-start/flex-end : 자기 크기를 유지함, 위/아래 부터 요소들 위치</p><p>baseline : 가운데 baseline에 맞추어 자기 크기를 유지함.</p><p>center : 수직 정렬</p><h4 id="justify-content-center"><a href="#justify-content-center" class="headerlink" title="justify-content: center"></a>justify-content: center</h4><p>수평 정렬</p><h4 id="order"><a href="#order" class="headerlink" title="order"></a>order</h4><p>순서 설정 order:0  order:1</p><h4 id="두-요소를-양-끝에-정렬하기"><a href="#두-요소를-양-끝에-정렬하기" class="headerlink" title="두 요소를 양 끝에 정렬하기"></a>두 요소를 양 끝에 정렬하기</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line">    width: 500px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#a</span> &#123;</span></span><br><span class="line">    width: 20%;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    margin-right: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-id">#b</span> &#123;</span></span><br><span class="line">    width: 20%;</span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: <span class="selector-tag">solid</span> 1<span class="selector-tag">px</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">    height: 200px;</span><br><span class="line">    margin-left: auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">        a</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">        b</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course/css-%EA%B8%B0%EB%B3%B8%EB%B6%80%ED%84%B0-%ED%99%9C%EC%9A%A9%EA%B9%8C%EC%A7%80/flex-%EA%B8%B0%ED%83%80-%EC%86%8D%EC%84%B1%EB%93%A4/" target="_blank" rel="noopener">https://www.inflearn.com/course/css-%EA%B8%B0%EB%B3%B8%EB%B6%80%ED%84%B0-%ED%99%9C%EC%9A%A9%EA%B9%8C%EC%A7%80/flex-%EA%B8%B0%ED%83%80-%EC%86%8D%EC%84%B1%EB%93%A4/</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.1. Javascript 변수</title>
      <link href="/2017/09/01/Javascript/2.1.%20javascript-%EB%B3%80%EC%88%98/"/>
      <url>/2017/09/01/Javascript/2.1.%20javascript-%EB%B3%80%EC%88%98/</url>
      
        <content type="html"><![CDATA[<h2 id="원시타입"><a href="#원시타입" class="headerlink" title="원시타입"></a>원시타입</h2><p><code>숫자</code> : number</p><p><code>문자열</code> : string</p><p><code>불리언(true/false)</code> : bool</p><p><code>null</code> : null 이라는 빈값을 할당, 비어있는 객체를 뜻함(null은 객체형 데이터-ex: array, object-의 빈 값을 의미)</p><p><code>undefined</code> : 변수를 선언만 하고 값을 할당하지 않음/즉, 자료형이 결정되지 않은 상태이다.</p><p><code>NaN</code> : Not a Number 숫자가 아닌 값을 뜻함, 숫자가 아닌 값을 형변환시나, 연산 불가시.</p><blockquote><p>값 복사시, <strong>실제 값이 복사</strong>된다</p></blockquote><h2 id="래퍼객체"><a href="#래퍼객체" class="headerlink" title="래퍼객체"></a>래퍼객체</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'coding'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">str.prop = <span class="string">'lala'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.prop); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>str은 원시 데이터타입으로 보이는데, 신기하게 객체처럼 메서드가 작동한다! 어떻게 된걸까?</p><blockquote><p>자바스크립트에서는 문자열과 관련된 어떤 작업을 하려고 할때 임시로 문자열 객체를 만들고 사용이 끝나면 제거한다.</p></blockquote><p>str.prop을 하는 순간 내부적으로 String 객체가 만들어 지고 저장되지만, 다시 해당 객체는 제거되기 때문에 str.prop을 호출하면 undefined가 나오는 것이다.</p><p>래퍼 객체는 Number, String, Boolean이 존재한다.</p><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><p><code>var a = {};</code> 일때 a는 객체를 가리키는 참조이다. 객체의 메모리 공간을 직접 접근이 불가능하므로, 참조를 통해 접근한다.</p><blockquote><p>값 복사시, <strong>객체 자체가 아닌 참조(포인터)를 복사</strong>한다. 따라서 한쪽을 조작시 다른 쪽도 반영된다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.x = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.x); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h2 id="매개변수-전달"><a href="#매개변수-전달" class="headerlink" title="매개변수 전달"></a>매개변수 전달</h2><p>위 변수들을 매개변수로 저장할 때에도, 값 복사와 동일한 결과가 나온다. 원시타입의 경우에는 값이 복사되고, 참조값의 경우에는 참조값이 복사된다.</p><blockquote><p>참조값을 함수로 넘겨 변경하면 밖에서도 변경된다</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addX</span>(<span class="params">ref</span>) </span>&#123;</span><br><span class="line">    ref.x = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">addX(a);</span><br><span class="line"><span class="built_in">console</span>.log(a.x); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="타입-판별"><a href="#타입-판별" class="headerlink" title="타입 판별"></a>타입 판별</h3><p>원시타입 : typeof </p><p>참조타입 : instanceof </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span> <span class="comment">// Object</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="가비지-컬렉션"><a href="#가비지-컬렉션" class="headerlink" title="가비지 컬렉션"></a>가비지 컬렉션</h3><p>함수 스코프를 벗어난 변수들은 자동으로 가비지 컬렉션의 대상이 된다.</p><blockquote><p>그러나 전역변수는 해당 웹사이트가 종료되기 전까지 계속 존재하므로 사용하지 않게 되면 null로 초기화해주는 습관이 필요하다.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://enarastudent.tistory.com/entry/null과-undefined의-차이" target="_blank" rel="noopener">http://enarastudent.tistory.com/entry/null과-undefined의-차이</a></p><p><a href="https://stackoverflow.com/questions/1068834/object-comparison-in-javascript" target="_blank" rel="noopener">https://stackoverflow.com/questions/1068834/object-comparison-in-javascript</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Cloud Function</title>
      <link href="/2017/09/01/Google/cloud_function/"/>
      <url>/2017/09/01/Google/cloud_function/</url>
      
        <content type="html"><![CDATA[<p>AWS lambda나, 구글 클라우드 펑션은 서버코드를 클라우드화해버려서 Serverless를 지향하는 아키텍쳐이다. 서버 없이 함수 호출 횟수만큼 과금한다. 구글 클라우더 펑션 기준으로 정리를 해본다.</p><h2 id="동작-조건"><a href="#동작-조건" class="headerlink" title="동작 조건"></a>동작 조건</h2><h5 id="개발-언어"><a href="#개발-언어" class="headerlink" title="개발 언어"></a>개발 언어</h5><p>node.js 6.9.1 버전 기반으로 작동.</p><h5 id="트리거"><a href="#트리거" class="headerlink" title="트리거"></a>트리거</h5><p>이벤트에 따라서, 코드를 수행해준다.</p><ul><li>Pub/Sub 메세지 큐에서 들어오는 메세지</li><li>Firebase 모바일 SDK에 의해서 발생되는 이벤트</li><li>Google Cloud Storage 서비스에 의해서 파일이 생성,수정,삭데 되었을때</li><li>HTTP로 들어오는 요청 (REST API)</li></ul><h2 id="시작하기"><a href="#시작하기" class="headerlink" title="시작하기"></a>시작하기</h2><h4 id="펑션-종류"><a href="#펑션-종류" class="headerlink" title="펑션 종류"></a>펑션 종류</h4><ul><li>HTTP 펑션 : request, response </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exports.httpFunction = <span class="function"><span class="keyword">function</span> <span class="title">httpFunction</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(req.method)&#123;</span><br><span class="line">          <span class="keyword">case</span> <span class="string">'POST'</span>:</span><br><span class="line">           res.send(<span class="string">'SUCCESS!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>백그라운드 펑션 : GCS, Pub/Sub 등의 이벤트로 트리거된다고 함.</li></ul><h4 id="배포하기"><a href="#배포하기" class="headerlink" title="배포하기"></a>배포하기</h4><ul><li>Web UI나 CLI를 통해 배포한다. <a href="http://bcho.tistory.com/1168" target="_blank" rel="noopener">조대협님 블로그 참조</a></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p> [조대협의 블로그] : <a href="http://bcho.tistory.com/1168" target="_blank" rel="noopener">http://bcho.tistory.com/1168</a></p>]]></content>
      
      
      <categories>
          
          <category> Google </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07. Javascript 모듈화</title>
      <link href="/2017/09/01/Javascript/7.%20javascript-%EB%AA%A8%EB%93%88%ED%99%94/"/>
      <url>/2017/09/01/Javascript/7.%20javascript-%EB%AA%A8%EB%93%88%ED%99%94/</url>
      
        <content type="html"><![CDATA[<p><em>모듈</em>은 관련된 기능을 하나로 묶어 다른 코드와 결합도를 줄이고, 재사용성을 높이기 위해 사용된다. </p><h2 id="ES5의-모듈-패턴"><a href="#ES5의-모듈-패턴" class="headerlink" title="ES5의 모듈 패턴"></a>ES5의 모듈 패턴</h2><ul><li><strong>즉시 실행 함수 표현식(IIFE, Immediately Invoked Function Expressions)</strong><ul><li>IIFE 내부의 코드 복잡도를 캡슐화하여 IIFE 코드가 무엇을 하는지 이해하지 않아도 된다.</li><li>IIFE 안에 변수를 정의하여 전역 스코프를 오염시키지 않는다. (IIFE 내부의 <code>var</code>문은 IIFE의 클로저 안에 남아있는다)</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 함수표현식은 함수를 반환하고, 즉시 이 함수를 호출할 수 있다.</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><blockquote><p>하지만 IIFE는 의존성 관리를 위한 메커니즘은 제공하지 않는다.</p></blockquote><ul><li><strong>노출식 모듈 패턴</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Expose API</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    sayHello: sayHello</span><br><span class="line">  &#125;</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 변수를 통해서 접근 가능</span></span><br><span class="line"><span class="built_in">module</span>.sayHello();</span><br></pre></td></tr></table></figure><blockquote><p>노출식 모듈 패턴 또한 의존성 관리 메커니즘은 제공하지 않는다.</p></blockquote><p>따라서..</p><p>모듈화 시키는데 대표적인 작업 그룹이 있었으니 <code>CommonJs</code>와 <code>AMD(Asynchronous Module Definition)</code>가 있다.</p><h2 id="AMD-Asynchronous-Module-Definition"><a href="#AMD-Asynchronous-Module-Definition" class="headerlink" title="AMD(Asynchronous Module Definition)"></a>AMD(Asynchronous Module Definition)</h2><p>브라우저 환경을 중심으로 설계된 규약으로, 필요한 모듈을 네트워크를 통해 내려받을 수 있도록 하는 비동기 모듈을 표준안으로 다루고 있다. 브라우저 환경의 JavaScript는 파일 스코프가 따로 존재하지 않기 때문에 이 define() 함수로 파일 스코프의 역할을 대신한다. </p><blockquote><p> define() 함수는 전역함수로 AMD 명세를 구현하는 모듈로더를 통해 실행시켜야 한다.</p></blockquote><p><code>define(모듈 식별 id, 먼저 로드되야 하는 모듈, 팩토리 함수);</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">"alpha"</span>, [<span class="string">"require"</span>, <span class="string">"exports"</span>, <span class="string">"beta"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, beta</span>) </span>&#123;  </span><br><span class="line">  exports.verb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 넘겨받는 인수를 사용해도 되고</span></span><br><span class="line">        <span class="keyword">return</span> beta.verb();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 또는 require()를 이용해</span></span><br><span class="line">        <span class="comment">// 얻어 온 모듈을 사용해도 된다.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">"beta"</span>).verb();  </span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>AMD 모듈 명세의 장점은 브라우저/서버사이드에서 동일한 코드로 동작한다는 점이다. define()함수를 통해 전역변수 문제를 해결하며, 모듈을 필요한 시점에 로드하는 Lazy-Load 기법을 응용할 수도 있다.</p><h2 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h2><p>서버 사이드 환경을 중심으로 설계된 규약.</p><p>Ajax의 부상과, Google의 V8엔진으로 인해  JavaScript를 브라우저에서뿐만 아니라, 서버사이드 애플리케이션이나 데스크톱 애플리케이션에서도 사용하려고 조직한 자발적 워킹 그룹.</p><p>Javascript가 성공하려면, 기술적인 맥락에 치중하는 것보다는 공동으로 표준을 정하는 것이 중요하다는 원칙 하에 CommonJS API 0.1을 발표.</p><ul><li>스코프 : 모든 모듈은 자신만의 독립적인 실행 영역이 있어야 한다.</li><li>정의 : 모듈 정의는 exports 객체를 이용한다.</li><li>사용 : 모듈 사용은 require 함수를 이용한다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">3</span>;  </span><br><span class="line">b = <span class="number">4</span>;</span><br><span class="line">exports.sum = <span class="function"><span class="keyword">function</span>(<span class="params">c, d</span>) </span>&#123;  </span><br><span class="line"><span class="keyword">return</span> a + b + c + d;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;  </span><br><span class="line">b = <span class="number">6</span>;  </span><br><span class="line"><span class="keyword">var</span> moduleA = <span class="built_in">require</span>(<span class="string">"fileA"</span>);  </span><br><span class="line">moduleA.sum(a,b); <span class="comment">// 3+4+5+6 = 18</span></span><br></pre></td></tr></table></figure><blockquote><p>위의 코드는 필요한 파일이 모두 있는 서버사이드 Javascript 환경을 전제로한다.  또한 브라우저에서는 require이나 exports가 없기 때문에 CommonJS 명세를 구현하는 모듈로더를 통해 실행시켜야 한다.</p></blockquote><p>브라우저 환경에서는, 필요한 모듈을 모두 내려받기 전까지는 아무것도 할 수 없으며, 파일 단위의 스코프가 없기 때문에 변수들이 덮어 씌워지게 된다. 그래서 CommonJS는 서버 모듈을 비동기적으로 클라이언트에 전송할 수 있는 <strong>모듈 전송 포맷</strong>을 추가로 정의하였다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 모듈 이름을 정의한다.</span></span><br><span class="line"><span class="built_in">require</span>.define(&#123;<span class="string">"complex-numbers/plus-two"</span>: <span class="function"><span class="keyword">function</span>(<span class="params">require, exports</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//콜백 함수 안에 모듈을 정의한다.</span></span><br><span class="line">    <span class="keyword">var</span> sum = <span class="built_in">require</span>(<span class="string">"./complex-number"</span>).sum;  </span><br><span class="line"></span><br><span class="line">    exports.plusTwo = <span class="function"><span class="keyword">function</span>(<span class="params">a</span>)</span>&#123;  </span><br><span class="line">      <span class="keyword">return</span> sum(a, <span class="number">2</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, [<span class="string">"complex-numbers/math"</span>]);</span><br><span class="line"><span class="comment">//먼저 로드되어야 할 모듈을 기술한다.</span></span><br></pre></td></tr></table></figure><h2 id="UMD-만능-모듈-정의"><a href="#UMD-만능-모듈-정의" class="headerlink" title="UMD 만능 모듈 정의"></a>UMD 만능 모듈 정의</h2><p>브라우저, Node.js에서 둘다 사용된다. 특별한 모듈로더가 없어도 실행 가능.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">root, factory</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    <span class="comment">// AMD를 위한 define이 존재한다면</span></span><br><span class="line">    define([<span class="string">'b'</span>], factory);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">'object'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">    <span class="comment">// Node.js나 CommonJS를 위한 module.exports가 존재한다면</span></span><br><span class="line">    <span class="built_in">module</span>.exports = factory(<span class="built_in">require</span>(<span class="string">'b'</span>));</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 브라우저 window 객체</span></span><br><span class="line">    root.returnExports = factory(root.b);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 함수 B를 사용한다.</span></span><br><span class="line">  <span class="comment">// exported할 값을 리턴할 수 있다.</span></span><br><span class="line">  <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h2 id="ES6-모듈-포맷"><a href="#ES6-모듈-포맷" class="headerlink" title="ES6 모듈 포맷"></a>ES6 모듈 포맷</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// lib.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">sayHello</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">sayBye</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Bye'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; sayHello &#125; <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line"><span class="keyword">import</span> sayBye <span class="keyword">from</span> <span class="string">'./lib'</span>; <span class="comment">// export default를 사용하면 괄호 사용안해도 된다.</span></span><br><span class="line"><span class="comment">// import &#123; sayHello as say &#125; from './lib'; 별칭도 지정 가능</span></span><br><span class="line"></span><br><span class="line">sayHello();</span><br><span class="line">sayBye();</span><br><span class="line"><span class="comment">// say(); 별칭으로 실행 가능</span></span><br></pre></td></tr></table></figure><p>전체 모듈을 한 번에 로드 가능</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> lib <span class="keyword">from</span> <span class="string">'./lib'</span>;</span><br><span class="line">lib.sayHello();</span><br></pre></td></tr></table></figure><blockquote><p>모든 브라우저에서 지원되지 않기 때문에, 코드를 실행하기 전에 Babel과 같은 변환기를 사용해 ES5 모듈 포맷(AMD or CommonJS)로 코드 변환 후 사용하는 것이 권장된다.</p></blockquote><h2 id="모듈-로더"><a href="#모듈-로더" class="headerlink" title="모듈 로더"></a>모듈 로더</h2><p>모듈 포맷으로 작성된 모듈을 해석하고 로드한다. </p><blockquote><p>CommonJS와 AMD 모듈을 브라우저에서 실행시키기 위해서는 모듈로더가 필요하다.</p><p>참고 : <a href="https://web.archive.org/web/20120826205255/http://blog.brianbeck.com/post/10667967423/node-js-require-in-the-browser" target="_blank" rel="noopener">https://web.archive.org/web/20120826205255/http://blog.brianbeck.com/post/10667967423/node-js-require-in-the-browser</a></p></blockquote><p>모듈 로더는 <strong>런타임에 실행</strong>된다.</p><ol><li>브라우저에서 모듈 로더를 로드한다.</li><li>모듈 로더에게 어떤 메인 어플리케이션 파일을 로드할 것인지 알려준다.</li><li>모듈 로더는 메인 애플리케이션 파일을 다운로드 하고 해석한다.</li><li>필요한 경우 모듈 로더가 파일을 다운로드 한다.</li></ol><ul><li>모듈로더 requireJS 적용</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/require.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="comment">// AMD나 CommonJS 방식으로 모듈화 시키면 된다.</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line"><span class="comment">// 구현 코드 위치</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> obj; </span><br><span class="line"><span class="comment">// 최종 구현 코드의 객체 반환;  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'example.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;  </span><br><span class="line"><span class="comment">// 실제 구현은 여기에...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="모듈-번들러"><a href="#모듈-번들러" class="headerlink" title="모듈 번들러"></a>모듈 번들러</h2><p>모듈 번들러는 <strong>빌드 타임</strong>에 실행된다. 모듈로더를 대체 하며, 빌드 타임에 번들 파일을 생성하기 위해 모듈 번들러를 실행한다. 브라우저에서는 이 번들 파일을 로드한다.</p><ul><li>대표적인 번들러로 weback, browserify가 있다.</li></ul><p>webpack : <a href="https://skout90.github.io/2017/08/12/Typescript/2.1.%20typescript-webpack-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/">https://skout90.github.io/2017/08/12/Typescript/2.1.%20typescript-webpack-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://d2.naver.com/helloworld/12864" target="_blank" rel="noopener">http://d2.naver.com/helloworld/12864</a></p><p><a href="https://github.com/codepink/codepink.github.com/wiki/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%93%88,-%EB%AA%A8%EB%93%88-%ED%8F%AC%EB%A7%B7,-%EB%AA%A8%EB%93%88-%EB%A1%9C%EB%8D%94%EC%99%80-%EB%AA%A8%EB%93%88-%EB%B2%88%EB%93%A4%EB%9F%AC%EC%97%90-%EB%8C%80%ED%95%9C-10%EB%B6%84-%EC%9E%85%EB%AC%B8%EC%84%9C" target="_blank" rel="noopener">https://github.com/codepink/codepink.github.com/wiki/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EB%AA%A8%EB%93%88,-%EB%AA%A8%EB%93%88-%ED%8F%AC%EB%A7%B7,-%EB%AA%A8%EB%93%88-%EB%A1%9C%EB%8D%94%EC%99%80-%EB%AA%A8%EB%93%88-%EB%B2%88%EB%93%A4%EB%9F%AC%EC%97%90-%EB%8C%80%ED%95%9C-10%EB%B6%84-%EC%9E%85%EB%AC%B8%EC%84%9C</a></p><p><a href="https://web.archive.org/web/20120826205255/http://blog.brianbeck.com/post/10667967423/node-js-require-in-the-browser" target="_blank" rel="noopener">https://web.archive.org/web/20120826205255/http://blog.brianbeck.com/post/10667967423/node-js-require-in-the-browser</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04. Array</title>
      <link href="/2017/09/01/Javascript/4.%20javascript-Array/"/>
      <url>/2017/09/01/Javascript/4.%20javascript-Array/</url>
      
        <content type="html"><![CDATA[<h2 id="선언방법"><a href="#선언방법" class="headerlink" title="선언방법"></a>선언방법</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>); <span class="comment">// length가 10인 배열</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> colors = <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>];</span><br></pre></td></tr></table></figure><h2 id="속성"><a href="#속성" class="headerlink" title="속성"></a>속성</h2><ul><li>Array.prototype.length</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(numbers.length); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>배열 길이보다 큰 인덱스를 지정하면, 길이가 자동으로 늘어남.</p><p>length 프로퍼티 변경시, 데이터 제거/빈슬롯 추가</p><p><code>colors[colors.length] = &quot;black&quot;;</code> 과 같이 마지막 데이터 추가 가능</p><ul><li>Array.prototype</li></ul><p>배열 생성자를 위한 프로토타입, 모든 배열 객체에 새로운 속성과 메서드를 추가할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.first) &#123;</span><br><span class="line">  <span class="built_in">Array</span>.prototype.first = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="메서드"><a href="#메서드" class="headerlink" title="메서드"></a>메서드</h2><ul><li>Array.isArray()</li></ul><p>주어진 값이 배열인지 아닌지 확인 <code>if(Array.isArray(value))</code></p><h3 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h3><ul><li>Array.prototype.toString()</li></ul><p>배열 값을 string으로 출력</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"blue"</span>, <span class="string">"green"</span>];</span><br><span class="line">colors.toString(); <span class="comment">// red,blue,green</span></span><br><span class="line">alert(colors); <span class="comment">// red,blue,green</span></span><br></pre></td></tr></table></figure><blockquote><p> alert의 경우 자동으로, toString을 실행하여 출력해준다.</p></blockquote><ul><li>Array.prototype.join()</li></ul><blockquote><p>array.join(‘구분자’)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'바람'</span>, <span class="string">'비'</span>, <span class="string">'불'</span>];</span><br><span class="line"><span class="keyword">var</span> myVar1 = a.join();      <span class="comment">// myVar1에 '바람,비,불'을 대입</span></span><br><span class="line"><span class="keyword">var</span> myVar2 = a.join(<span class="string">', '</span>);  <span class="comment">// myVar2에 '바람, 비, 불'을 대입</span></span><br><span class="line"><span class="keyword">var</span> myVar3 = a.join(<span class="string">' + '</span>); <span class="comment">// myVar3에 '바람 + 비 + 불'을 대입</span></span><br><span class="line"><span class="keyword">var</span> myVar4 = a.join(<span class="string">''</span>);    <span class="comment">// myVar4에 '바람비불'을 대입</span></span><br></pre></td></tr></table></figure><h3 id="스택-amp-큐"><a href="#스택-amp-큐" class="headerlink" title="스택 &amp; 큐"></a>스택 &amp; 큐</h3><ul><li>Array.prototype.push()</li></ul><blockquote><p>리턴 : 배열의 길이</p></blockquote><p>배열의 마지막 인덱스에 데이터를 추가함</p><ul><li>Array.prototype.pop()</li></ul><blockquote><p>리턴 : 마지막 인덱스 데이터</p></blockquote><p>배열의 마지막 데이터를 꺼냄.</p><ul><li>Array.prototype.unshift()</li></ul><blockquote><p>리턴 : 배열의 길이</p></blockquote><p>배열의 맨 앞 인덱스에 데이터를 추가함.</p><ul><li>Array.prototype.shift()</li></ul><blockquote><p>리턴 : 첫번째 인덱스 데이터</p></blockquote><p>배열의 첫번째 인덱스 데이터를 꺼냄</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">a.push(<span class="number">3</span>); <span class="comment">// 3</span></span><br><span class="line">a.push(<span class="number">5</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 1,2,3,5</span></span><br><span class="line">a.pop(); <span class="comment">// 5</span></span><br><span class="line">a.unshift(<span class="number">0</span>); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// 0,1,2,3</span></span><br><span class="line">a.shift(); <span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure><h3 id="조작"><a href="#조작" class="headerlink" title="조작"></a>조작</h3><ul><li>Array.prototype.sort()</li></ul><blockquote><p>파라미터 : 정렬순서 정의 함수</p><p>리턴 : 정렬된 배열(새로운 배열 만들지 않음)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">2</span>]; </span><br><span class="line">scores.sort(); <span class="comment">// [1, 10, 2, 21]</span></span><br><span class="line"><span class="comment">// 10이 2,</span></span><br><span class="line"><span class="comment">// Unicode 코드 포인트 순서에서 '10'이 '2'앞에 오기 때문에.</span></span><br><span class="line"></span><br><span class="line">scores.sort(<span class="function"><span class="keyword">function</span>(<span class="params">v1, v2</span>) </span>&#123; <span class="keyword">return</span> v1-v2; &#125;);</span><br><span class="line"><span class="comment">// [1, 2, 10, 21]</span></span><br></pre></td></tr></table></figure><p><code>compare 함수</code>는 결과가 양수일경우 두 숫자를 교환, 음수일 경우는 이동시키지 않는다.</p><ul><li>Array.prototype.reverse()</li></ul><p>배열의 인덱스를 반전시킨다.</p><ul><li>Array.prototype.concat()</li></ul><blockquote><p>파라미터 : 값 또는 배열</p><p>리턴 : 값들이 합쳐진 ‘새배열’</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.concat(<span class="string">"yellow"</span>); <span class="comment">// red,green,blue,yellow</span></span><br><span class="line"><span class="keyword">var</span> colors3 = colors2.concat(<span class="string">"powerblue"</span>, [<span class="string">"tomato"</span>, <span class="string">"brown"</span>]);</span><br><span class="line"><span class="comment">// red,green,blue,yellow,powerblue,tomato,brown</span></span><br></pre></td></tr></table></figure><ul><li><strong>Array.prototype.slice()</strong></li></ul><blockquote><p>파라미터 : 시작인덱스[, 마지막 인덱스]</p><p>리턴 : 조작된 ‘새배열’</p></blockquote><p>인자로 넘긴 시작인덱스부터 , 마지막인덱스(옵션)  까지 가져와 새 배열을 만든다. </p><blockquote><p> ex) 길이가 5인 배열에서, slice(-2, -1) = slice(3, 4) 와 같다</p></blockquote><ul><li><strong>Array.prototype.splice()</strong></li></ul><blockquote><p>파라미터 : 인덱스, 인덱스부터 지울 갯수, 인덱스에 추가할 data</p><p>리턴 : 삭제한 데이터의 배열을 반환/ 본래 배열 또한 조작되어 있음.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">'red'</span>, <span class="string">'green'</span>, <span class="string">'blue'</span>];</span><br><span class="line"><span class="keyword">var</span> removed = colors.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// colors : ["green", "blue"]</span></span><br><span class="line"><span class="comment">// removed : ["red"]</span></span><br><span class="line">colors.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="string">'yellow'</span>, <span class="string">'orange'</span>)</span><br><span class="line"><span class="comment">// colors : ["green", "yellow", "orange", "blue"]</span></span><br><span class="line">colors.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">'red'</span>, <span class="string">'blue'</span>);</span><br><span class="line"><span class="comment">// ["green", "red", "blue", "orange", "blue"]</span></span><br></pre></td></tr></table></figure><h3 id="위치-탐색"><a href="#위치-탐색" class="headerlink" title="위치/탐색"></a>위치/탐색</h3><ul><li>Array.prototype.indexOf()</li></ul><blockquote><p>파라미터 : 비교할 값</p><p>리턴 : Index 해당값이 있다면, 없으면 -1 </p></blockquote><p>배열에서 해당 값을 찾아 인덱스를 반환한다. 주의할 점은 <code>===</code> 로 비교된다는 것이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.indexOf(<span class="string">"1"</span>); <span class="comment">// -1</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a.indexOf(<span class="number">2</span>); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">'니콜'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> people = [&#123;<span class="attr">name</span>: <span class="string">'니콜'</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> morePeople = [person];</span><br><span class="line">people.indexOf(person); <span class="comment">// -1</span></span><br><span class="line">morePeople.indexOf(person); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.lastIndexOf()</li></ul><blockquote><p>파라미터 : 비교할 값</p><p> 리턴 : Index 해당값이 있다면, 없으면 -1 </p></blockquote><p>배열에서 해당 값을 찾아 인덱스를 반환한다. 주의할 점은 <code>===</code> 로 비교된다는 것이다.</p><ul><li>Array.prototype.findIndex()</li></ul><p>인자로 받은 함수의 조건에 일치하는 첫번째 인덱스 값을 리턴한다.</p><blockquote><p>파라미터 : 조건 함수(element, index, array)</p><p>리턴 : 찾은 첫번째 인덱스, (없다면) -1</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">15</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].findIndex(isBigEnough); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.find()</li></ul><p>인자로 받은 함수의 조건에 일치하는 첫번째 값을 리턴한다.</p><blockquote><p>파라미터 : 조건 함수(element, index, array)</p><p>리턴 : 찾은 첫번째 값</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'apples'</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'bananas'</span>, <span class="attr">quantity</span>: <span class="number">0</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'cherries'</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findCherries</span>(<span class="params">fruit</span>) </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> fruit.name === <span class="string">'cherries'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(inventory.find(findCherries));</span><br><span class="line"><span class="comment">// &#123; name: 'cherries', quantity: 5 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.includes()</li></ul><p>배열에 특정 요소가 포함되어 있는지 여부 확인</p><blockquote><p>파라미터 : 찾을 값, 시작할 인덱스</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.includes(<span class="number">2</span>); <span class="comment">// true </span></span><br><span class="line">a.includes(<span class="number">4</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="반복"><a href="#반복" class="headerlink" title="반복"></a>반복</h3><ul><li>Array.prototype.every()</li></ul><p>배열의 모든 값이 조건에 일치하는지 확인한다.</p><blockquote><p>파라미터 : 함수(item, index, array), (옵션) this로서 사용할 값 </p><p>리턴 : true/false</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> everyResult = numbers.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Array.prototype.some()</li></ul><p>배열에서 하나라도 조건에 일치하는 값이 있다면, true를 반환한다.</p><blockquote><p>파라미터 : 함수(item, index, array), (옵션) this로서 사용할 값 </p><p>리턴 : true/false</p></blockquote><ul><li>Array.prototype.filter()</li></ul><p>반환 배열에 포함시킬지 결정한다.</p><blockquote><p>파라미터 : 함수(item, index, array), (옵션) this로서 사용할 값 </p><p>리턴 : 필터된 새로운 배열</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> filterResult = numbers.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">3</span>;</span><br><span class="line">&#125;); <span class="comment">// [4, 5, 6]</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.map()</li></ul><p>원래 배열에 연산한 새 배열을 리턴해준다. (배열의 length는 바뀌지 않음)</p><blockquote><p>파라미터 : 함수(item, index, array), (옵션) this로서 사용할 값 </p><p>리턴 : 연산된 새로운 배열</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> mapResult = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item + <span class="number">2</span>;</span><br><span class="line">&#125;); <span class="comment">// [3,4,5,6,7,8]</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.forEach()</li></ul><p>배열을 순회한다.</p><blockquote><p>파라미터 : 함수(item, index, array), (옵션) this로서 사용할 값 </p><p>리턴 : 없음</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">numbers.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'index : '</span> + index + <span class="string">' item : '</span> + item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Array.prototype.reduce()</li></ul><p>배열 값들에 대해, 함수를 실행하여 값을 계산</p><blockquote><p>파라미터 : 함수(이전에 반환된값, 현재값, index, array), (옵션) 초기값</p><p>리턴 : 결과값</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(<span class="function"><span class="keyword">function</span>(<span class="params">previousValue, currentValue, currentIndex, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> previousValue + currentValue;</span><br><span class="line">&#125;); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><h3 id="ES6-문법"><a href="#ES6-문법" class="headerlink" title="ES6 문법"></a>ES6 문법</h3><ul><li>Array.from()</li></ul><p>(유사배열 객체)를 배열로 만든다. </p><p>유사 배열 객체 (<code>length</code> 속성과 인덱싱된 요소를 가진 객체)</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/iterable" target="_blank" rel="noopener">반복 가능한 객체</a> (<a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="noopener"><code>Map</code></a>과 <a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="noopener"><code>Set</code></a>와 같이 객체의 요소를 얻을 수 있는 객체)</p><blockquote><p>파라미터 : 유사배열 객체, (옵션) 배열모든 요소에 호출할 map함수, (옵션) this로 사용할 값</p><p>리턴 : 배열 객체</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">"foo"</span>, <span class="built_in">window</span>]);</span><br><span class="line"><span class="built_in">Array</span>.from(s); <span class="comment">// ["foo", window]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Map</span></span><br><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">8</span>]]);</span><br><span class="line"><span class="built_in">Array</span>.from(m); <span class="comment">// [[1, 2], [2, 4], [4, 8]]  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String</span></span><br><span class="line"><span class="built_in">Array</span>.from(<span class="string">"foo"</span>);                      </span><br><span class="line"><span class="comment">// ["f", "o", "o"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], x =&gt; x + x); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.entries()</li></ul><p>배열의 각 인덱스에 대한 key/value 쌍을 가지는 새로운 <code>Array Iterator</code>객체를 반환. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> eArr = arr.entries();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(eArr.next().value); <span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(eArr.next().value); <span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(eArr.next().value); <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure><p>eArr.next().value 의 결과는 key와 value 쌍을 가지는 배열이다.</p><ul><li>Array.prototype.keys()</li></ul><p>배열의 각 인덱스에 key 들을 가지는 새로운 <code>Array Interator</code>  객체를 반환</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr.keys();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; value: 2, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><ul><li>Array.prototype.values()</li></ul><p>배열의 각 인덱스에 대한 value를 가지는 새로운 <code>Array Iterator</code> 객체를 반환</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="noopener">https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p><p>프론트엔드 개발자를 위한 자바스크립트 프로그래밍 - 니콜라스 자카스</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Webstorm 에서 NodeJs Express 디버깅하기</title>
      <link href="/2017/08/20/Node.js/Webstorm-%EC%97%90%EC%84%9C-NodeJs-Express-%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0/"/>
      <url>/2017/08/20/Node.js/Webstorm-%EC%97%90%EC%84%9C-NodeJs-Express-%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>삽질 끝에 디버깅하는데 성공했다.. 방법을 공유한다.</p><blockquote><p>환경 : window 7, node express, nodemon</p></blockquote><p>nodemon을 통해 자동으로 서버를 재 실행되게 하는데, nodemon을 사용하지 않으면 더 간편하게 디버깅이 가능하다.</p><h4 id="nodemon을-사용할-경우"><a href="#nodemon을-사용할-경우" class="headerlink" title="nodemon을 사용할 경우"></a>nodemon을 사용할 경우</h4><p>nodemon을 사용할 경우에만 아래작업을 한다. 그렇지 않을 경우는 생략한다.</p><ol><li>메뉴 -&gt; Run -&gt; Edit Configurations</li><li>+ 버튼을 눌러 Node.js Remote Debug 을 생성한다.</li><li>port를 번호를 기억한다.</li></ol><p><img src="http://i.imgur.com/DNgzV16.png" alt="img"></p><h4 id="디버깅-설정"><a href="#디버깅-설정" class="headerlink" title="디버깅 설정"></a>디버깅 설정</h4><ol><li>+ 버튼을 눌러 Node.js를 생성한다.</li><li>Node interpreter에 node.exe의 경로를 셋팅한다</li><li>Node parameters에 nodemon의 경로를 넣는다. </li><li>(nodemon 사용할 시에만) Node parameters 뒤에 <code>--debug=위에서 기억한 포트</code> 를 입력한다.</li><li>Javascript file : 에 express 서버 실행 파일 <code>www</code> 파일을 입력한다.</li></ol><p><img src="http://i.imgur.com/uxW5JLW.png" alt="img"></p><h4 id="디버깅-시작"><a href="#디버깅-시작" class="headerlink" title="디버깅 시작"></a>디버깅 시작</h4><p>우선 위에서 등록한 node.js 와 remote 중에 node.js 를 <code>Run</code> 으로 실행한다. 그 후, remote를 <code>Debug</code>로 실행한다. 브레이킹 포인트를 찍으면 되는 모습을 확인할 수 있다!</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://vcfvct.wordpress.com/2015/02/13/debug-nodejs-with-nodemon-and-intellij/" target="_blank" rel="noopener">https://vcfvct.wordpress.com/2015/02/13/debug-nodejs-with-nodemon-and-intellij/</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 부분 체크아웃(sparse checkout)</title>
      <link href="/2017/08/20/GIT/Git-%EB%B6%80%EB%B6%84-%EC%B2%B4%ED%81%AC%EC%95%84%EC%9B%83/"/>
      <url>/2017/08/20/GIT/Git-%EB%B6%80%EB%B6%84-%EC%B2%B4%ED%81%AC%EC%95%84%EC%9B%83/</url>
      
        <content type="html"><![CDATA[<blockquote><p>$ mkdir [폴더이름]</p><p>$ cd [폴더이름]</p><p>$ git init</p><p>$ git remote add -f origin [git url]</p><p>$ git config core.sparseCheckout true</p></blockquote><p>해당 폴더 .git/info에 sparse-checkout 파일 생성후, 체크아웃할 폴더이름을 적어준다.</p><blockquote><p>$ git pull origin master</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository/13738951" target="_blank" rel="noopener">https://stackoverflow.com/questions/600079/how-do-i-clone-a-subdirectory-only-of-a-git-repository/13738951</a></p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02. NodeJs Express 시작하기</title>
      <link href="/2017/08/15/Node.js/2.%20NodeJS-Express%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"/>
      <url>/2017/08/15/Node.js/2.%20NodeJS-Express%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Node-JS-웹서버-만들기"><a href="#Node-JS-웹서버-만들기" class="headerlink" title="Node JS 웹서버 만들기"></a>Node JS 웹서버 만들기</h1><h2 id="NodeJS-다운로드"><a href="#NodeJS-다운로드" class="headerlink" title="NodeJS 다운로드"></a>NodeJS 다운로드</h2><p><a href="https://nodejs.org/ko/" target="_blank" rel="noopener">https://nodejs.org/ko/</a></p><h2 id="사용하기"><a href="#사용하기" class="headerlink" title="사용하기"></a>사용하기</h2><ul><li><strong>app.js 파일 생성</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello World'</span>);</span><br></pre></td></tr></table></figure><blockquote><p>$ node app.js</p></blockquote><p>터미널에서 위 명령어 입력하여 app.js 실행.</p><h2 id="웹-서버-만들기"><a href="#웹-서버-만들기" class="headerlink" title="웹 서버 만들기"></a>웹 서버 만들기</h2><ul><li><strong>app.js</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.writeHead(<span class="number">200</span>, &#123; <span class="string">'Content-Type'</span> : <span class="string">'text/plain'</span> &#125;);</span><br><span class="line">  res.end(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8000</span>);</span><br></pre></td></tr></table></figure><blockquote><p>$ node app.js</p></blockquote><p>명령어 입력 하면, <code>server.listen()</code>함수로 인해 8000포트로 접속을 대기함. 클라이언트가  <a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 으로 접속하면 Hello World가 나옴.</p><h2 id="express로-웹-서버-만들기"><a href="#express로-웹-서버-만들기" class="headerlink" title="express로 웹 서버 만들기"></a>express로 웹 서버 만들기</h2><p><code>express</code>는 Node.js에서 가장 유명한 웹 프레임워크 모듈. 더 간단하고 다양한 템플릿 엔진 기능을 활용해서 웹서버를 만들 수 있음.</p><ul><li><strong>app.js 작성</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>) <span class="comment">// 모듈 로딩</span></span><br><span class="line">  , http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">  , app = express()</span><br><span class="line">  , server = http.createServer(app); <span class="comment">// app객체와 http 서버 연결</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123; <span class="comment">// HTTP GET 메서드 처리</span></span><br><span class="line">  res.send(<span class="string">'Hello /'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'/world.html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 8000 번 포트로 서버 실행</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Express server listening on port '</span> + server.address().port);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>express를 설치</strong></li></ul><blockquote><p>$ npm install express</p></blockquote><p>app.js가 있는 디렉터리에서 명령어 실행할것, 명령을 실행하면 디렉터리에 node_modules 디렉터리가 생성됌. 그 안에 express 모듈들이 존재.</p><p>전역 설치를 위해서는</p><blockquote><p>$ npm install -g express</p></blockquote><p>그러면 app.js 디렉터리와 상관없이 모듈 사용 가능.</p><ul><li><strong>실행</strong></li></ul><blockquote><p>$ node app.js</p></blockquote><p>웹 브라우저에서 <strong><a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a></strong> 으로 접속하면 빈화면에 <strong>Hello /</strong>가 표시되고 <strong><a href="http://127.0.0.1:8000/world.html" target="_blank" rel="noopener">http://127.0.0.1:8000/world.html</a></strong>로 접속하면 <strong>Hello World</strong>가 표시</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://pyrasis.com/nodejs/nodejs-HOWTO" target="_blank" rel="noopener">http://pyrasis.com/nodejs/nodejs-HOWTO</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>검색 엔진 최적화 SEO</title>
      <link href="/2017/08/15/Web/SEO-%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%B5%9C%EC%A0%81%ED%99%94/"/>
      <url>/2017/08/15/Web/SEO-%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84%EC%B5%9C%EC%A0%81%ED%99%94/</url>
      
        <content type="html"><![CDATA[<h2 id="검색-엔진-최적화-SEO"><a href="#검색-엔진-최적화-SEO" class="headerlink" title="검색 엔진 최적화 SEO"></a>검색 엔진 최적화 SEO</h2><p>SEO(Search Engine Optimize) : 검색 엔진 최적화, 구글 엔진이 크롤링 보다 잘 하기 위해서 최적화가 필요.</p><ul><li>명확하고 동창적 title 태그 사용.</li><li>description 메타태그 활용하기</li><li>URL 구조 개선</li><li>..</li></ul><h3 id="canonical"><a href="#canonical" class="headerlink" title="canonical"></a>canonical</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"canonical"</span> <span class="attr">href</span>=<span class="string">"http://www.seo-korea.com"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>표준 URL을 설정함으로써, 검색엔진이 URL을 쉽게 최적화하여, PageRank 상승에 기여하고, 중복된 컨텐츠를 쉽게 없엘 수 있음.</p><h3 id="sitemap-xml"><a href="#sitemap-xml" class="headerlink" title="sitemap.xml"></a>sitemap.xml</h3><p>루트에 sitemap.xml 파일 만들어 놓기 <code>abc.com/sitemap.xml</code></p><ul><li>sitemap.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="sitemap.xsl"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sitemapindex</span> <span class="attr">xmlns</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io/post-sitemap.xml<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2017-07-11T07:52:30.093Z<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sitemap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io/page-sitemap.xml<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2017-07-11T07:52:32.290Z<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sitemap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sitemap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io/category-sitemap.xml<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2017-07-11T07:52:07.793Z<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">sitemap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sitemapindex</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>page-sitemap.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml-stylesheet type="text/xsl" href="sitemap.xsl"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">urlset</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:image</span>=<span class="string">"http://www.google.com/schemas/sitemap-image/1.1"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.sitemaps.org/schemas/sitemap/0.9"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changefreq</span>&gt;</span>daily<span class="tag">&lt;/<span class="name">changefreq</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span>&gt;</span>1<span class="tag">&lt;/<span class="name">priority</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">loc</span>&gt;</span>https://skout90.github.io/all-categories/<span class="tag">&lt;/<span class="name">loc</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastmod</span>&gt;</span>2017-07-11T07:52:32.290Z<span class="tag">&lt;/<span class="name">lastmod</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">changefreq</span>&gt;</span>weekly<span class="tag">&lt;/<span class="name">changefreq</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">priority</span>&gt;</span>0.8<span class="tag">&lt;/<span class="name">priority</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">urlset</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="구글-Search-Console-등록"><a href="#구글-Search-Console-등록" class="headerlink" title="구글 Search Console 등록"></a>구글 Search Console 등록</h3><p><a href="https://www.google.com/webmasters/tools/home" target="_blank" rel="noopener">https://www.google.com/webmasters/tools/home</a></p><p>내 URL을 등록하고, 위의 sitemap.xml도 함께 등록해주자.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://www.aun-korea.com/%EB%A7%88%EC%BC%80%ED%84%B0%EC%83%81%EC%8B%9D-%EB%84%A4%EC%9D%B4%EB%B2%84-%EA%B5%AC%EA%B8%80%EC%97%90-%EA%B2%80%EC%83%89%EB%85%B8%EC%B6%9C%EC%9D%B4-%EC%9E%98%EB%90%98%EA%B2%8C-%ED%95%98%EB%8A%94/" target="_blank" rel="noopener">http://www.aun-korea.com/%EB%A7%88%EC%BC%80%ED%84%B0%EC%83%81%EC%8B%9D-%EB%84%A4%EC%9D%B4%EB%B2%84-%EA%B5%AC%EA%B8%80%EC%97%90-%EA%B2%80%EC%83%89%EB%85%B8%EC%B6%9C%EC%9D%B4-%EC%9E%98%EB%90%98%EA%B2%8C-%ED%95%98%EB%8A%94/</a></p><p><a href>http://tobeonline.tistory.com/entry/구글이-제시하는-검색엔진-최적화SEO-방법</a></p><p><a href="http://www.seo-korea.com/%ED%91%9C%EC%A4%80-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%84%A4%EC%A0%95-link-rel-canonical/" target="_blank" rel="noopener">http://www.seo-korea.com/%ED%91%9C%EC%A4%80-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%84%A4%EC%A0%95-link-rel-canonical/</a></p><p><a href="http://futurecreator.github.io/2016/06/15/hexo-google-site-search-console-analytics/" target="_blank" rel="noopener">http://futurecreator.github.io/2016/06/15/hexo-google-site-search-console-analytics/</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>REST 란</title>
      <link href="/2017/08/15/Web/REST%EB%9E%80/"/>
      <url>/2017/08/15/Web/REST%EB%9E%80/</url>
      
        <content type="html"><![CDATA[<p>자원지향구조 기반, 자원에 고유한 URI를 부여하고 HTTP METHOD를 통한 CRUD 작업을 함으로써, 각 컴포넌트간의 상호작용을 촉진하고 서로 정보를 교환.</p><h2 id="특징"><a href="#특징" class="headerlink" title="특징"></a>특징</h2><ul><li><p>무상태성(Stateless)</p><p>쿠키/세션 불필요, 직관적인 오브젝트로의 접근</p></li><li><p>자원지향구조(ROA : Resource Oriented Architecture)로 웹 서비스 컨텐츠, DB 내용 등을 하나의 자원으로 파악.</p></li><li><p>자원에 고유한 URI 부여.</p><p>ex) <a href="http://www.myhome.com/posts/123" target="_blank" rel="noopener">www.myhome.com/posts/123</a></p></li><li><p>HTTP METHOD 활용(POST, GET, PUT, DELETE)</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><strong>김민균 IT 블로그</strong> <a href="http://blog.naver.com/mkzzang0928/220947811979" target="_blank" rel="noopener">RESTFUL API</a></p><p><a href="http://egloos.zum.com/killins/v/3092502" target="_blank" rel="noopener">http://egloos.zum.com/killins/v/3092502</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>소켓이란</title>
      <link href="/2017/08/15/Web/%EC%86%8C%EC%BC%93%EC%9D%B4%EB%9E%80/"/>
      <url>/2017/08/15/Web/%EC%86%8C%EC%BC%93%EC%9D%B4%EB%9E%80/</url>
      
        <content type="html"><![CDATA[<h4 id="http-프로토콜-기반으로-웹브라우저와-웹-서버간-양방향-통신을-지원하기-위한-표준-API"><a href="#http-프로토콜-기반으로-웹브라우저와-웹-서버간-양방향-통신을-지원하기-위한-표준-API" class="headerlink" title="http 프로토콜 기반으로 웹브라우저와 웹 서버간 양방향 통신을 지원하기 위한 표준 API"></a>http 프로토콜 기반으로 웹브라우저와 웹 서버간 <code>양방향 통신</code>을 지원하기 위한 표준 API</h4><ul><li>서버와 클라이언트에는 각각 소켓이라는 부분이 있고 이 부분을 통해 서로 정보를 공유한다.</li></ul><h2 id="기존의-양방향-통신"><a href="#기존의-양방향-통신" class="headerlink" title="기존의 양방향 통신"></a>기존의 양방향 통신</h2><p>http 규격 자체가 서버로의 단방향 통신을 위해 만들어짐. webSocket 이전에는 일반 http request에 트릭을 이용해 실시간인 것 처럼 보이게 하였다.</p><ol><li><p>polling : 클라이언트가 평범한 http request를 계속 날림, but.. 비효율적</p><p><img src="http://2.bp.blogspot.com/-cvWY81etsao/ViZSUVxywxI/AAAAAAAAMHo/wxrd6dIntM8/s320/HttpPolling.gif" alt="img"></p></li><li><p>long polling : 클라이언트가 http request를 날리고 기다림, 서버의 이벤트 response를 받고 연결 종료. but 이벤트의 시간간격이 좁거나 다수 클라이언트 동시 접속시 부하 문제 있음.</p><p><img src="http://2.bp.blogspot.com/-eL9rxi8th2A/ViZSW0ggEwI/AAAAAAAAMH4/k4S4-dRz3t4/s320/HttpLongPolling.gif" alt="img"></p></li><li><p>streaming : 서버로 http request를 날리고, 요청 끊지 않고 필요한 메세지만 보내기를 반복.</p><p><img src="http://4.bp.blogspot.com/-sRVlAdeU-Kw/ViZSWw-wB2I/AAAAAAAAMH0/3CmKGISDV-A/s320/HttpStreaming.gif" alt="img"></p></li></ol><h2 id="Web-Socket"><a href="#Web-Socket" class="headerlink" title="Web Socket"></a>Web Socket</h2><p>HTML5 표준의 일부로 webSocket이 만들어지게 된다.</p><blockquote><p>webSocket이 기존의 일반 TCP Socket과 다른 점은 최초 접속이 일반 http request를 통해 handshaking 과정을 통해 이루어 진다는 점. http request를 그대로 사용하기 때문에 기존 80, 443 포트로 접속하여도 방화벽 열지 않고도 양방형 통신이 가능, CORS 적용 과정도 동일.</p></blockquote><h6 id="그러나…-web-socket-미지원-브라우저들이-있음-IE의-경우-11만-지원"><a href="#그러나…-web-socket-미지원-브라우저들이-있음-IE의-경우-11만-지원" class="headerlink" title="그러나…. web socket 미지원 브라우저들이 있음. IE의 경우 11만 지원"></a>그러나…. web socket 미지원 브라우저들이 있음. IE의 경우 11만 지원</h6><h4 id="지원하면-web-socket을-쓰고-아니면-이전의-트릭을-사용하자"><a href="#지원하면-web-socket을-쓰고-아니면-이전의-트릭을-사용하자" class="headerlink" title="지원하면 web socket을 쓰고, 아니면 이전의 트릭을 사용하자!"></a>지원하면 web socket을 쓰고, 아니면 이전의 트릭을 사용하자!</h4><ul><li><p><strong>socket.io(<a href="http://socket.io" target="_blank" rel="noopener">http://socket.io</a>)</strong></p><p>node.js 기반으로 만들어진 기술, 브라우저에 구애 받지 않고 실시간 통신이 가능. 모든 코드가 javascript로 작성되어 있어서 자바 개발자들은 socket.io를 쓸 수 없다. <a href="https://github.com/keesun/mod-socket-io" target="_blank" rel="noopener">자바로 개발이 가능하게 해주는 방법</a>이 몇가지 있긴한 것 같지만 역시 javascript 기반 솔루션은 javascript로 개발해야 문제발생을 줄일 수 있음.</p></li><li><p><strong>sockJS(<a href="http://sockjs.org" target="_blank" rel="noopener">http://sockjs.org</a>)</strong></p><p>springframework에서 websocket 지원. 서버 개발시 스프링 설정에서 일반 webSocket으로 통신할지 SockJS 호환으로 통신할지 결정할 수 있음.</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://blog.naver.com/PostView.nhn?blogId=myca11&logNo=80146459609" target="_blank" rel="noopener">오바나딩요-Socket이란</a></p><p><a href="http://adrenal.tistory.com/20" target="_blank" rel="noopener">시나몬브레드webSocket 으로 개발하기 전에 알고 있어야 할 것들</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01. NodeJS 란?</title>
      <link href="/2017/08/15/Node.js/1.%20NodeJS%EB%9E%80/"/>
      <url>/2017/08/15/Node.js/1.%20NodeJS%EB%9E%80/</url>
      
        <content type="html"><![CDATA[<p>Node.js를 이해하기 위해서는 먼저 javascript에 대해 이해할 필요가 있음.</p><p>##자바스크립트</p><p>자바스크립트는 넷스케이프 웹 브라우저에서 HTML의 DOM(Document Object Model) 객체를 제어하기 위해 개발되었음.</p><p>초창기에는 매우 느렸으나, 구글이 크롬과 함께 V8 자바스크립트 엔진을 개발하면서, 기존 웹브라우저에 포함된 엔진보다 월등히 빨라진 성능을 보였음.</p><p>기존 JS엔진들은 자바스크립트를 바이트코드로 변환하거나 인터프리트하여 처리했지만 V8은 JIT(Just In Time) 컴파일 방식을 사용하여 성능을 획기적으로 개선.</p><blockquote><p>JIT 컴파일 방식은 자바스크립트를 인터프리트하지 않고 실행 즉시 기계어(x86, ARM등)로 컴파일</p></blockquote><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><p>2009년 라이언 달이라는 프로그래머가 구글의<code>V8 자바스크립트 엔진</code>을 웹 브라우저가 아닌 서버로 사용할 수 있도록 만든 것이 Node.js</p><ul><li>JS의 간결함</li><li>V8 JS 엔진의 월등한 속도</li><li>단일 스레드(Non-bloking I/O)</li><li>소켓 통신</li><li>HTTP 웹서버로 실행 가능</li><li>npm(Node Packaged Modules)은 Node.js로 만들어진 모듈을 인터넷에서 받아서 설치해주는 패키지 매니저.</li></ul><h2 id="단일-스레드-모델-Non-blocking-I-O"><a href="#단일-스레드-모델-Non-blocking-I-O" class="headerlink" title="단일 스레드 모델, Non-blocking I/O"></a>단일 스레드 모델, Non-blocking I/O</h2><p>멀티 스레드 방식은 복잡한 동기화 문제가 골칫거리 였음. 동기화 모델이나 락에 대해 학습해야 하고 쓰기가 상당히 어려워 생산성 저하로 이어짐.</p><p>Node.js는 멀티스레드 모델 대신 단일 스레드 모델과 Non-blocking I/O를 채택.</p><ul><li><strong>Blocking 방식</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> result;</span><br><span class="line">   result = sum(<span class="number">1</span>, <span class="number">2</span>);          <span class="comment">// 1</span></span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"sum: %d"</span>, result);   <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;                    <span class="comment">// 3      </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 C언어 코드의 실행은 그냥 줄 순서, printf 함수로 결과를 찍으려면 sum 함수가 끝날 때까지 기다려야 함. 이를 <code>Blocking</code> 방식이라고 함.</p><ul><li><strong>Non-Blocking 방식</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./컴배콤.txt'</span> <span class="comment">/* 1 */</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(data); <span class="comment">// 3</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hello JavaScript'</span>); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p><code>fs.readFile()</code>의 결과값이 나올때까지 기다리지 않고, 그다음 줄 <code>console.log(&#39;Hello JavaScript&#39;);</code>를 실행해버림. 시간 경과 후 파일을 다 읽었으면 <code>console.log(data)</code>가 실행됌.</p><blockquote><p>총 2개의 스레드로 작동 : 시간이 오래 걸리는 작업은 워커 스레드로 보내고, 메인 스레드는 코드를 계속 실행. 워커 스레드에서 작업이 끝나면 결과를 다시 메인 스레드로 보냄.</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://pyrasis.com/nodejs/nodejs-HOWTO" target="_blank" rel="noopener">http://pyrasis.com/nodejs/nodejs-HOWTO</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03. 소켓 통신</title>
      <link href="/2017/08/15/Node.js/3.%20%EC%86%8C%EC%BC%93%ED%86%B5%EC%8B%A0/"/>
      <url>/2017/08/15/Node.js/3.%20%EC%86%8C%EC%BC%93%ED%86%B5%EC%8B%A0/</url>
      
        <content type="html"><![CDATA[<p>소켓 통신을 하기 위한 Node.JS에 대표적인 통신기술들</p><ul><li>TCP Socket</li><li>Web Socket</li><li>socket.io</li></ul><p><a href="https://github.com/skout90/TIL/blob/master/Web/socket.md" target="_blank" rel="noopener">https://github.com/skout90/TIL/blob/master/Web/socket.md</a></p><h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><ul><li>모듈 설치</li></ul><blockquote><p>$ npm install websocket</p></blockquote><ul><li>app.js 생성</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> WebSocketServer = <span class="built_in">require</span>(<span class="string">'websocket'</span>).server;</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Received request for '</span> + req.url);</span><br><span class="line">  res.writeHead(<span class="number">404</span>);</span><br><span class="line">  res.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클라이언트 접속을 대기</span></span><br><span class="line">server.listen(<span class="number">8000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Server is listening on port 8000'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// WebSocket객체의 wsSever생성</span></span><br><span class="line">wsServer = <span class="keyword">new</span> WebSocketServer(&#123;</span><br><span class="line">  httpServer: server,</span><br><span class="line">  autoAcceptConnections: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 서버에 request 요청이 오면</span></span><br><span class="line">wsServer.on(<span class="string">'request'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 연결 객체를 만듬, 이름을 지정 'echo'</span></span><br><span class="line">  <span class="keyword">var</span> connection = request.accept(<span class="string">'echo'</span>, request.origin); </span><br><span class="line">  <span class="comment">// 메세지가 오면 처리할 함수 지정</span></span><br><span class="line">  connection.on(<span class="string">'message'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (message.type === <span class="string">'utf8'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Received message: '</span> + message.utf8Data);</span><br><span class="line">      <span class="comment">// 클라이언트에게 메세지를 보냄.</span></span><br><span class="line">      connection.sendUTF(message.utf8Data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (message.type === <span class="string">'binary'</span>) &#123;</span><br><span class="line">      connection.sendBytes(message.binaryData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    connection.on(<span class="string">'close'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">reasonCode, description</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Peer '</span> + connection.remoteAddress + <span class="string">' disconnected.'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 웹소켓이 브라우저에 존재하면</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="string">'WebSocket'</span> <span class="keyword">in</span> <span class="built_in">window</span>) &#123;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 웹소켓 서버주소와 프로토콜(echo)을 지정하여, WebSocket 객체를 만듦.</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> ws = <span class="keyword">new</span> WebSocket(<span class="string">'ws://127.0.0.1:8000'</span>, <span class="string">'echo'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 웹소켓이 연결되었을때</span></span></span><br><span class="line"><span class="javascript">  ws.onopen = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#status'</span>).text(<span class="string">'connected'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span></span><br><span class="line"><span class="javascript">      ws.send(<span class="string">'Hello '</span> + i);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 메세지를 받았을때</span></span></span><br><span class="line"><span class="javascript">  ws.onmessage = <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#messages'</span>).append($(<span class="string">'&lt;li&gt;'</span>).text(<span class="string">'Received message: '</span> + evt.data));</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="comment">// 연결이 끊어졌을때</span></span></span><br><span class="line"><span class="javascript">  ws.onclose = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#status'</span>).text(<span class="string">'connection is closed'</span>);</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">  $(<span class="string">'#status'</span>).text(<span class="string">'WebSocket not supported.'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">Status: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"status"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">Messages: <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>실행</li></ul><blockquote><p>$ node app.js</p></blockquote><p><code>app.js</code> 실행후, <code>index.html</code> 파일을  더블클릭하여 웹브라우저에서 열면 서버로부터 받은 메세지가 나오는 것을 확인할 수 있다.</p><h2 id="socket-io"><a href="#socket-io" class="headerlink" title="socket.io"></a>socket.io</h2><p>서버와 클라이언트가 한번씩 메세지를 주고 받는 예제 작성</p><ul><li>모듈 설치</li></ul><blockquote><p>$ npm install socket.io</p></blockquote><ul><li><strong>app.js</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 클라이언트의 접속을 대기</span></span><br><span class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>).listen(<span class="number">8000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 클라이언트가 접속할 시에 실행</span></span><br><span class="line">io.sockets.on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 'server' 이름으로 메시지 전송</span></span><br><span class="line">  socket.emit(<span class="string">'server'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world 1'</span> &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 'client' 이름의 메시지 수신했을 때</span></span><br><span class="line">  socket.on(<span class="string">'client'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>index.html</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Example Socket.IO<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://127.0.0.1:8000/socket.io/socket.io.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> socket = io.connect(<span class="string">'http://127.0.0.1:8000'</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 'server'라는 이름의 메세지가 왔을때 </span></span></span><br><span class="line"><span class="javascript">socket.on(<span class="string">'server'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  $(<span class="string">'#messages'</span>).append($(<span class="string">'&lt;li&gt;'</span>).text(<span class="string">'Received message: '</span> + data.hello));</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="javascript"><span class="comment">// 'client'라는 이름으로 메세지 송신</span></span></span><br><span class="line"><span class="javascript">socket.emit(<span class="string">'client'</span>, &#123; <span class="attr">hello</span>: <span class="string">'world 2'</span> &#125;);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">Messages: <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>실행</li></ul><blockquote><p>$ node app.js</p></blockquote><p><code>app.js</code> 실행후, <code>index.html</code> 파일을  더블클릭하여 웹브라우저에서 열면 서버로부터 받은 메세지가 나오는 것을 확인할 수 있다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://pyrasis.com/nodejs/nodejs-HOWTO" target="_blank" rel="noopener">http://pyrasis.com/nodejs/nodejs-HOWTO</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04. 템플릿 엔진 - EJS, Jade, Handlebars</title>
      <link href="/2017/08/15/Node.js/4.%20%ED%85%9C%ED%94%8C%EB%A6%BF%EC%97%94%EC%A7%84/"/>
      <url>/2017/08/15/Node.js/4.%20%ED%85%9C%ED%94%8C%EB%A6%BF%EC%97%94%EC%A7%84/</url>
      
        <content type="html"><![CDATA[<p>express로 웹서버를 만들더라도 파일을 하나하나 정의하기에는 무리가 있음. express에서 템플릿 엔진을 사용하면 PHP나 JSP처럼 서버에서 HTML을 동적으로 생성할 수 있음.</p><h2 id="EJS-Embedded-JavaScript"><a href="#EJS-Embedded-JavaScript" class="headerlink" title="EJS(Embedded JavaScript)"></a>EJS(Embedded JavaScript)</h2><p>서버에서 자바스크립트로 HTML을 생성하는 템플릿 엔진</p><ul><li>설치 및 실행</li></ul><blockquote><p>$ npm install -g express-generator</p><p>$ express –ejs</p></blockquote><ul><li>구조<ul><li>app.js</li><li>bin<ul><li>www</li></ul></li><li>package.json</li><li>public<ul><li>images</li><li>javascripts</li><li>stylesheets<ul><li>style.css</li></ul></li></ul></li><li>routes<ul><li>index.js</li><li>users.js</li></ul></li><li>views<ul><li>error.ejs</li><li>index.ejs</li></ul></li></ul></li></ul><blockquote><p>$ npm install</p></blockquote><p>생성후 위 명령어만 입력하면 package.js에 정의된 모듈이 모두 설치됌. bin 디렉터리 아래 <code>www</code> 파일이 생성되는데 node로 실행</p><blockquote><p>$ node bin/www</p></blockquote><p>웹 브라우정에서 <strong><a href="http://127.0.0.1:3000" target="_blank" rel="noopener">http://127.0.0.1:3000</a></strong> 으로 접속하면. 빈화면에 <strong>Express Welcome to Express</strong> 라고 표시됌.</p><ul><li>EJS 기본 문법</li></ul><p><code>view/index.eja</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to <span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;% %&gt;</code> 안에 자바스크립트를 사용하면 됌. 변수 출력은 <code>&lt;%= 변수 %&gt;</code>로 가능.</p><ul><li>Welcome to Express 5번 출력하기</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">'stylesheet'</span> <span class="attr">href</span>=<span class="string">'/stylesheets/style.css'</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    &lt;% for (var i = 0; i &lt; 5; i++) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Welcome to <span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>title 변수의 위치</li></ul><p><code>routes/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET home page. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>템플릿 엔진을 이용해서 HTML 생성 가능 아래 사이트 참조</p><p><a href="https://code.google.com/p/embeddedjavascript/wiki/ViewHelpers" target="_blank" rel="noopener">https://code.google.com/p/embeddedjavascript/wiki/ViewHelpers</a></p><h2 id="Jade"><a href="#Jade" class="headerlink" title="Jade"></a>Jade</h2><p>HTML을 간략화한 템플릿 엔진</p><blockquote><p>$ npm install -g express-generator</p><p>$ express</p></blockquote><p>express-generator에 아무 옵션을 주지 않으면 Jade로 어플리케이션을 생성</p><ul><li>구조<ul><li>app.js</li><li>bin<ul><li>www</li></ul></li><li>package.json</li><li>public<ul><li>images</li><li>javascripts</li><li>stylesheets<ul><li>style.css</li></ul></li></ul></li><li>routes<ul><li>index.js</li><li>users.js</li></ul></li><li>views<ul><li>error.ejs</li><li>index.ejs</li></ul></li></ul></li></ul><p>EJS와 같이 <code>npm install</code> 입력하면 package.js에 정의된 모듈들이 설치.</p><blockquote><p>$ node bin/www</p></blockquote><p><a href="http://127.0.0.1:3000으로" target="_blank" rel="noopener">http://127.0.0.1:3000으로</a> 접속하면 <strong>Express Welcome to Express</strong>라고 나오는 것을 확인.</p><ul><li>views/layout.jade</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title= title</span><br><span class="line">    link(rel=&apos;stylesheet&apos;, href=&apos;/stylesheets/style.css&apos;)</span><br><span class="line">  body</span><br><span class="line">    block content</span><br></pre></td></tr></table></figure><ul><li>views/index.jade</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1= title</span><br><span class="line">  p Welcome to #&#123;title&#125;</span><br></pre></td></tr></table></figure><p><code>index.jade</code>는 <code>extends layout</code> 문법을 이용하여 <code>layout.jade</code>파일을 상속.</p><p>layout.jade, index.jade 파일 모두 <code>block content</code>가 있음.</p><p>layout.jade 파일에서 block을 선언하고, index.jade 파일에서 block을 정의</p><ul><li>변수 출력 :  ex) <code>h1= title</code> </li><li>변수 할당 : <code>${ }</code></li></ul><ul><li>jade의 예제</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extends layout</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  h1= title</span><br><span class="line">  p Welcome to #&#123;title&#125;</span><br><span class="line"></span><br><span class="line">  #&#123; items = [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] &#125;</span><br><span class="line">  each item, i in items</span><br><span class="line">    li #&#123;item&#125;: #&#123;i&#125;</span><br></pre></td></tr></table></figure><p><code>routes/index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><h2 id="Handlebars"><a href="#Handlebars" class="headerlink" title="Handlebars"></a>Handlebars</h2><p>템플릿 엔진 핸들바스의 사용법을 정리해보자.</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><blockquote><p>$ npm install –save handlebars</p></blockquote><h4 id="템플릿-작성-hbs"><a href="#템플릿-작성-hbs" class="headerlink" title="템플릿 작성(.hbs)"></a>템플릿 작성(.hbs)</h4><p>변수 바인딩, if문, each문의 예제</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">id</span>=<span class="string">"entry-template"</span> <span class="attr">type</span>=<span class="string">"text/x-handlebars-template"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entry"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123;body&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"comments"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> comments&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;title&#125;&#125;</span><span class="xml">&gt;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><span class="template-variable">&#123;&#123;body&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">if</span></span> author&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;firstName&#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123;lastName&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123;<span class="builtin-name">else</span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Unknown Author<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">if</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="JS-code-작성"><a href="#JS-code-작성" class="headerlink" title="JS code 작성"></a>JS code 작성</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> source   = $(<span class="string">"#entry-template"</span>).html();</span><br><span class="line"><span class="keyword">var</span> template = Handlebars.compile(source);</span><br><span class="line"><span class="keyword">var</span> context = &#123;<span class="attr">title</span>: <span class="string">"My New Post"</span>,</span><br><span class="line">               body: <span class="string">"This is my first post!"</span>,</span><br><span class="line">               comments: [</span><br><span class="line">                 &#123; <span class="attr">title</span>: <span class="string">'1'</span>, <span class="attr">body</span>: <span class="string">'xx'</span>&#125;,</span><br><span class="line">    &#123; <span class="attr">title</span>: <span class="string">'2'</span>, <span class="attr">body</span>: <span class="string">'yy'</span>&#125;</span><br><span class="line">               ],</span><br><span class="line">               author: &#123; <span class="attr">firstName</span>: <span class="string">'Nam'</span>, <span class="attr">lastName</span>: <span class="string">'Junho'</span>&#125;</span><br><span class="line">              &#125;;</span><br><span class="line"><span class="keyword">var</span> html    = template(context);</span><br></pre></td></tr></table></figure><h4 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h4><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123;&gt; userMessage tagName="h1" &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> comments&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;&gt; userMessage tagName="h2" &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Handlebars.registerPartial(<span class="string">'userMessage'</span>,</span><br><span class="line">    <span class="string">'&lt;&#123;&#123;tagName&#125;&#125;&gt;By &#123;&#123;author.firstName&#125;&#125; &#123;&#123;author.lastName&#125;&#125;&lt;/&#123;&#123;tagName&#125;&#125;&gt;'</span></span><br><span class="line">    + <span class="string">'&lt;div class="body"&gt;&#123;&#123;body&#125;&#125;&lt;/div&gt;'</span>);</span><br><span class="line"><span class="keyword">var</span> context = &#123;</span><br><span class="line">  author: &#123;<span class="attr">firstName</span>: <span class="string">"Alan"</span>, <span class="attr">lastName</span>: <span class="string">"Johnson"</span>&#125;,</span><br><span class="line">  body: <span class="string">"I Love Handlebars"</span>,</span><br><span class="line">  comments: [&#123;</span><br><span class="line">    author: &#123;<span class="attr">firstName</span>: <span class="string">"Yehuda"</span>, <span class="attr">lastName</span>: <span class="string">"Katz"</span>&#125;,</span><br><span class="line">    body: <span class="string">"Me too!"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>결과</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>By Alan Johnson<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span>I Love Handlebars<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Comments<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>By Yehuda Katz<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span>Me Too!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="helper"><a href="#helper" class="headerlink" title="helper"></a>helper</h4><p>위의 <code>each</code>나 <code>if</code> 는 내장 helper이며, 그 외에도 다양한 helper를 사용하기 위해서는 swag를 사용하면 된다</p><blockquote><p>$ npm install swag –save</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Browser --&gt;</span><br><span class="line">&lt;script src=&quot;../path_to/handlebars.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;../path_to/swag.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;Swag.registerHelpers(Handlebars);&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">// Node</span><br><span class="line">Handlebars = require(&apos;handlebars&apos;);</span><br><span class="line">Swag = require(&apos;swag&apos;);</span><br><span class="line">Swag.registerHelpers(Handlebars);</span><br></pre></td></tr></table></figure><p>string, date, collections 등을 조작하는 다양한 헬퍼를 확인할 수 있다.</p><p><a href="https://github.com/elving/swag" target="_blank" rel="noopener">https://github.com/elving/swag</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://pyrasis.com/nodejs/nodejs-HOWTO" target="_blank" rel="noopener">http://pyrasis.com/nodejs/nodejs-HOWTO</a></p><p><a href="http://handlebarsjs.com/" target="_blank" rel="noopener">http://handlebarsjs.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs ORM을 위한 Bookshelf, Knex</title>
      <link href="/2017/08/15/Node.js/NodeJs-ORM%EC%9D%84-%EC%9C%84%ED%95%9C-Bookshelf-Knex/"/>
      <url>/2017/08/15/Node.js/NodeJs-ORM%EC%9D%84-%EC%9C%84%ED%95%9C-Bookshelf-Knex/</url>
      
        <content type="html"><![CDATA[<p>Node.Js 로 ORM 환경을 지원하기 위해, Knex와 Bookshelf를 활용해보자.</p><p>Knex는 쿼리 빌더를 위한 라이브러리이며, Bookshelf는 knex가 만든 쿼리를 DB에 날리기 위한 JS 라이브러리 이다.</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><blockquote><p>$ npm install knex –save<br>$ npm install bookshelf –save<br>// 아래와 같은 DB 엔진을 선택하여 설치<br>$ npm install pg<br>$ npm install mysql<br>$ npm install mariasql<br>$ npm install sqlite3</p></blockquote><ul><li>초기화</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> knex = <span class="built_in">require</span>(<span class="string">'knex'</span>)(&#123;</span><br><span class="line">  client: <span class="string">'mysql'</span>,</span><br><span class="line">  connection: &#123;</span><br><span class="line">    host     : <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    user     : <span class="string">'your_database_user'</span>,</span><br><span class="line">    password : <span class="string">'your_database_password'</span>,</span><br><span class="line">    database : <span class="string">'myapp_test'</span>,</span><br><span class="line">    charset  : <span class="string">'utf8'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bookshelf = <span class="built_in">require</span>(<span class="string">'bookshelf'</span>)(knex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> User = bookshelf.Model.extend(&#123;</span><br><span class="line">  tableName: <span class="string">'users'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="쿼리-실행"><a href="#쿼리-실행" class="headerlink" title="쿼리 실행"></a>쿼리 실행</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new 없이 모델 초기화</span></span><br><span class="line"><span class="keyword">let</span> subscriber = User.forge();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 방법 4가지</span></span><br><span class="line">subscriber.query(<span class="string">'where'</span>, <span class="string">'other_id'</span>, <span class="string">'='</span>, <span class="string">'5'</span>)</span><br><span class="line">.fetch(). then(<span class="function">(<span class="params">model</span>)=&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">subscriber.query(&#123;<span class="attr">where</span>: &#123;<span class="attr">other_id</span>: <span class="string">'5'</span>&#125;, <span class="attr">orWhere</span>: &#123;<span class="attr">key</span>: <span class="string">'value'</span>&#125;&#125;)</span><br><span class="line">.fetch(). then(<span class="function">(<span class="params">model</span>)=&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">subscriber.query(<span class="function"><span class="keyword">function</span>(<span class="params">qb</span>) </span>&#123;</span><br><span class="line">qb.where(<span class="string">'other_person'</span>, <span class="string">'LIKE'</span>, <span class="string">'%Demo'</span>).orWhere(<span class="string">'other_id'</span>, <span class="string">'&gt;'</span>, <span class="number">10</span>);&#125;)</span><br><span class="line">.fetch(). then(<span class="function">(<span class="params">model</span>)=&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> qb = subscriber.query();</span><br><span class="line">qb.where(&#123;<span class="attr">id</span>: <span class="number">1</span>&#125;).select()</span><br><span class="line">.then(<span class="function">(<span class="params">resp</span>)=&gt;</span>&#123;&#125;);</span><br></pre></td></tr></table></figure><h4 id="관계-정의"><a href="#관계-정의" class="headerlink" title="관계 정의"></a>관계 정의</h4><p>.belongsToMany, .hasMany 와 같이 관계를 정의해줄 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">var</span> User = bookshelf.Model.extend(&#123;</span><br><span class="line">  tableName: <span class="string">'users'</span>,</span><br><span class="line">  posts: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hasMany(Posts, <span class="string">'userId'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  tags: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.belongsToMany(Tag, <span class="string">'posts'</span>, <span class="string">'userId'</span>, <span class="string">'tagId'</span>)  </span><br><span class="line">  &#125;</span><br><span class="line">  wallet : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.hasOne(Wallets, <span class="string">'userId'</span>);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Posts = bookshelf.Model.extend(&#123;</span><br><span class="line">  tableName: <span class="string">'posts'</span>,</span><br><span class="line">  tags: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.belongsToMany(Tag);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Wallets = booksehlf.Model.extend(&#123;</span><br><span class="line">    tableName: <span class="string">'wallets'</span>,</span><br><span class="line">    user : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.belongsTo(Users, <span class="string">'userId'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Tag = bookshelf.Model.extend(&#123;</span><br><span class="line">  tableName: <span class="string">'tags'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>hasOne</strong></li></ul><blockquote><p>return this.hasOne(Wallets, ‘userId’);  </p></blockquote><p>1: 0..1 의 관계이다.  Wallets에서 <code>userId</code>로 질의를한다. </p><blockquote><p>User.forge().fetch({withRelated: [‘wallet’]})</p><p>SELECT * FROM wallets WHERE userId = ‘사용자ID’;</p></blockquote><ul><li><strong>hanMany</strong></li></ul><blockquote><p>return this.hasMany(Posts, ‘userId’);</p></blockquote><p>1:다 의 관계를 갖는다.  Posts에서 <code>userId</code>로 질의를 한다.</p><blockquote><p>User.forge().fetch({withRelated: [‘posts’]})</p><p>SELECT * FROM posts WHERE  postId IN (userId들 ….)</p></blockquote><ul><li><strong>belongsTo</strong> </li></ul><blockquote><p>var Wallet = .. 생략</p><p>return this.belongsTo(Users, ‘userId’);</p></blockquote><p>Users테이블에서 Wallet의 userId로 질의를 한다. 0..1 : 1 의 관계를 가진다.</p><blockquote><p>Wallet.forge().fetch({withRelated: [‘user’]})</p><p>SELECT * FROM users WHERE userId = ‘사용자’;</p></blockquote><ul><li><strong>belongsToMany</strong></li></ul><blockquote><p>var User = …</p><p>return this.belongsToMany(Tag, ‘posts’, ‘userId’, ‘tagId’)  </p></blockquote><p>posts의 userId와 tagId를 사용하여, User와 Tag를 조인한다.</p><p>조인할때 디폴트로 user의 id와 tag의 id를 사용한다.</p><p>다른 포린키로 조인하려면, 5,6번째인자로 user의 foreignKey/tag의 foreignKey를 쓴다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://bookshelfjs.org/#Model-instance-has" target="_blank" rel="noopener">http://bookshelfjs.org/#Model-instance-has</a></p>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 클로저(Closure)</title>
      <link href="/2017/08/13/Javascript/javascript-%ED%81%B4%EB%A1%9C%EC%A0%80/"/>
      <url>/2017/08/13/Javascript/javascript-%ED%81%B4%EB%A1%9C%EC%A0%80/</url>
      
        <content type="html"><![CDATA[<p>내부함수가 외부함수의 맥락(지역변수)에 접근할 수 있는 것을 가리킨다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outterFunc</span>(<span class="params"></span>) </span>&#123;  <span class="comment">// 외부함수</span></span><br><span class="line">  <span class="keyword">var</span> title = <span class="string">'lalala'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">innerFunc</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 내부함수</span></span><br><span class="line">    alert(title);</span><br><span class="line">  &#125;</span><br><span class="line">  innerFunc();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어떠한 함수가 있는데, 그 함수 안에서만 사용되는 함수가 있다. 이것을 내부함수로 선언한다면 , 가독성을 높이고 오류 가능성을 줄일 수 있다.</p><p>그리고 이때, <strong>내부함수에서 외부의 함수의 지역변수에 접근 할 수 있는데 이것을 클로저(Closure)</strong>라고 한다.</p><ul><li><strong>외부함수가 더 이상 사용되지 않는 경우에도, 내부함수가 외부함수의 지역변수에 접근할 수 있다.</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outterFunc</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 외부함수</span></span><br><span class="line">  <span class="keyword">var</span> title =<span class="string">'외부함수의 지역변수'</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   <span class="comment">// 내부함수</span></span><br><span class="line">    <span class="built_in">console</span>.log(title);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> innerFunc = outterFunc();</span><br><span class="line">innerFunc(); <span class="comment">// 외부함수의 지역변수</span></span><br></pre></td></tr></table></figure><p>내부 함수를 리턴함으로서, 외부함수가 사라졌음에도 불구하고, 외부함수의 지역변수에 접근이 가능하다.</p><blockquote><p>아래 코드를 보자.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]()); <span class="comment">// 5 5 5 5 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 결과를, 0 1 2 3 4 가 나오도록 바꾸고 싶다면. 클로저를 사용해야 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  arr[i] = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123; <span class="comment">// 외부 함수를 익명함수로 선언후 인자를 넘겨 바로 실행</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;   <span class="comment">// 내부 함수를 리턴</span></span><br><span class="line">      <span class="keyword">return</span> id; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125; (i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[index]()); <span class="comment">// 0 1 2 3 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>arr[0]의 외부함수의 지역변수는 실행당시 맥락(i=0)을 유지하고 있는다.</p><h3 id="클로저의-구조"><a href="#클로저의-구조" class="headerlink" title="클로저의 구조"></a>클로저의 구조</h3><p>클로저로, 외부 함수의 스코프 변수에 접근 가능한 이유는, 내부 함수의 스코프 체인에 외부함수의 스코프가 포함되기 때문이다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cCompFunc</span>(<span class="params">pName</span>) </span>&#123;   </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">o1, o2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> v1 = o1[pName];</span><br><span class="line">      <span class="keyword">var</span> v2 = o2[pName];</span><br><span class="line">      <span class="keyword">return</span> v1 - v2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> compare = cCompFunc(<span class="string">'name'</span>);</span><br><span class="line"><span class="keyword">var</span> result = compare(&#123;<span class="attr">name</span>:<span class="string">'Junho'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'JJong'</span>&#125;);</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/tBVLpkB.png" alt="img"></p><ol><li>cCompFunc(외부함수)가 실행을 마치고 익명함수를 반환</li><li>익명함수의 스코프 체인에는 외부함수의 활성화 객체, 전역함수가 포함</li><li>익명함수는 외부함수의 변수 전체에 접근</li></ol><blockquote><p>익명함수의 스코프 체인에서 외부함수를 참조하고 있기 때문에, 외부함수의 활성화 객체는 가비지 컬렉션의 대상이 되지 않는다.</p></blockquote><h4 id="내부-함수는-외부함수-변수에-저장된-마지막-값만-알-수-있음"><a href="#내부-함수는-외부함수-변수에-저장된-마지막-값만-알-수-있음" class="headerlink" title="내부 함수는 외부함수 변수에 저장된 마지막 값만 알 수 있음."></a>내부 함수는 외부함수 변수에 저장된 마지막 값만 알 수 있음.</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">      result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = createFunc();</span><br><span class="line">a[<span class="number">0</span>](); <span class="comment">// </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>](); <span class="comment">// 10</span></span><br><span class="line">a[<span class="number">1</span>](); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><ul><li>모든 함수가 10을 반환, 모든 함수가 createFunc()의 활성화 객체의 같은 변수 i를 참조한다.</li></ul><blockquote><p>수정 버젼</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">        result[i] = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                  <span class="keyword">return</span> num; </span><br><span class="line">              &#125;;</span><br><span class="line">        &#125;(i);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a = createFunc();</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>](); <span class="comment">// 0</span></span><br><span class="line">a[<span class="number">1</span>](); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>function 함수를 한번 더 감싸고, 실행시킴으로써, num에는 i자체가 아니라 값이 복사되어 들어오게 된다. 내부함수에는 복사된 제각기 다른 num을 가지게 되어 의도한대로 값을 출력할 수 있다.</p><h4 id="클로저의-this-객체"><a href="#클로저의-this-객체" class="headerlink" title="클로저의 this 객체"></a>클로저의 this 객체</h4><p>this객체는 런타임에서 함수가 실행 중인 컨텍스트 객체를 가리킨다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Window"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">"Obj"</span>,</span><br><span class="line">          getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">alert(obj.getNameFunc()); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><p><strong>익명함수는 외부 함수의 this**</strong>객체를 직접<strong>**적으로 접근할 수 없다.</strong></p><ul><li>수정 버젼</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Window"</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">"Obj"</span>,</span><br><span class="line">          getNameFunc: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> that.name;</span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;</span><br><span class="line">          &#125;;</span><br><span class="line">alert(obj.getNameFunc()); <span class="comment">// Obj</span></span><br></pre></td></tr></table></figure><p><code>that</code>은 고유 변수이므로 클로저가 접근할 수 있다.</p><ul><li>조금 특이한 패턴</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(obj.getName)(); <span class="comment">// Obj</span></span><br><span class="line">(obj.getName = obj.getName)(); <span class="comment">// Window</span></span><br></pre></td></tr></table></figure><p>obj.getName에 할당한 값은 함수 자체이므로 this 값은 유지되지 않는다.</p><h2 id="클로저는-어디서-사용되는가"><a href="#클로저는-어디서-사용되는가" class="headerlink" title="클로저는 어디서 사용되는가?"></a>클로저는 어디서 사용되는가?</h2><ul><li>클로저로 블록스코프 흉내내기</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 코드</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><code>function(){}</code> 을 괄호로 감싸서 함수 표현식을 알리고 바로 실행한다.(안쓰면 에러가 난다)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputNumbers</span>(<span class="params">count</span>) </span>&#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;count; i++) &#123;</span><br><span class="line">            alert(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">  alert(i); <span class="comment">// 에러</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 패턴은 모듈화나, 공동작업시에 namespace로서 변수가 중복사용되지 않게끔 하는 용도로 많이 사용된다. 해당 스코프가 끝나면 메모리도 회수되기 때문에 메모리 효율도 좋다.</p><ul><li>private variable</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myHome</span>(<span class="params">thing</span>) </span>&#123;    <span class="comment">// 외부함수</span></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="comment">// 객체 리턴</span></span><br><span class="line">    getThing : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 내부함수</span></span><br><span class="line">      <span class="keyword">return</span> thing; <span class="comment">// 외부함수의 지역변수를 사용할 수 있다.</span></span><br><span class="line">    &#125;,</span><br><span class="line">    setThing : <span class="function"><span class="keyword">function</span>(<span class="params">_thing</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">typeof</span> _thing === <span class="string">'String'</span>) &#123;</span><br><span class="line">        thing = _thing;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'물건은 문자열이어야 합니다.'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> notebook = myHome(<span class="string">'Gram'</span>); <span class="comment">// notebook에 객체를 담음.</span></span><br><span class="line"><span class="keyword">var</span> tv = myHome(<span class="string">'iptv'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(notebook.getThing()); <span class="comment">// Gram</span></span><br><span class="line"><span class="built_in">console</span>.log(tv.getThing()); <span class="comment">// iptv</span></span><br><span class="line"></span><br><span class="line">notebook.setThing(<span class="string">'mac'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(notebook.getThing()); <span class="comment">// mac</span></span><br></pre></td></tr></table></figure><p>notebook과 tv는 똑같은 객체(myHome의 리턴값)를 담고 있지만, 각 메서드들이 접근할 수 있는 thing(외부함수의 지역변수)의 값은 다름.</p><p>getThing/setThing은 public이지만, 내부적으로 사용하고 있는 thing은 외부함수의 지역변수로 이미 사라졌기 때문에 내부함수를 통해서만 접근할 수 있는 변수가 된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course/%EC%A7%80%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4-%EA%B8%B0%EB%B3%B8/%EB%82%B4%EB%B6%80%ED%95%A8%EC%88%98-%EC%99%B8%EB%B6%80%ED%95%A8%EC%88%98/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%A7%80%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4-%EA%B8%B0%EB%B3%B8/%EB%82%B4%EB%B6%80%ED%95%A8%EC%88%98-%EC%99%B8%EB%B6%80%ED%95%A8%EC%88%98/</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.2. Function 콜백, Promise</title>
      <link href="/2017/08/13/Javascript/5.2.%20Javascript-%EC%BD%9C%EB%B0%B1/"/>
      <url>/2017/08/13/Javascript/5.2.%20Javascript-%EC%BD%9C%EB%B0%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="콜백이란"><a href="#콜백이란" class="headerlink" title="콜백이란?"></a>콜백이란?</h2><p>콜백이란 인자로 함수를 넘겨주고, 인자를 받은 함수가 해당 함수를 호출하는 것을 의미.</p><p>JS에서는 <code>함수가 인자로 전달 될 수 있는 특성</code>을 이용하여 콜백이 동작한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculator</span> (<span class="params">func, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 로직이 끝나면 콜백 함수를 호출</span></span><br><span class="line">  <span class="keyword">return</span> func(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callbackFunc</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(calculator(callbackFunc, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><ul><li><strong>비동기 처리를 위해서도 콜백이 사용된다.</strong></li></ul><p>JS는 본래 비동기적으로 실행이된다. 그래서, 작업이 끝나고 실행되야할 함수를 콜백함수로 넘김으로써, 작업이 끝나고 실행되도록 할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params">valueCallback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    result = <span class="number">10</span>;</span><br><span class="line">    valueCallback(result);</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">f1(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2 초 후에, f1 함수 인자로 넘긴, 함수가 실행되는 것을 확인할 수 있다.</p><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>위 콜백 함수를 좀더 효율적으로 작성할 수 있게 해주는 것이 Promise 이다. Promise는 ES6이상에서는 언어에 내장되어 있으며, 그 이전 버젼에서는 <a href="http://bluebirdjs.com/docs/getting-started.html" target="_blank" rel="noopener">bluebird</a>와 <a href="https://github.com/kriskowal/q" target="_blank" rel="noopener">Q.js</a> 등의 라이브러리를 추가하여 사용할 수 있다.</p><p>Promise 구현체를 사용하여 명세에 따라 정의한 Promise 객체는 모두 <code>then()</code> 메소드를 가지고 있어서 Callback을 사용하지 않고도 절차적으로 동작하는 코드를 짤 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; resolve(<span class="number">10</span>); &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">f1().then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="bluebird"><a href="#bluebird" class="headerlink" title="bluebird"></a>bluebird</h3><p>Promise의 구현체인 bluebird에 대해 알아보자</p><h4 id="코어"><a href="#코어" class="headerlink" title="코어"></a>코어</h4><ul><li><strong>new Promise()</strong></li></ul><p>Promise의 가장 기초가 되는 단위로, <code>new Promise(function(resolve, reject) {...})</code> 의 형태를 가진다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(error) reject(error);</span><br><span class="line">    <span class="keyword">else</span> resolve(success);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>then()</strong></li></ul><p>promise의 함수가 정상적으로 마무리를 했다면 resolve를 실행하는데, 그럼 .then()이 실행된다. 그 전까지 then의 실행은 보류된다.</p><blockquote><p> 위에서 실행했던 함수의 결과값을 매개변수로 갖을 수 있다.</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">    <span class="keyword">else</span> resolve(users);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">users</span>)</span>&#123;</span><br><span class="line">    res.send(users);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>catch()</strong></li></ul><p>에러가 발생하여 reject가 수행되었을때, 실행된다. catch를 마지막에 연결하면 모든 에러처리를 한꺼번에 할 수도 있다.</p><ul><li><strong>Promise.all()</strong></li></ul><p>Promise들을 병렬로 처리할 수 있게 해준다. then의 매개변수값으로 배열이 들어온다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">        <span class="keyword">else</span> resolve(result1);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// ....</span></span><br><span class="line">        <span class="keyword">if</span>(err) reject(err);</span><br><span class="line">        <span class="keyword">else</span> resolve(result2);</span><br><span class="line">    &#125;</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result1 = result[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> result2 = result[<span class="number">1</span>];</span><br><span class="line">  <span class="comment">// ....</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>spread()</strong></li></ul><p>사용법은 then과 동일하지만 파라미터를 돌려주는 방식이 다르다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line"><span class="comment">//위와 동일    </span></span><br><span class="line">]).spread(<span class="function"><span class="keyword">function</span>(<span class="params">result1, result2</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>finally</strong>()</li></ul><p>무조건 마지막에 실행된다. 에러가 있어도 무조건 실행이 된다.</p><ul><li><strong>bind</strong>()</li></ul><p>then과 then 사이에서 변수를 공통으로 쓸 수 있게 만들어준다. .bind를 사용한 함수내에서 변수의 사용이 자유롭다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">somethingAsync().bind(&#123;&#125;).spread(function (aValue, bValue) &#123;</span><br><span class="line">    <span class="keyword">this</span>.aValue = aValue;</span><br><span class="line">    <span class="keyword">this</span>.bValue = bValue;</span><br><span class="line">    <span class="keyword">return</span> somethingElseAsync(aValue, bValue);</span><br><span class="line">&#125;).then(function (cValue) &#123;</span><br><span class="line">    <span class="comment">// 여기서도 그대로 쓸 수 있다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.aValue + <span class="keyword">this</span>.bValue + cValue;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>Promise.map()</strong></li></ul><p>인자로 literable한 인자를 넣으면, 반복되며 해당 함수를 호출할 수 있게 해준다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promises = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fileNames.length; ++i) &#123;</span><br><span class="line">    promises.push(fs.readFileAsync(fileNames[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"done"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Using Promise.map:</span></span><br><span class="line"><span class="built_in">Promise</span>.map(fileNames, <span class="function"><span class="keyword">function</span>(<span class="params">fileName</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Promise.map awaits for returned promises as well.</span></span><br><span class="line">    <span class="keyword">return</span> fs.readFileAsync(fileName);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"done"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="프로미스화"><a href="#프로미스화" class="headerlink" title="프로미스화"></a>프로미스화</h4><ul><li><strong>Promise.promisify()</strong></li></ul><p>인자로 받은 해당 함수를 promise wrapper로 감싸 리턴한다.  함수의 마지막 인자는 callback 함수이어야 한다.</p><blockquote><p> readFile을 promise로 바꾸는 예제</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> readFile = <span class="built_in">Promise</span>.promisify(<span class="built_in">require</span>(<span class="string">"fs"</span>).readFile);</span><br><span class="line"></span><br><span class="line">readFile(<span class="string">"myfile.js"</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(contents);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The result of evaluating myfile.js"</span>, result);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Error reading file"</span>, e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>Promise.promisifyAll()</strong></li></ul><p>모듈 객체의 함수들을 모두, promise wrapper로 감싸 리턴한다. promisify의 복수형</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">Promise</span>.promisifyAll(<span class="built_in">require</span>(<span class="string">"fs"</span>));</span><br><span class="line"></span><br><span class="line">fs.readFileAsync(<span class="string">"myfile.js"</span>, <span class="string">"utf8"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">contents</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(contents);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e.stack);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="동기화-감시"><a href="#동기화-감시" class="headerlink" title="동기화 감시"></a>동기화 감시</h4><ul><li>.isFulfilled / .isRejected / .isPending / .isCancelled</li></ul><p>Promise 안에서 로직을 실행하는 동안, 다음의 상태를 갖는다.</p><blockquote><p>pending</p><p>아직 약속을 수행 중인 상태</p><p>fulfilled</p><p>약속이 지켜진 상태</p><p>rejected</p><p>약속이 못지켜진 상태</p><p>settled</p><p>약속이 지켜졌든 안지켜졌든 결론이 난 상태</p></blockquote><p>상태 값을 확인 할 수 있다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(result.isFulfilled()) &#123; &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course/%EC%A7%80%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4-%EA%B8%B0%EB%B3%B8/%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%9C%EB%B0%B1%EA%B3%BC-ajax/" target="_blank" rel="noopener">https://www.inflearn.com/course/%EC%A7%80%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%96%B8%EC%96%B4-%EA%B8%B0%EB%B3%B8/%EB%B9%84%EB%8F%99%EA%B8%B0-%EC%BD%9C%EB%B0%B1%EA%B3%BC-ajax/</a></p><p><a href="http://bluebirdjs.com/docs/api-reference.html" target="_blank" rel="noopener">http://bluebirdjs.com/docs/api-reference.html</a></p><p><a href="http://programmingsummaries.tistory.com/325" target="_blank" rel="noopener">http://programmingsummaries.tistory.com/325</a></p><p><a href="https://stackoverflow.com/questions/38340674/javascript-settimeout-callback" target="_blank" rel="noopener">https://stackoverflow.com/questions/38340674/javascript-settimeout-callback</a></p><p><a href="http://html5around.com/wordpress/tutorials/node-js%EC%97%90%EC%84%9C-bluebird-%EA%B8%B0%EC%B4%88-%EC%82%AC%EC%9A%A9%EB%B2%95-callback-%EC%A7%80%EC%98%A5%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0/" target="_blank" rel="noopener">http://html5around.com/wordpress/tutorials/node-js%EC%97%90%EC%84%9C-bluebird-%EA%B8%B0%EC%B4%88-%EC%82%AC%EC%9A%A9%EB%B2%95-callback-%EC%A7%80%EC%98%A5%EC%97%90%EC%84%9C-%EB%B2%97%EC%96%B4%EB%82%98%EA%B8%B0/</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Prototype(프로토타입)</title>
      <link href="/2017/08/12/Javascript/javascript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/"/>
      <url>/2017/08/12/Javascript/javascript-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85/</url>
      
        <content type="html"><![CDATA[<p>프로토타입이란, 어떠한 객체가 만들어지기 위해 그 객체의 모태가 되는 원형을 뜻한다.</p><p><img src="http://insanehong.kr/post/javascript-prototype/@img/object.jpeg" alt="img"></p><p> <strong>__proto__</strong> </p><p>A라는 객체를 만들기 위해 사용된 원형, 상위로부터 물려받은 객체의 정보.</p><p><strong>constructor.prototype</strong></p><p>프로토타입 프로퍼티로, 자신을 원형으로 만들어질 다른 객체가 참조할 프로토 타입, 자식에게 물려줄 객체의 정보.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#예제 1.</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">A.x=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> C = <span class="keyword">new</span> A();</span><br><span class="line">B.x(); <span class="comment">// hello</span></span><br><span class="line">C.x(); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#예제 2.</span></span><br><span class="line"><span class="keyword">var</span> A = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; &#125;;</span><br><span class="line">A.x=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">&#125;;</span><br><span class="line">A.prototype.x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> B = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">var</span> C = <span class="keyword">new</span> A();</span><br><span class="line">B.x(); <span class="comment">// world</span></span><br><span class="line">C.x(); <span class="comment">// world</span></span><br></pre></td></tr></table></figure><p>B와 C는 constructor.prototype정보를 바탕으로, 생성이 되기 때문에 예제 2와 같이 prototype을 수정해 주어야 한다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://insanehong.kr/post/javascript-prototype/" target="_blank" rel="noopener">http://insanehong.kr/post/javascript-prototype/</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>export class와 default export class</title>
      <link href="/2017/08/12/Typescript/typescript-default-export/"/>
      <url>/2017/08/12/Typescript/typescript-default-export/</url>
      
        <content type="html"><![CDATA[<h3 id="default-export"><a href="#default-export" class="headerlink" title="default export"></a>default export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> MyClass &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>export defulat의 경우, 파일당 하나의 default export만 가능하다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyClass <span class="keyword">from</span> <span class="string">"./MyClass"</span>;</span><br></pre></td></tr></table></figure><p>다음과 같이 rename을 해줄 수도 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> MyClassAlias <span class="keyword">from</span> <span class="string">"./MyClass"</span>;</span><br></pre></td></tr></table></figure><h3 id="named-export"><a href="#named-export" class="headerlink" title="named export"></a>named export</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyClass.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyClass &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyOtherClass &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><p>export의 경우, 다중 export가 가능하다, 이름도 지정 가능.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;MyClass, MyOtherClass <span class="keyword">as</span> MyOtherClassAlias&#125; <span class="keyword">from</span> <span class="string">"./MyClass"</span>;</span><br></pre></td></tr></table></figure><h3 id="어떤-것을-사용할까"><a href="#어떤-것을-사용할까" class="headerlink" title="어떤 것을 사용할까?"></a>어떤 것을 사용할까?</h3><p>프로젝트가 복잡해질 수록, named export가 유용하다는 의견이 있다. default export의 경우 해당 파일에서만 유효하지만, named export의 경우는 다른 파일들의 클래스에서도 유효하다고 한다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/33305954/typescript-export-vs-default-export" target="_blank" rel="noopener">https://stackoverflow.com/questions/33305954/typescript-export-vs-default-export</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript String으로 Element 생성</title>
      <link href="/2017/08/12/Javascript/string-%EC%9C%BC%EB%A1%9C-element%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
      <url>/2017/08/12/Javascript/string-%EC%9C%BC%EB%A1%9C-element%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>string으로 DOM element를 생성해보자</p><p><strong>Template Element를 이용한다</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> html = <span class="string">"&lt;li&gt;1234&lt;/li&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// element를 생성하여 추가합니다.</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">document</span>.createElement(<span class="string">'template'</span>);</span><br><span class="line">template.innerHTML = html;</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">"collection"</span>)[<span class="number">0</span>].appendChild(template.content.firstChild);</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro" target="_blank" rel="noopener">https://stackoverflow.com/questions/494143/creating-a-new-dom-element-from-an-html-string-using-built-in-dom-methods-or-pro</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01. Typescript란</title>
      <link href="/2017/08/12/Typescript/1.%20typescript%EB%9E%80/"/>
      <url>/2017/08/12/Typescript/1.%20typescript%EB%9E%80/</url>
      
        <content type="html"><![CDATA[<p>타입스크립트는 자바스크립트를 확장한 언어. 자바스크립트 <strong>ECMA(European Computer Manufactureres Association) 표준</strong>을 따르고 있기 때문에 ECMA 표준에 대해 알 필요가 있음.</p><h2 id="ECMA-스크립트의-역사"><a href="#ECMA-스크립트의-역사" class="headerlink" title="ECMA 스크립트의 역사"></a>ECMA 스크립트의 역사</h2><p>자바스크립트는 ECMA의 표준을 따름. ES1부터 ES7스크립트 표준까지 진행돼옴.</p><ul><li><p>ES1(ECMA-262 Ed. 1)</p><p>97년 <code>js</code>와 <code>JScript</code>가 동시에 나오자, ES1이 재정됌.</p></li><li><p>ES2</p></li><li><p>ES3</p><p>브라우저 지원 시작</p></li><li><p>ES4</p><p>불완전한 표준으로, 사용하지 않기로 합의</p></li><li><p><strong>ES5</strong></p><ul><li>현재 자바스크립트가 지원할 수 있는 표준</li><li>JSON/Accessors</li><li>2009 년 Node.js 플랫폼이 등장.(JS가 서버 프로그래밍이 가능한 언어로 확장)</li></ul></li><li><p><strong>ES6</strong></p><ul><li>TypeScript의 기반이 되는, 클래스 문법과 모듈 기능 추가</li><li>IE9 부터 지원</li></ul></li><li><p><strong>ES7</strong></p><ul><li>장식자(decorator)와 Async/Await 특징 추가</li></ul></li></ul><p><img src="http://naywinmyint.com/content/images/2016/04/es5-es6-typescript.png" alt="type script에 대한 이미지 검색결과"></p><blockquote><p> 타입스크립트는 ES7 이하의 표준을 포함. </p></blockquote><h2 id="타입스크립트-특징"><a href="#타입스크립트-특징" class="headerlink" title="타입스크립트 특징"></a>타입스크립트 특징</h2><p>타입스크립트는 자바스크립트를 확장한 언어로, JS 언어의 특성을 침범하지 않고 최신 ECMA 표준을 지원.</p><ul><li><p>컴파일 언어, 정적 타입언어</p><ul><li>JS는 인터프리터 언어지만, TypeScript는 컴파일언어로 코드 수준에서 미리 타입을 체크하여 오류를 체크해냄. 단 전통적인 컴파일 언어와는 다르게, 링킹 과정이 생략되어 있음.</li></ul></li><li><p>낮은 버전의 ECMA 수용</p><ul><li>새로운 표준이 반영되더라도 ES5 브라우저에 대응할 수 있는 타입스크립트 컴파일러를 지원.</li></ul><blockquote><p>tsconfig.json 파일의 compilerOptions -&gt; target 필드에 ES 버전 설정 가능</p></blockquote></li><li><p>타입 기반 언어</p><ul><li>타입스크립트 = 자바스크립트 + 타입</li><li>컴파일 단계에서 타입 오류를 잡아낼 수 있고, 코드 어시스트 기능도 지원받을 수 있음.</li><li>이것은 암묵적 형변환, 호이스팅, 복잡성 문제 해결</li></ul></li><li><p>변환 가능 언어</p><ul><li>ECMA 표준을 따른다면 컴파일 도구를 이용해 새로운 언어로 마이그레이션 할 수 있도록 지원</li></ul></li></ul><h2 id="타입과-문자열"><a href="#타입과-문자열" class="headerlink" title="타입과 문자열"></a>타입과 문자열</h2><ul><li><strong>let 선언자</strong></li></ul><p><code>let 변수명;</code> 또는<code>let 변수명 : 타입;</code>와 같이 사용된다.</p><p><strong>1. 현재 블록내에서만 유효범위를 가지는 변수 선언.</strong> ES6 표준에서 처음 추가된 특징으로, 호이스팅 문제를 해결.</p><blockquote><p>호이스팅 문제란?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> fruit=<span class="string">"apple"</span>;</span><br><span class="line">&gt; &#123;</span><br><span class="line">&gt;   <span class="keyword">var</span> fruit=<span class="string">"banana"</span>;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="built_in">console</span>.log(fruit);</span><br><span class="line">&gt;</span><br><span class="line">&gt; &gt; banana</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>{}</code>안에 선언된 emotion은 지역 스코프이지만, 동일한 이름을 가진 전역 스코프의 변수값을 변경해버리는 문제</p></blockquote><ol start="2"><li>let은 중복 선언이 불가능. var는 중복선언이 가능.</li><li>아래 선언한 변수를 위에서 사용할 수 있음.</li></ol><ul><li>예제 소스</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruit=<span class="string">"apple"</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> fruit:string=<span class="string">"banana"</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(fruit);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fruit);</span><br><span class="line">&gt; banana</span><br><span class="line">&gt; apple</span><br></pre></td></tr></table></figure><h2 id="배열-타입"><a href="#배열-타입" class="headerlink" title="배열 타입"></a>배열 타입</h2><ul><li>대괄호 타입</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> videos: <span class="built_in">string</span>[] = [<span class="string">"두더지"</span>, <span class="string">"인터스텔라"</span>, <span class="string">"아바타"</span>];</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> videos2: <span class="built_in">string</span>[] = [];</span><br><span class="line">videos2.push(<span class="string">"두더지"</span>);</span><br><span class="line">videos2.push(<span class="string">"인터스텔라"</span>);</span><br><span class="line">videos2.push(<span class="string">"아바타"</span>);</span><br></pre></td></tr></table></figure><ul><li>제네릭 타입</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">let</span> num2:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">num2.push(<span class="number">1</span>);</span><br><span class="line">num2.push(<span class="number">2</span>);</span><br><span class="line">num2.push(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><ul><li>다차원 배열</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 변수명: 타입[][];</span><br></pre></td></tr></table></figure><h2 id="유니언-타입"><a href="#유니언-타입" class="headerlink" title="유니언 타입"></a>유니언 타입</h2><p>타입을 제한하는 기능. <code>타입 | 타입 | 타입</code></p><ul><li>변수 선언</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> unionType: <span class="built_in">string</span> | <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> unionType2: <span class="built_in">boolean</span> | <span class="built_in">string</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> unionType, unionType);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> unionType2, unionType2);</span><br><span class="line">&gt; <span class="built_in">number</span> <span class="number">1</span></span><br><span class="line">&gt; <span class="built_in">boolean</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>매개변수</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unionType</span>(<span class="params">p: <span class="built_in">string</span> | <span class="built_in">number</span></span>): <span class="title">string</span> | <span class="title">number</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">type</span> = unionType(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> type2 = unionType(<span class="string">"1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">type</span>, <span class="keyword">type</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> type2, type2);</span><br><span class="line">&gt; <span class="built_in">number</span> <span class="number">1</span></span><br><span class="line">&gt; <span class="built_in">boolean</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="문자열-표현-및-디스트럭처링"><a href="#문자열-표현-및-디스트럭처링" class="headerlink" title="문자열 표현 및 디스트럭처링"></a>문자열 표현 및 디스트럭처링</h2><p>문자열을 저장할때  `` <code>을 사용하여 html 태그</code>textarea`에 입력하는 것처럼 개행문자를 편하게 입력시킬 수 있음.</p><p><code>디스트럭처링</code> 기능을 이용하여, 배열이나 객체를 효율적으로 할당 할 수 있음.</p><ul><li>소스코드(ES6)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> param = [<span class="string">'안녕!!'</span>, <span class="number">33</span>];</span><br><span class="line"><span class="keyword">let</span> [name, num] = param; <span class="comment">// 디스트럭처링 이용해 배열 요소 할당</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 개행 문자 편하게 입력 </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`</span></span><br><span class="line"><span class="string">메세지 : <span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string">점수 : <span class="subst">$&#123;num&#125;</span></span></span><br><span class="line"><span class="string">`</span>);</span><br><span class="line"></span><br><span class="line">&gt; 메세지 : 안녕!!</span><br><span class="line">  점수 : <span class="number">33</span></span><br></pre></td></tr></table></figure><h2 id="화살표-함수"><a href="#화살표-함수" class="headerlink" title="화살표 함수"></a>화살표 함수</h2><p>ES6 표준에 포함된 익명함수를 좀 더 간략하게 표현.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 위 익명함수를</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 다음과 같이 표현 가능</span></span><br><span class="line">() =&gt; &#123;&#125;</span><br><span class="line">인자 =&gt; 코드</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> names = [<span class="string">"남준호"</span>, <span class="string">"최종혁"</span>, <span class="string">"신예원"</span>];</span><br><span class="line">names = names.forEach(</span><br><span class="line">  (e, index) =&gt; <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;index&#125;</span> : <span class="subst">$&#123;e&#125;</span>`</span>));</span><br></pre></td></tr></table></figure><h2 id="게터-함수와-세터-함수"><a href="#게터-함수와-세터-함수" class="headerlink" title="게터 함수와 세터 함수"></a>게터 함수와 세터 함수</h2><p>get 함수와, set 함수를 만들어 코드를 삽입할 수 있다.</p><p><code>{set 속성이름(매개변수 선언) { ... }}</code></p><p><code>{get 속성이름() { ... }}</code></p><ul><li><strong>일반적인 JS 코드</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.message = <span class="string">"lalala"</span>;</span><br></pre></td></tr></table></figure><p>set 과정에 추가 코드를 넣을 수 없다.</p><ul><li><strong>리터럴 형태 게터함수와 세터 함수</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  msg: <span class="string">''</span>,</span><br><span class="line">  <span class="keyword">get</span> hello() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.msg + <span class="string">' world'</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">set</span> hello(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.msg = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj.hello = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.hello);</span><br><span class="line">&gt; hello world</span><br></pre></td></tr></table></figure><p>리터럴형태에서는 파라미터 타입을 설정할 수 없다.</p><ul><li><strong>클래스 형태 게터함수와 세터함수</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">  private _hello: string;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 파라미터 타입 설정 가능</span></span><br><span class="line">  <span class="keyword">get</span> hello(): string &#123;</span><br><span class="line">    <span class="comment">// world를 더해서 셋팅한다.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._hello + <span class="string">" world"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> hello(name: string) &#123;</span><br><span class="line">    <span class="keyword">this</span>._hello = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">hello.hello = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(hello.hello);</span><br><span class="line">&gt; hello world</span><br></pre></td></tr></table></figure><h2 id="클래스"><a href="#클래스" class="headerlink" title="클래스"></a>클래스</h2><ul><li>클래스 선언</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myClass = <span class="keyword">new</span> MyClass();</span><br><span class="line"><span class="keyword">var</span> myClass:MyClass = <span class="keyword">new</span> MyClass();</span><br></pre></td></tr></table></figure><ul><li>public 접근자 이용, 생성자 매개변수 전역변수 만들기</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCar</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 퍼블릭으로 선언하면 전역변수로 선언되는 효과</span></span><br><span class="line">  <span class="keyword">constructor</span>(public carName: string, public _numTier: number) &#123;&#125;</span><br><span class="line">  getCarName(): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.carName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> numTier() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._numTier;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="클래스-상속"><a href="#클래스-상속" class="headerlink" title="클래스 상속"></a>클래스 상속</h2><p>타입스크립트에서는 상속 기능을 제공</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  protected <span class="keyword">constructor</span>(public name: string, public leg: number) &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  getLeg(): number &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.leg;</span><br><span class="line">  &#125;</span><br><span class="line">  protected getName(): string &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monkey</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name: string, leg: number) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name, leg);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  isClimbing() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  superGetName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><p>구현 클래스를 강제함으로써 클래스 형태에 일관성을 유지할 수 있음.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">  leg:<span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Bird <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  wing:<span class="built_in">number</span>;</span><br><span class="line">  getNumWing();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> BlueBird <span class="keyword">implements</span> Bird &#123;</span><br><span class="line">  leg: <span class="built_in">number</span>;</span><br><span class="line">  wing:<span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">leg:<span class="built_in">number</span>, wing:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.leg = leg;</span><br><span class="line">    <span class="keyword">this</span>.wing = wing;</span><br><span class="line">  &#125;</span><br><span class="line">  getNumWing() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.wing;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="추상-클래스"><a href="#추상-클래스" class="headerlink" title="추상 클래스"></a>추상 클래스</h2><p>구현과 강제를 동시에 수행하는 클래스, 추상 메서드는 abstract 키워드를 붙여서 형식만 정의, 구현 메서드는 abstract를 생략한 채로 정의</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> SmallAnimals &#123;</span><br><span class="line">  <span class="keyword">abstract</span> 추상 메서드(): <span class="built_in">string</span>;</span><br><span class="line">  구현 메서드(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="comment">// 추상 메서드를 이용해 구현 메서드의 로직 추가</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> SmallAnimals &#123;</span><br><span class="line">  <span class="keyword">abstract</span> sound(): <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">abstract</span> name(): <span class="built_in">string</span>;</span><br><span class="line">  makeSound(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name()&#125;</span> : <span class="subst">$&#123;<span class="keyword">this</span>.sound()&#125;</span> `</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Mouse <span class="keyword">extends</span> SmallAnimals &#123;</span><br><span class="line">  sound(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"peep peep~"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  name(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"mouse"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍</p><p><a href="http://stackoverflow.com/questions/32733230/transpiller-and-internet-explorer-8" target="_blank" rel="noopener">http://stackoverflow.com/questions/32733230/transpiller-and-internet-explorer-8</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Typescript 함수스코프와 this의 이해</title>
      <link href="/2017/08/12/Typescript/typescript-%ED%95%A8%EC%88%98%EC%8A%A4%EC%BD%94%ED%94%84/"/>
      <url>/2017/08/12/Typescript/typescript-%ED%95%A8%EC%88%98%EC%8A%A4%EC%BD%94%ED%94%84/</url>
      
        <content type="html"><![CDATA[<p>Typescript로 코딩을 하다보면, this로 메서드나 함수를 불러오지 못할 때가 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">    bar = <span class="number">123</span>;</span><br><span class="line">    bas() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> Foo();</span><br><span class="line">x.bas();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> y = x.bas;</span><br><span class="line">y();</span><br></pre></td></tr></table></figure><p>1번의 경우는 <code>this</code>가 <code>Foo</code>이며 <code>this.bar</code>의 결과도 올바르게 나오지만,</p><p>2번의 경우는 <code>this</code>가 <code>Window</code>로 나온다. Window는 전역이고, bar는 전역에 있지 않기 때문에, <code>this.bar</code>의 결과는 <code>undefined</code> 가 나온다.</p><h2 id="해결책"><a href="#해결책" class="headerlink" title="해결책"></a>해결책</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Foo &#123;</span><br><span class="line">    bar = <span class="number">123</span>;</span><br><span class="line">    bas = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> Foo();</span><br><span class="line">x.bas();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> y = x.bas;</span><br><span class="line">y();</span><br></pre></td></tr></table></figure><p>위와 같이 <code>= () =&gt;</code> 를 활용하면, this가 <code>Window</code>가 아닌 <code>Foo</code>가 되며, 결과도 정상적으로 나온다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>해당 함수의 실행 스코프가 바뀌어도, <code>= () =&gt;</code>를 활용하면, 동일한 스코프를 유지시켜 준다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.youtube.com/watch?v=tvocUcbCupA&amp;hd=1" target="_blank" rel="noopener">https://www.youtube.com/watch?v=tvocUcbCupA&amp;hd=1</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07. Typescript 데코레이터(Decorator)</title>
      <link href="/2017/08/12/Typescript/7.%20typescript-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0/"/>
      <url>/2017/08/12/Typescript/7.%20typescript-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0/</url>
      
        <content type="html"><![CDATA[<p><code>tsonfig.json</code>에서 <code>&quot;experimentalDecorators&quot;: true</code> 명시해줘야 사용가능</p><h2 id="Class-Decorator"><a href="#Class-Decorator" class="headerlink" title="Class Decorator"></a>Class Decorator</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 인자가 없을 시엔, 생성자 함수를 선언해줘야</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">constructFn: <span class="built_in">Function</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(constructFn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@hello</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Method-Decorator"><a href="#Method-Decorator" class="headerlink" title="Method Decorator"></a>Method Decorator</h2><p><strong>read only 데코레이터 예제</strong></p><p>함수를 재작성할 수 없게 함.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">editable</span>(<span class="params">canBeEditable: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propName: <span class="built_in">string</span>, description: PropertyDescriptor</span>) </span>&#123;</span><br><span class="line">        description.writable = canBeEditable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="meta">@editable</span>(<span class="literal">false</span>)</span><br><span class="line">    hello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line">p.hello(); <span class="comment">// hello</span></span><br><span class="line">p.hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br><span class="line">p.hello(); <span class="comment">// hello</span></span><br></pre></td></tr></table></figure><p>target/propName/PropertyDescriptor를 파라미터로 받는 함수를 리턴해주어야 함.</p><h2 id="Property-Decorator"><a href="#Property-Decorator" class="headerlink" title="Property Decorator"></a>Property Decorator</h2><p>target/propName을 파라미터로 받는 함수를 리턴해주어야 함.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writable</span>(<span class="params">canBeWritable: <span class="built_in">boolean</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">target: <span class="built_in">any</span>, propName: <span class="built_in">string</span></span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            writable: canBeWritable</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="meta">@writable</span>(<span class="literal">false</span>)</span><br><span class="line">    name: <span class="built_in">string</span> = <span class="string">"junho"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(p.name); <span class="comment">// junho</span></span><br><span class="line">p.name = <span class="string">'dd'</span>; <span class="comment">// error!</span></span><br></pre></td></tr></table></figure><h2 id="Parameter-Decorator"><a href="#Parameter-Decorator" class="headerlink" title="Parameter Decorator"></a>Parameter Decorator</h2><p>target/methodName/paramIndex를 파라미터로 가져야함</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printInfo</span>(<span class="params">target: <span class="built_in">any</span>, methodName: <span class="built_in">string</span>, paramIndex: <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(target);</span><br><span class="line">    <span class="built_in">console</span>.log(methodName);</span><br><span class="line">    <span class="built_in">console</span>.log(paramIndex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    <span class="keyword">private</span> _name: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> _age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, <span class="meta">@printInfo</span> age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>._name = name;</span><br><span class="line">        <span class="keyword">this</span>._age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    hello( <span class="meta">@printInfo</span> message: <span class="built_in">string</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p> 결과</p><p>Person {}</p><p>hello</p><p>0</p><p>[Funcion: Person]</p><p>undefined</p><p>1</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course-status-2/" target="_blank" rel="noopener">https://www.inflearn.com/course-status-2/</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03. Typescript 타입</title>
      <link href="/2017/08/12/Typescript/3.%20typescript-%ED%83%80%EC%9E%85/"/>
      <url>/2017/08/12/Typescript/3.%20typescript-%ED%83%80%EC%9E%85/</url>
      
        <content type="html"><![CDATA[<p>타입스크립트의 자료형에 대해 알아보자.</p><h3 id="ECMAScript-표준에-따른-Primitive-Type-기본-자료형"><a href="#ECMAScript-표준에-따른-Primitive-Type-기본-자료형" class="headerlink" title="ECMAScript 표준에 따른 Primitive Type(기본 자료형)"></a>ECMAScript 표준에 따른 Primitive Type(기본 자료형)</h3><p>Wrapper 타입과/Primitive Type이 있는데, Primitive Type쓰는 것을 권장함.</p><ul><li>Boolean/boolean</li><li>Number/number</li><li>String/string</li><li>null : 값으로 할당된 것을 null 이라고 함, 모든 자료형에 할당될 수 있음.</li><li>undefined : 값을 할당하지 않은 변수</li><li>Symbol</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = Symbol();</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [sym]: <span class="string">"value"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj[sym]); <span class="comment">// value</span></span><br></pre></td></tr></table></figure><ul><li>Array : Array&lt;타입&gt;, 타입[]</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array:<span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> array2:<span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="추가-타입"><a href="#추가-타입" class="headerlink" title="추가 타입"></a>추가 타입</h3><ul><li>Any : 최대한 쓰지 않는 것이 TypeScript를 잘쓰는 길이라는 의견이 있음.</li><li>Void(함수 리턴)</li><li>Never(함수 리턴) </li><li>Enum</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Color &#123; Red, Green=<span class="number">2</span>, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(Color[c]); <span class="comment">// Green</span></span><br></pre></td></tr></table></figure><ul><li>Tuple : Array의 변칙 형태로, 배열인데 타입이 한가지가 아닌 경우.</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tu : [<span class="built_in">number</span>, <span class="built_in">string</span>] = [<span class="number">0</span>, <span class="string">"일"</span>];</span><br></pre></td></tr></table></figure><h2 id="Template-String"><a href="#Template-String" class="headerlink" title="Template String"></a>Template String</h2><p>행에 걸쳐있거나, 표현식을 넣을 수 있는 문자열.</p><h2 id="Union-Type"><a href="#Union-Type" class="headerlink" title="Union Type"></a>Union Type</h2><p>string | null | defined 식으로 사용.</p><h2 id="Type-Assertions"><a href="#Type-Assertions" class="headerlink" title="Type Assertions"></a>Type Assertions</h2><p>실제로 해당 타입으로 바꾸는 것이 아니라, 컴파일러에게 타입 체크를 할 시에만 타입스크립트 컴파일러에게 알려주는 것.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).length;</span><br><span class="line"><span class="keyword">let</span> strLength: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br></pre></td></tr></table></figure><h2 id="Type-Allias"><a href="#Type-Allias" class="headerlink" title="Type Allias"></a>Type Allias</h2><p>타입 이름의 별칭을 지정</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyType = <span class="built_in">string</span> | <span class="built_in">number</span>;</span><br><span class="line"><span class="keyword">let</span> myStr: MyType = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> myNum: MyType = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tuple</span></span><br><span class="line"><span class="keyword">type</span> MyTuple = [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">let</span> another: MyTuple = [<span class="string">'Anna'</span>, <span class="number">1</span>];</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BD%94%EB%A6%AC%EC%95%84-1705-%EA%B8%B0%EC%B4%88-%EC%84%B8%EB%AF%B8%EB%82%98/" target="_blank" rel="noopener">https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BD%94%EB%A6%AC%EC%95%84-1705-%EA%B8%B0%EC%B4%88-%EC%84%B8%EB%AF%B8%EB%82%98/</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05. Typescript 제네릭(Generic)</title>
      <link href="/2017/08/12/Typescript/5.%20typescript-%EC%A0%9C%EB%84%A4%EB%A6%AD/"/>
      <url>/2017/08/12/Typescript/5.%20typescript-%EC%A0%9C%EB%84%A4%EB%A6%AD/</url>
      
        <content type="html"><![CDATA[<p>다형성을 위해 any를 쓰면, 헬퍼가 제대로 작동하지 않음. Generic을 쓰면 정상 작동함. <strong>Generic</strong>을 쓰자!</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">helloGeneric</span>&lt;<span class="title">T</span>&gt;(<span class="params">message: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> message;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(hello&lt;<span class="built_in">string</span>&gt;(<span class="string">'Hello'</span>));</span><br></pre></td></tr></table></figure><ol><li>Generic 타입을 쓰지 않으면 T로 추론.</li><li>Generic 타입을 쓰면 T를 확인</li></ol><h3 id="Generic-Class"><a href="#Generic-Class" class="headerlink" title="Generic Class"></a>Generic Class</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T&gt; &#123;</span><br><span class="line">  <span class="keyword">private</span> _name: T;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: T</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> junho = <span class="keyword">new</span> Person(<span class="string">'Junho'</span>);</span><br><span class="line"><span class="keyword">new</span> Person&lt;<span class="built_in">number</span>&gt;(<span class="string">'junho'</span>); <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Person&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> | <span class="built_in">number</span>&gt; &#123; ...&#125; <span class="comment">// 다음과 같은 식으로 타입제한 가능</span></span><br></pre></td></tr></table></figure><h3 id="Multitype"><a href="#Multitype" class="headerlink" title="Multitype"></a>Multitype</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person&lt;T, K&gt; &#123;</span><br><span class="line">  name: T;</span><br><span class="line">  age: K;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// keyof T는 T의 key(attribute)인지를 확인</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt; (<span class="params">obj: T, key: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course-status-2/" target="_blank" rel="noopener">https://www.inflearn.com/course-status-2/</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04. Typescript 인터페이스(Interface)</title>
      <link href="/2017/08/12/Typescript/4.%20typescript-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/"/>
      <url>/2017/08/12/Typescript/4.%20typescript-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Person &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age?: <span class="built_in">number</span>; <span class="comment">// '?' 있을 수도 있고 없을 수도 있음.</span></span><br><span class="line">  [index: <span class="built_in">string</span>]: <span class="built_in">string</span>; <span class="comment">// indexable type : 프로퍼티 명으로 옵셔널하게 사용가능</span></span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">number</span>;</span><br><span class="line">  hello(): <span class="built_in">void</span>;</span><br><span class="line">  hi(): <span class="built_in">string</span>;</span><br><span class="line">  ho(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = &#123;</span><br><span class="line">  name: <span class="string">'Junho'</span>,</span><br><span class="line">  age: <span class="number">35</span>,</span><br><span class="line">  hello: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  hi: (): <span class="function"><span class="params">string</span> =&gt;</span> &#123; <span class="keyword">return</span> <span class="string">'hi'</span>;  &#125;,</span><br><span class="line">  ho(): <span class="built_in">string</span> &#123; <span class="keyword">return</span> <span class="string">'hello'</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">person.anybody = <span class="string">"junho"</span>; <span class="comment">// indexable type 사용</span></span><br><span class="line">person[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">p: Person</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'안녕하세요 $&#123;p.name&#125; 입니다.'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Class-Implements-Interface"><a href="#Class-Implements-Interface" class="headerlink" title="Class Implements Interface"></a>Class Implements Interface</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> IPerson &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  hello(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Persion <span class="keyword">implements</span> IPerson &#123;</span><br><span class="line">  name: <span class="built_in">string</span> = <span class="literal">null</span>;</span><br><span class="line">  hello(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'안녕하세요 $&#123;this.name&#125; 입니다.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> hi() : <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'안녕 준호임'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person: Person = <span class="keyword">new</span> Person(<span class="string">'Junho'</span>);</span><br><span class="line">person.hi();</span><br></pre></td></tr></table></figure><h3 id="Function-Interface"><a href="#Function-Interface" class="headerlink" title="Function Interface"></a>Function Interface</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> HelloPerson &#123;</span><br><span class="line">  (name: <span class="built_in">string</span>, age?: <span class="built_in">number</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> helloPerson: HelloPerson = <span class="function"><span class="keyword">function</span>(<span class="params">name: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">helloPerson(<span class="string">'Junho'</span>);</span><br></pre></td></tr></table></figure><p>함수인터페이스는 사용할때 타입체크를 함.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BD%94%EB%A6%AC%EC%95%84-1705-%EA%B8%B0%EC%B4%88-%EC%84%B8%EB%AF%B8%EB%82%98/?subscribe" target="_blank" rel="noopener">https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BD%94%EB%A6%AC%EC%95%84-1705-%EA%B8%B0%EC%B4%88-%EC%84%B8%EB%AF%B8%EB%82%98/?subscribe</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.1. 타입스크립트 Webpack 환경 구축</title>
      <link href="/2017/08/12/Typescript/2.1.%20typescript-webpack-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/"/>
      <url>/2017/08/12/Typescript/2.1.%20typescript-webpack-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%B6%95/</url>
      
        <content type="html"><![CDATA[<p>webpack이란 Module Bundler 이다. webpack과 같은 모듈 번들러로는 <code>grunt</code>, <code>gulp</code> 등이 있다.</p><blockquote><p> 각각 모듈들에 필요한 의존성에 대해 관계를 파악하여 그룹핑해주며, 여러 기능 자동 수행.</p></blockquote><p><img src="https://webpack.github.io/assets/what-is-webpack.png" alt="webpack에 대한 이미지 검색결과"></p><p>여러가지 js, css, png 파일들이 모듈 번들러를 통해서 몇몇 파일들로 합쳐진다. </p><h4 id="진행되야-하는-작업들"><a href="#진행되야-하는-작업들" class="headerlink" title="진행되야 하는 작업들"></a>진행되야 하는 작업들</h4><ul><li>ECMA6 파일을 ECMA5 파일로 변경</li><li>문서 최적화</li><li>코드 테스트</li><li>문서 문법 검증 </li><li>SASS 컴파일</li><li>…</li></ul><p>위와 같은 빌드 단계에서 진행되야 하는 것들을 일관화하여, 모듈화시켜주는데 기여한다. </p><p>모듈화 시키는데 대표적인 작업 그룹이 있었으니 <code>CommonJs</code>와 <code>AMD(Asynchronous Module Definition)</code>가 있다.  <code>webpack</code>은 두 그룹의 명세를 모두 지원하는 javascript 도구이다.</p><h3 id="사용법"><a href="#사용법" class="headerlink" title="사용법"></a>사용법</h3><p>typescript와 webpack 연동에 대해 다룬다.</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; [폴더명]/</span><br><span class="line">&gt; ├─ public/</span><br><span class="line">&gt; └─ src/</span><br><span class="line">&gt;    └─ components/</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>위와 같이 폴더 구조를 만든다. src는 타입스크립트 소스코들이 들어가고, webpack을 통한 결과물은 public에 위치한다. 컴포넌트들은 src/components에 위치할 것이다.</p><h4 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h4><ol><li>NPM 패키지로 전환</li></ol><blockquote><p>&gt; npm init</p></blockquote><ol start="2"><li>Typescript 설치</li></ol><blockquote><p> &gt; npm install –save-dev typescript</p></blockquote><p><code>-g</code>를 통해 글로벌로 설치하기도 하지만, 협업환경에서는 로컬로 설치한뒤 npm 스크립트를 이용하는 경우가 일반적임.</p><ol start="3"><li>Typescript 파일 작성</li></ol><ul><li>src/kanban/Kanban.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Kanban &#123;</span><br><span class="line">    show() &#123;</span><br><span class="line">        alert(<span class="string">"Hello, Stranger?"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src/index.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Kanban &#125; <span class="keyword">from</span> <span class="string">'./kanban/Kanban'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> Kanban();</span><br><span class="line">    o.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src/index.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">title</span>&gt;</span>TypeScript Greeter<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>TypeScript 설정파일</li></ol><p>root 폴더에 <code>tsconfig.json</code>을 생성한다</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"outDir"</span>: <span class="string">"./public/"</span>,</span><br><span class="line">        <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"include"</span>: [</span><br><span class="line">        <span class="string">"./src/**/*"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>compilerOptions</strong></p><ul><li>outDir : 컴파일 된 파일이 위치하는 장소</li><li>sourceMap : 소스맵 사용 여부</li></ul><blockquote><p>소스맵이란 : 자바스크립트를 한 파일로 합치거나 사이즈를 줄이기 위해서 압축하거나 난독화해서 배포하는 방식을 많이 취하는데 이 방법은 성능에는 좋지만 사실 디버깅이 어려워지는 문제가 있다. 소스맵은 이 원본 소스와 최종소스를 매핑해서 추적할 수 있는 방법</p></blockquote><ul><li>noImplicityAny : <code>any</code> 로 선언된 식과 정의에 대해 에러를 발생시킴.</li><li>module : 모듈 표준으로 <code>commonjs</code>를 사용한다.</li><li>target : es5 형태로 컴파일 함.</li></ul><p><strong>files/include/exclude</strong></p><p>컴파일 대상인 파일 설정</p><p><code>files</code> 키워드로 파일을 정하거나   <code>&quot;files&quot;: [  &quot;src/index.ts&quot;],</code></p><p><code>incude/exclude</code>로 경로를 지정할 수 있다.</p><blockquote><p> 더 자세한 옵션 값을 보려면</p><p> <a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/compiler-options.html</a></p></blockquote><p><em>컴파일 하려면….</em></p><blockquote><p>&gt; tsc ./src/index.ts</p></blockquote><p>위 명령어를 치면 ts가 js로 컴파일 되지만, index.html을 실행하면, <strong>오류가 발생한다.</strong> <code>export</code> 명령어는 webpack 모듈러를 사용하고 <code>commonjs</code>를 사용할 때만 사용할 수 있다.</p><h4 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h4><ol><li>webpack 설치</li></ol><blockquote><p>&gt; npm install –save webpack</p></blockquote><ol start="2"><li>Typescript 로더 설치</li></ol><blockquote><p>&gt; npm install –save-dev awesome-typescript-loader source-map-loader</p></blockquote><p><code>awesome-typescript-loader</code>는 웹팩이 ts 표준 설정파일인 tsconfig.json을 활용해서 컴파일하게 도와주는 로더이다. <code>Babel</code>을 통해 ES5로 변환해주며, 캐시를 활용하여 webpack 컴파일을 더 빠르게 해준다.</p><p><code>source-map-loader</code>는 웹팩이 여러 라이브러리를 관리하는 과정에서 소스맵 데이터의 연속성을 유지하기 위해 필요하다. 소스맵이 변경될때마다, 웹팩에게 알려준다.</p><ol start="3"><li>웹팩 설정</li></ol><ul><li>webpack.config.js</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.ts'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'public'</span>),</span><br><span class="line">    filename: <span class="string">'index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; test: <span class="regexp">/\.css$/</span>, use: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; test: <span class="regexp">/\.ts$/</span>, use: <span class="string">'awesome-typescript-loader'</span> &#125;,</span><br><span class="line">      &#123; enforce: <span class="string">"pre"</span>, test: <span class="regexp">/\.js$/</span>, loader: <span class="string">"source-map-loader"</span> &#125;,</span><br><span class="line">      &#123; enforce: <span class="string">'pre'</span>, test: <span class="regexp">/\.ts$/</span>, loader: <span class="string">'tslint-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">".ts"</span>, <span class="string">".js"</span>, <span class="string">".json"</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><p><strong>Entry(진입점)</strong> </p><p>페이지 시작의 첫번째 파일로, Entry는 의존성 관계 파악 및 그룹핑을 위한 위치 정보를 알려주는 기능을 한다.</p><p><strong>Output</strong></p><p>웹팩의 <code>output</code> 프로퍼티는 웹팩에게 그룹핑된 코드를 어디 위치 시킬지 알려준다.</p><p><code>output.filename</code>과 <code>output.path</code>프로퍼티는 웹팩에게 묶음의 이름과, 결과물 생성 위치를 알려준다.</p><p><strong>Loaders</strong></p><p>웹팩의 로더는 다른 리소스를 순수 JavaScript로 변환하고, css, html, scss, jpg 등을 종속성 정보에 추가함으로서 모듈로서 관리한다.</p><p>Loader의 설정은 <code>rules</code> 프로퍼티를 통해 이루어지는데, rules 프로퍼티에는 두가지 속성이 있다.</p><p><code>test</code> : <code>require() / import</code> 문에서 ‘.txt’파일로 해석되는 경로를 발견하면,</p><p><code>use</code> or <code>loader</code> : 로더의 종류를 입력.</p><p><em>로더 사용하기 위해서는</em></p><blockquote><p>&gt; npm install –save-dev css-loader awesome-typescript-loader </p><p>&gt; npm install –save-dev tslint tslint-loader</p></blockquote><p><em>참고 : tslint 기본 설정 파일 생성</em></p><blockquote><p>&gt; ./node_modules/.bin/tslint –init </p></blockquote><p><strong>Resolve</strong><br>extensions를 등록해두면, import시에 확장자 생략이 가능하다.</p><p><strong>Plugins</strong></p><p>플러그인을 통해 <code>컴파일</code>이나, <code>chunks</code> 과정에서 사용자 정의 기능을  수행하는데 사용된다.  단순히 <code>require()</code> 키워드로 불러와서, <code>plugins</code> 속성에 추가하면 된다.</p><p><code>html-webpack-plugin</code> : 컴파일 output 위치로 html 파일을 복사해주는 플러그인.</p><blockquote><p>&gt; npm install –save-dev html-webpack-plugin</p></blockquote><ul><li>webpack.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">...</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">'src/index.html'</span>,</span><br><span class="line">      inject: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="4"><li>webpack 실행</li></ol><blockquote><p>&gt; webpack</p></blockquote><p>위 커맨드를 입력하면 <code>public/index.html</code> 파일이 생성된 것을 볼 수있다.</p><ol start="5"><li>webpack-dev-server 사용하기</li></ol><p>파일을 수정할 때 마다 webpack을 실행하는 것은 비효율적이다. 한 번 실행해놓고 파일을 수정하면 자동으로 반영되게 해주는 것이 <code>webpack-dev-server</code> 이다.</p><blockquote><p>&gt; npm install –save-dev webpack-dev-server</p><p>&gt; ./node_modules/.bin/webpack-dev-server  –content-base public/ –open</p></blockquote><p><code>--content-base</code> : 소스파일 베이스 설정</p><p><code>--open</code> : 브라우저를 실행</p><p>실행 경로를 쓰기 귀찮으니, <code>package.json</code>에 다음을 추가</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    ...</span><br><span class="line">    "build": "webpack",</span><br><span class="line">    "start": "webpack-dev-server --content-base public/ --open"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><blockquote><p>&gt; npm start</p></blockquote><p>입력하면 경로 없이 dev-server 실행!</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>웹팩&amp;타입스크립트 연동 : <a href="https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html</a></p><p><a href="https://www.facebook.com/218158748272233/videos/993595284061905/" target="_blank" rel="noopener">https://www.facebook.com/218158748272233/videos/993595284061905/</a></p><p><a href="https://hyunseob.github.io/2017/03/21/webpack2-beginners-guide/" target="_blank" rel="noopener">https://hyunseob.github.io/2017/03/21/webpack2-beginners-guide/</a></p><p>tslint-loader : <a href="https://www.npmjs.com/package/tslint-loader" target="_blank" rel="noopener">https://www.npmjs.com/package/tslint-loader</a></p><p>awesome-typescript-loader : <a href="https://github.com/s-panferov/awesome-typescript-loader" target="_blank" rel="noopener">https://github.com/s-panferov/awesome-typescript-loader</a></p><p>source-map-loader : <a href="https://github.com/webpack-contrib/source-map-loader" target="_blank" rel="noopener">https://github.com/webpack-contrib/source-map-loader</a></p><p>소스맵이란 : <a href="https://blog.outsider.ne.kr/916" target="_blank" rel="noopener">https://blog.outsider.ne.kr/916</a></p><p>html-webpack-plugin, html-webpack-plugin : <a href="http://sixmen.com/ko/tech/2017-04-11-1-webpack-setup-tutorial-with-typescript-and-mithril/" target="_blank" rel="noopener">http://sixmen.com/ko/tech/2017-04-11-1-webpack-setup-tutorial-with-typescript-and-mithril/</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02. Typescript 컴파일 옵션</title>
      <link href="/2017/08/12/Typescript/2.%20typescript-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EC%98%B5%EC%85%98/"/>
      <url>/2017/08/12/Typescript/2.%20typescript-%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EC%98%B5%EC%85%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>$ tsc –init</p></blockquote><p>다음 커맨드를 입력하면, tsconfig.json이 생성된다. 해당 파일이 있으면 <code>tsc 파일</code>커맨드 입력시 해당 설정을 통해서 컴파일 한다.</p><ul><li>tsconfig.json</li></ul><p>root 폴더에 <code>tsconfig.json</code>을 생성한다</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"outDir"</span>: <span class="string">"./public/"</span>,</span><br><span class="line">        <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">        <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">      <span class="attr">"typeRoots"</span>: [<span class="string">"./node_modules/@types"</span>,</span><br><span class="line">                      <span class="string">"./[경로지정]"</span>],</span><br><span class="line">      <span class="attr">"paths"</span>: &#123;</span><br><span class="line">          "@modules/.*" [</span><br><span class="line">            <span class="string">"./modules/app/*"</span></span><br><span class="line">          ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "include": [</span><br><span class="line">        <span class="string">"./src/**/*"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>compileOnSave</strong></p><ul><li>파일을 저장하면 자동으로 컴파일, 최상단에 설정해야 함, 특정 IDE를 사용해야만 함.(Visual Studio 2015 이상, atom-typescript 플러그인)</li></ul><p><strong>extends</strong></p><ul><li>tsconfig.json을 상속받아 사용할 수 있음.</li></ul><p><strong>compilerOptions</strong></p><ul><li><p>target : 어떤 JS형태로 컴파일 할 것인가(default : es3)</p></li><li><p>lib : 기본 type definition 라이브러리를 어떤 것을 사용할 것이냐.</p><p>default는 target에 맞는 해당 lib를 사용.</p></li></ul><blockquote><p>ex) target이  ‘es5’면, 디폴트로 dom, es5, scriptshot를 사용</p></blockquote><ul><li><p>typeRoots/types : type definition의 위치를 설정.(typescript 2.0 이상)</p><p>default 는 ./node_modules/@types/ 안의 모듈이름에서 찾아옴.</p></li></ul><blockquote><p>type definition 코드 : typesciprt의 타입정보가 들어 있음, JS에서 자동완성, 빨간줄 제거를 도와줌, 과거에는 tsd나 typing을 통해 d.ts 파일을 불러왔으나, @types 가 생긴 뒤로 모듈에 d.ts파일을 함께 배포하는 추세. ex) index.d.ts</p></blockquote><ul><li>outDir : 컴파일 된 파일이 위치하는 장소</li><li>sourceMap : 소스맵 사용 여부</li></ul><blockquote><p>소스맵이란 : 자바스크립트를 한 파일로 합치거나 사이즈를 줄이기 위해서 압축하거나 난독화해서 배포하는 방식을 많이 취하는데 이 방법은 성능에는 좋지만 사실 디버깅이 어려워지는 문제가 있다. 소스맵은 이 원본 소스와 최종소스를 매핑해서 추적할 수 있는 방법</p></blockquote><ul><li><p>noImplicityAny : <code>any</code> 로 선언된 식과 정의에 대해 에러를 발생시킴.</p></li><li><p>module : 결과물로 어떤 모듈 표준을 사용할 것인가.</p><p>디폴트 : target : es6이면 es6가 디폴트, es6아니면 commonjs 디폴트, AMD나 System을 사용하려면, outFile이 지정돼야함.</p></li><li><p>moduleResolution : 모듈 가져올때 ts소스에서 모듈을 사용하는 방식. node/classic이 있고 node = commonjs일때.</p></li><li><p>paths/baseUrl/rootDirs : 상대경로 방식이 아닐때 사용.</p><p><code>import {Sample} from &#39;@modules/sample.service&#39;</code> 와 같이 paths에 지정한 key를 입력하여 사용.</p></li><li><p>importHelpers : ts파일을 js 파일로 바꾸면, helper 함수들이 js 에 생기는데 파일이 길어지니 따로 모듈로 빼서 사용.</p></li><li><p>removeComments : 컴파일시 주석을 빼줌</p><p>​</p></li></ul><p><strong>files, include, exclude</strong></p><p>컴파일 대상인 파일 설정, 셋다 설정이 없으면 전부다 컴파일</p><ul><li><p><code>files</code> 키워드로 파일을 정함.   <code>&quot;files&quot;: [  &quot;src/index.ts&quot;]</code></p></li><li><p><code>incude/exclude</code>로 경로를 지정할 수 있다.</p></li><li><p><code>exclude</code> </p><p>설정 안하면 4가지 node_modules, bower_components, jspm_package, <outdir> 을 default로 제외</outdir></p><p><outdir>은 항상 제외(include에 있어도)</outdir></p></li></ul><p>우선순위 : files &gt; exclude &gt; include</p><blockquote><p>더 자세한 옵션 값을 보려면</p><p><a href="http://json.schemastore.org/tsconfig" target="_blank" rel="noopener">http://json.schemastore.org/tsconfig</a></p><p><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/compiler-options.html</a></p></blockquote><h2 id="Refrence"><a href="#Refrence" class="headerlink" title="Refrence"></a>Refrence</h2><p><a href="https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html" target="_blank" rel="noopener">https://www.typescriptlang.org/docs/handbook/react-&amp;-webpack.html</a></p><p><a href="https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BD%94%EB%A6%AC%EC%95%84-1705-%EA%B8%B0%EC%B4%88-%EC%84%B8%EB%AF%B8%EB%82%98/" target="_blank" rel="noopener">https://www.inflearn.com/course/%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%BD%94%EB%A6%AC%EC%95%84-1705-%EA%B8%B0%EC%B4%88-%EC%84%B8%EB%AF%B8%EB%82%98/</a></p><p>baseUrl, types : <a href="http://blog.naver.com/PostView.nhn?blogId=yjw1250&amp;logNo=220903209853&amp;parentCategoryNo=&amp;categoryNo=&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView" target="_blank" rel="noopener">http://blog.naver.com/PostView.nhn?blogId=yjw1250&amp;logNo=220903209853&amp;parentCategoryNo=&amp;categoryNo=&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06. Typescript 이터레이터(iterator)</title>
      <link href="/2017/08/12/Typescript/6.%20typescript-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0/"/>
      <url>/2017/08/12/Typescript/6.%20typescript-%EC%9D%B4%ED%84%B0%EB%A0%88%EC%9D%B4%ED%84%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Typescript-iterator"><a href="#Typescript-iterator" class="headerlink" title="Typescript iterator"></a>Typescript iterator</h1><p>Symol.iterator 함수가 구현되어 있으면 iterable 이라고 함.<code>implements iterable&lt;T&gt;</code></p><p>Array, Map, Set, String.. 등</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CustomIterable <span class="keyword">implements</span> Iterable&lt;<span class="built_in">string</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> _array: <span class="built_in">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">'first'</span>, <span class="string">'second'</span>];</span><br><span class="line"></span><br><span class="line">    [Symbol.iterator]() &#123;</span><br><span class="line">        <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            next: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    value: <span class="keyword">this</span>._array[nextIndex++],</span><br><span class="line">                    done: nextIndex &gt; <span class="keyword">this</span>._array.length</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cIterable = <span class="keyword">new</span> CustomIterable();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item of cIterable) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="for-in"><a href="#for-in" class="headerlink" title="for..in"></a>for..in</h2><p><strong>객체를 순회할 때</strong> 쓰세요.</p><p><strong>배열을 순회할 때는 사용하지 않을 것</strong></p><p>루프가 무작위로 순회할 수도 있음, index가 number이 아닌 string으로 나옴</p><h2 id="for-of"><a href="#for-of" class="headerlink" title="for..of"></a>for..of</h2><p>배열을 순회할때 사용.</p><p>객체를 순회할때도, <code>for (const item of Object.keys(객체)) {..}</code>방식으로 사용 가능</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  _name: <span class="built_in">string</span> = <span class="literal">null</span>;</span><br><span class="line">  _age: <span class="built_in">number</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._age = age;</span><br><span class="line">      <span class="keyword">this</span>._name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> junho = <span class="keyword">new</span> Person(<span class="string">'Junho'</span>, <span class="number">12</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">in</span> junho) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="built_in">console</span>.log(junho[item]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item of <span class="built_in">Object</span>.keys(junho)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="built_in">console</span>.log(junho[item]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.inflearn.com/course-status-2/" target="_blank" rel="noopener">https://www.inflearn.com/course-status-2/</a></p>]]></content>
      
      
      <categories>
          
          <category> Typescript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.1. Ionic Local Push</title>
      <link href="/2017/08/07/Ionic/5.1%20Ionic-local-push/"/>
      <url>/2017/08/07/Ionic/5.1%20Ionic-local-push/</url>
      
        <content type="html"><![CDATA[<p>굳이, 외부로부터 푸시를 이용하고 싶지 않을때, local push를 사용한다.</p><ul><li>plugin 인스톨</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ionic cordova plugin add de.appplant.cordova.plugin.local-notification</span><br><span class="line">$ npm install --save @ionic-native/local-notifications</span><br></pre></td></tr></table></figure><ul><li>앱 모듈에 추가</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LocalNotifications &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/local-notifications'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    ...</span><br><span class="line">    LocalNotifications,</span><br><span class="line">    ...</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>home.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavController, AlertController, Platform &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; LocalNotifications &#125; <span class="keyword">from</span> <span class="string">'@ionic-native/local-notifications'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'page-home'</span>,</span><br><span class="line">  templateUrl: <span class="string">'home.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomePage &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> navCtrl: NavController, <span class="keyword">private</span> plt: Platform, <span class="keyword">private</span> local: LocalNotifications, <span class="keyword">private</span> alertCtrl: AlertController</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.plt.ready().then(<span class="function"><span class="params">rdy</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.local.on(<span class="string">'click'</span>, <span class="function">(<span class="params">notification, state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> alert = <span class="keyword">this</span>.alertCtrl.create(&#123;</span><br><span class="line">          title: notification.title,</span><br><span class="line">          subTitle: json.myData</span><br><span class="line">        &#125;);</span><br><span class="line">        alert.present();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ionViewDidLoad() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.platform.is(<span class="string">'cordova'</span>)) &#123;</span><br><span class="line">      <span class="keyword">this</span>.platform.ready().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.localNotifications.hasPermission().then(<span class="function"><span class="keyword">function</span> (<span class="params">granted</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (!granted) &#123;</span><br><span class="line">            <span class="comment">// IOS10의 권한 설정</span></span><br><span class="line">            <span class="keyword">this</span>.localNotifications.registerPermission();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  scheduleNotification() &#123;</span><br><span class="line">    <span class="keyword">this</span>.local.schedule(&#123;</span><br><span class="line">      id: <span class="number">1</span>,</span><br><span class="line">      title: <span class="string">'Attention Users!'</span>,</span><br><span class="line">      text: <span class="string">'Emirhan notification'</span>,</span><br><span class="line">      at: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">5</span> * <span class="number">1000</span>),</span><br><span class="line">      data: &#123; myData: <span class="string">'My hidden message this is.'</span> &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    alert(<span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.local.getAll()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>home.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span></span><br><span class="line">      Ionic Blank</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-button</span> <span class="attr">full</span> (<span class="attr">click</span>)=<span class="string">"scheduleNotification()"</span>&gt;</span>Schedule!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><p>푸시가 오는 것이 확인된다. 블루스택으로 테스트 할경우, 푸시가 오지 않는 경우가 있으니 주의할 것.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://ionicframework.com/docs/native/local-notifications/" target="_blank" rel="noopener">https://ionicframework.com/docs/native/local-notifications/</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>콘솔 단축키 만들기(Alias)</title>
      <link href="/2017/08/06/etc/%EC%BD%98%EC%86%94-%EB%8B%A8%EC%B6%95%ED%82%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
      <url>/2017/08/06/etc/%EC%BD%98%EC%86%94-%EB%8B%A8%EC%B6%95%ED%82%A4-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><ul><li><strong>bat 파일을 만든다.</strong></li></ul><blockquote><p> DOSKEY  명령어=행동</p><p>$* 는 경로를 입력함을 의미</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@DOSKEY ls=DIR $*</span><br><span class="line">@DOSKEY clear=cls</span><br><span class="line">@DOSKEY ws=&quot;C:\Program Files\JetBrains\WebStorm 2017.2.1\bin\webstorm64.exe&quot; $*</span><br><span class="line">@DOSKEY nox=&quot;C:\Program Files (x86)\Nox\bin\Nox.exe&quot;</span><br></pre></td></tr></table></figure><p>리눅스 명령어 ls와 cls 그리고 웹스톰과 녹스를 실행시키는 alias를 설정하였다.</p><ul><li><strong>레지스터리 등록</strong></li></ul><p>실행-&gt;regedit-&gt;HKEY_CURRENT_USER-&gt;Software-&gt;Microsoft-&gt;Command Processor</p><p>새로만들기 -&gt; 문자열값을 누른 후</p><p>파일이름을 AutoRun, 데이터에는 만든 bat파일 경로를 입력하면된다.</p><p>이제 CMD창을 실행하면 위의 명령어가 자동으로 입력되어 실행된다.</p><h2 id="OSX"><a href="#OSX" class="headerlink" title="OSX"></a>OSX</h2><p>다음 링크 참조<br><a href="https://jonsuh.com/blog/bash-command-line-shortcuts/" target="_blank" rel="noopener">https://jonsuh.com/blog/bash-command-line-shortcuts/</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://stackoverflow.com/questions/20530996/aliases-in-windows-command-prompt" target="_blank" rel="noopener">https://stackoverflow.com/questions/20530996/aliases-in-windows-command-prompt</a></p>]]></content>
      
      
      <categories>
          
          <category> etc </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ionic Visual Studio Code 디버깅 방법</title>
      <link href="/2017/08/04/Ionic/Ionic-Visual-Studio-Code-%EB%94%94%EB%B2%84%EA%B9%85-%EB%B0%A9%EB%B2%95/"/>
      <url>/2017/08/04/Ionic/Ionic-Visual-Studio-Code-%EB%94%94%EB%B2%84%EA%B9%85-%EB%B0%A9%EB%B2%95/</url>
      
        <content type="html"><![CDATA[<p>Ionic에서 Vs Code의 디버깅 방법을 알아본다.</p><h4 id="VS-code에서-Chrome-확장-프로그램을-다운-받는다"><a href="#VS-code에서-Chrome-확장-프로그램을-다운-받는다" class="headerlink" title="VS code에서 Chrome 확장 프로그램을 다운 받는다."></a>VS code에서 Chrome 확장 프로그램을 다운 받는다.</h4><p><code>Debugger for Chrome</code> 을 검색 및 설치 후, VS code를 재실행 시킨다.</p><h4 id="package-json에-source-map-설정-추가"><a href="#package-json에-source-map-설정-추가" class="headerlink" title="package.json에 source map 설정 추가"></a>package.json에 source map 설정 추가</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> ...</span><br><span class="line">  "description": "설명",</span><br><span class="line">  // description 아래에 config 항목을 추가한다.</span><br><span class="line">  "config": &#123;</span><br><span class="line">    "ionic_bundler": "webpack",</span><br><span class="line">    "ionic_source_map": "source-map"</span><br><span class="line">  &#125;</span><br><span class="line">... </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="launch-json-설정"><a href="#launch-json-설정" class="headerlink" title="launch.json 설정"></a>launch.json 설정</h4><p><img src="http://i.imgur.com/n32HheM.png" alt="img"></p><p>디버그 탭에서 다음과 같이 설정 한다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        ...</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"chrome"</span>,</span><br><span class="line">            <span class="attr">"trace"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"attach"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Attach to Chrome"</span>,</span><br><span class="line">            <span class="attr">"port"</span>: <span class="number">9222</span>,</span><br><span class="line">            <span class="attr">"sourceMaps"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"webRoot"</span>: <span class="string">"$&#123;workspaceRoot&#125;/www"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"http://localhost:8100/"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="chrome에-remote-debugging-port-속성을-추가한다"><a href="#chrome에-remote-debugging-port-속성을-추가한다" class="headerlink" title="chrome에 remote debugging port 속성을 추가한다."></a>chrome에 remote debugging port 속성을 추가한다.</h4><p><img src="http://i.imgur.com/A3lix9j.jpg" alt="img"></p><p>크롬이 이미 실행중이라면, 닫고 다시 실행할 것!</p><p>셋팅은 끝.</p><p>위에서 설정한 바로가기를 통해 크롬을 실행하고,</p><p><code>ionic serve</code>를 이용해서, 아이오닉 서버를 구동시킨다.</p><p>크롬 화면에 아이오닉 페이지가 뜨면, 아래 그림 처럼</p><p><code>Attach to Chrome</code>을 확인하고, 초록색 디버깅 버튼을 누른다.</p><p><img src="http://i.imgur.com/T81erQX.png" alt="img"></p><p>이제 break point를 걸고 쾌적한 디버깅을 즐기시면 됩니당ㅎㅎ</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://forum.ionicframework.com/t/how-to-debug-typescript-in-ionic-2-apps-using-vs-code-and-app-scripts-0-0-46/70023" target="_blank" rel="noopener">https://forum.ionicframework.com/t/how-to-debug-typescript-in-ionic-2-apps-using-vs-code-and-app-scripts-0-0-46/70023</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>13. Angular Directive</title>
      <link href="/2017/07/30/Angular/13.%20Angular-Directive/"/>
      <url>/2017/07/30/Angular/13.%20Angular-Directive/</url>
      
        <content type="html"><![CDATA[<p>태그에 없는 기능을 추가적으로 부여한다.</p><ul><li>highlight.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, ElementRef, Renderer &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">    selector: <span class="string">'[highlight]'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Highlight &#123;</span><br><span class="line">    <span class="keyword">constructor</span> (<span class="params"> el: ElementRef, renderer: Renderer </span>) &#123;</span><br><span class="line">        renderer.setElementStyle(el.nativeElement, <span class="string">'backgroundColor'</span>, <span class="string">'blue'</span>);</span><br><span class="line">        <span class="comment">// 다음과 같이 nativeElement를 통해서만 지정할 수 있다.</span></span><br><span class="line">        <span class="comment">// el.nativeElement.style.backgroundColor = 'grey';  </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ElementRef : highlight 디렉티브가 지정된 태그 자체를 나타냄(el.nativeElement)</p><p>Renderer : 태그를 제어하기 위해 사용. 특히 스타일시트에 효과를 줄 때 많이 사용.</p></blockquote><ul><li>app.module.ts</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">import &#123; Highlight &#125; from &apos;../pages/prescription/highlight&apos;;</span><br><span class="line">...</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">...</span><br><span class="line">    Highlight</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>만들어준 디렉티비를 declarations에 추가한다.</p><ul><li>페이지.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`&lt;h2 highlight&gt;라라랄라랄&lt;/h2&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PrescriptionModal &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.youtube.com/watch?v=lZ7yPTI1xlc&amp;index=24&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq" target="_blank" rel="noopener">https://www.youtube.com/watch?v=lZ7yPTI1xlc&amp;index=24&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.1. 자식 컴포넌트</title>
      <link href="/2017/07/30/Angular/3.1.%20%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/"/>
      <url>/2017/07/30/Angular/3.1.%20%EC%9E%90%EC%8B%9D-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</url>
      
        <content type="html"><![CDATA[<p>템플릿에 새로운 태그를 만들어 사용, 복잡한 코드를 알아보기 쉽게 하거나, 하나의 컴포넌트를 여러 곳에 만들어서 사용할 수 있음. 자식 컴포넌트의 selector를 부모 컴포넌트에 사용하면 됌.</p><ul><li>child-component.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    selector: <span class="string">'child-component'</span>,</span><br><span class="line">    template: <span class="string">'&lt;h2 (click)="onClick()"&gt;자식 컴포넌트 &#123;&#123; no &#125;&#125;&lt;/h2&gt;'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent &#123;</span><br><span class="line">    no: <span class="built_in">number</span> = <span class="number">0</span>;</span><br><span class="line">    onClick() &#123;</span><br><span class="line">        <span class="keyword">this</span>.no++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.module.ts</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">import &#123; ChildComponent &#125; from &apos;../components/child-component&apos;;</span><br><span class="line">...</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">...</span><br><span class="line">    ChildComponent</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>만들어준 컴포넌트를 <code>declarations</code>에 추가한다.</p><p><em>자식 컴포넌트는 entryComponent에 추가해줄 필요가 없다.</em></p><ul><li>페이지.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ChildComponent &#125; <span class="keyword">from</span> <span class="string">'../components/child-component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;h2&gt;이곳은 부모&lt;/h2&gt;</span></span><br><span class="line"><span class="string">&lt;child-component&gt;&lt;/child-component&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.youtube.com/watch?v=mB5eYtFwJR4&amp;index=25&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq" target="_blank" rel="noopener">https://www.youtube.com/watch?v=mB5eYtFwJR4&amp;index=25&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.2. 컴포넌트 값 전달</title>
      <link href="/2017/07/30/Angular/3.2.%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B0%92%EC%A0%84%EB%8B%AC/"/>
      <url>/2017/07/30/Angular/3.2.%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EA%B0%92%EC%A0%84%EB%8B%AC/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>단방향 바인딩</strong>(클래스-&gt;템플릿)</li></ul><p>클래스에 선언된 msg 변수가 템플릿 표현식 에 바인딩돼 있으므로 실행시  위치에 hello가 들어감.</p><p>템플릿에서 변경된 내용이, 클래스에 전달되지는 않음.</p><ul><li><strong>양방향 바인딩</strong></li></ul><p>템플릿에서 변경된 내용이 클래스에도 바인딩.</p><ul><li><strong>모듈 등록(app.module.ts)</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MyComponent &#125; <span class="keyword">from</span> <span class="string">'./my.component'</span>;</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations : [</span><br><span class="line">    MyComponent</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li><strong>부모 컴포넌트 -&gt; 자식컴포넌트 상호작용</strong></li></ul><p><code>[]</code> 기호를 통해 자식 컴포넌트에게 데이터 바인딩가능(컴포넌트로 값 전달)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 부모</span></span><br><span class="line"><span class="meta">@Component</span>(&#123; </span><br><span class="line">  selector: <span class="string">'parent'</span>, </span><br><span class="line">  template: <span class="string">` </span></span><br><span class="line"><span class="string">  &lt;div&gt; 부모</span></span><br><span class="line"><span class="string">&lt;child [data1]="data"     // 필드 데이타</span></span><br><span class="line"><span class="string">   [data2]="data2()" // 함수</span></span><br><span class="line"><span class="string">   [data3]="data3"   // 배열</span></span><br><span class="line"><span class="string">   [data4]="1+1" // 연산</span></span><br><span class="line"><span class="string">            [data5]="data5" // static</span></span><br><span class="line"><span class="string">            [data6]="data6"&gt; // getter (in typescript) </span></span><br><span class="line"><span class="string">&lt;/child&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt; `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent &#123; </span><br><span class="line">  data = <span class="number">1</span>; </span><br><span class="line">  data2() &#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="string">"data2"</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  data3 = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>]; </span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> data5 = <span class="string">"Five"</span>;</span><br><span class="line">  <span class="keyword">get</span> data6() &#123; </span><br><span class="line">    <span class="keyword">return</span> ParentComponent.data5; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자식 방법 1</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123; </span><br><span class="line">  selector: <span class="string">'child'</span>, </span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt; 자식 &lt;/h2&gt; </span></span><br><span class="line"><span class="string">&#123;&#123;data1&#125;&#125;, &#123;&#123;data2&#125;&#125;, &#123;&#123;data3&#125;&#125;, &#123;&#123;data4&#125;&#125;, &#123;&#123;data5&#125;&#125;, &#123;&#123;data6&#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span> </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent &#123; </span><br><span class="line">  <span class="meta">@Input</span>() data1: <span class="built_in">number</span>; </span><br><span class="line">  <span class="meta">@Input</span>() data2: <span class="built_in">string</span>; </span><br><span class="line">  <span class="meta">@Input</span>() data3: <span class="built_in">string</span>[];</span><br><span class="line">  <span class="meta">@Input</span>() data4: <span class="built_in">number</span>; </span><br><span class="line">  <span class="meta">@Input</span>() data5: <span class="built_in">string</span>; </span><br><span class="line">  <span class="meta">@Input</span>() data6: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자식 방법 2 input 속성 이용</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123; </span><br><span class="line">  selector: <span class="string">'child'</span>, </span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;h2&gt; 자식 &lt;/h2&gt; </span></span><br><span class="line"><span class="string">&#123;&#123;data1&#125;&#125;, &#123;&#123;data2&#125;&#125;, &#123;&#123;data3&#125;&#125;, &#123;&#123;data4&#125;&#125;, &#123;&#123;data5&#125;&#125;, &#123;&#123;data6&#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/div&gt;`</span>, </span><br><span class="line">  inputs: [<span class="string">'data1'</span>, <span class="string">'data2'</span>, <span class="string">'data3'</span>, <span class="string">'data4'</span>, <span class="string">'data5'</span>, <span class="string">'data6'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent &#123; </span><br><span class="line">  data1: <span class="built_in">number</span>; </span><br><span class="line">  data2: <span class="built_in">string</span>; </span><br><span class="line">  data3: <span class="built_in">string</span>[]; </span><br><span class="line">  data4: <span class="built_in">number</span>;</span><br><span class="line">  data5: <span class="built_in">string</span>; </span><br><span class="line">  data6: <span class="built_in">string</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>자식 컴포넌트 -&gt; 부모컴포넌트 상호작용</strong></p><p>EventEmitter의 emit()메서드를 통해 이벤트를 전달.</p></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 자식 컴포넌트</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, EventEmitter, Output &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'child'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;자식 &lt;button (click)="updateParent(active)"&gt;부모에게 이벤트보내기&lt;/button&gt;&lt;/div&gt;`</span>,</span><br><span class="line">  styles: [<span class="string">`div&#123;border: 2px dotted #666;padding:10px;width:90%;height:50%;&#125;`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildComponent &#123;</span><br><span class="line">  active = <span class="literal">false</span>;</span><br><span class="line">  <span class="meta">@Output</span>() outputProperty = <span class="keyword">new</span> EventEmitter&lt;<span class="built_in">boolean</span>&gt;();</span><br><span class="line"></span><br><span class="line">  updateParent(active: <span class="built_in">boolean</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.active = !active;</span><br><span class="line">    <span class="keyword">this</span>.outputProperty.emit(<span class="keyword">this</span>.active);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Output 장식자로 선언한 변수와 동일한 속성명을 이용해 자식 컴포넌트가 전달한 값을 받음.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 부모컴포넌트</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">`&lt;div&gt;부모&lt;br&gt;</span></span><br><span class="line"><span class="string">              클릭수 : &#123;&#123;cntClick&#125;&#125;&lt;br&gt;</span></span><br><span class="line"><span class="string">              자식상태 : &#123;&#123;active&#125;&#125;</span></span><br><span class="line"><span class="string">              &lt;child (outputProperty)="outputEvent($event)"&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">          &lt;/div&gt;`</span>,</span><br><span class="line">  styles: [<span class="string">`div&#123;border: 2px solid #666;padding:10px;width:400px;height:200px;&#125;`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ChildToParentComponent &#123;</span><br><span class="line">  </span><br><span class="line">  cntClick = <span class="number">0</span>;</span><br><span class="line">  active = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  outputEvent(active: <span class="built_in">boolean</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.cntClick++;</span><br><span class="line">    <span class="keyword">this</span>.active = active;<span class="comment">//자식으로 부터 받은 값</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>자식 엘리먼트 탐색 : 쉐도우 DOM 한 개의 엘리먼트 가져오기</strong></li></ul><p>자식 엘리먼트와 같이 캡슐화되어 있는, 템플릿의 경우 템플릿이 그려진 이후에 참조가 가능하다. 이때 @ViewChild를 이용하면 템플릿이 만들어지기 전에 참조 가능하다. </p><p>지시자는 템플릿 내에 선언돼 있기 때문에(쉐도우 DOM), 초기화 되고 나서 지시자 정보를 얻을 수 있다. 때문에 <strong>@ViewChild와 setTimeout()</strong>함수를 이용해 상태정보를 알아냄.</p><blockquote><p>@ViewChild(클래스명) 변수명: 클래스명;</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AfterViewInit, Component, Directive, Input, ViewChild&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 지시자의 속성값은 DOM 생성 후 알 수 있음.</span></span><br><span class="line"><span class="meta">@Directive</span>(&#123; selector: <span class="string">'item'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Item &#123;</span><br><span class="line">  <span class="meta">@Input</span>() status: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'item-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;button&gt;알림창&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ItemComponent &#123;</span><br><span class="line">  display()&#123;</span><br><span class="line">    alert(<span class="string">'ItemComponent입니다'</span>);     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-view-child'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;item status="false" *ngIf="isShow==false"&gt;&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;item status="true" *ngIf="isShow==true"&gt;&lt;/item&gt;    </span></span><br><span class="line"><span class="string">    &lt;button (click)="toggle()"&gt;선택&lt;/button&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    isShow : &#123;&#123;isShow&#125;&#125;&lt;br&gt;</span></span><br><span class="line"><span class="string">    status : &#123;&#123;status&#125;&#125;&lt;br&gt;    </span></span><br><span class="line"><span class="string">    &lt;item-component (click)="display()"&gt;&lt;/item-component&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ViewchildComponent &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//@ViewChild를 통해 첫번째 item 엘리먼트를 가져옴.</span></span><br><span class="line">  <span class="meta">@ViewChild</span>(Item)</span><br><span class="line">  <span class="keyword">set</span> item(v: Item) &#123;    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">this</span>.status = v.status; &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ViewChild</span>(ItemComponent) itemComponent: ItemComponent;</span><br><span class="line">  isShow: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">  status: <span class="built_in">boolean</span>;</span><br><span class="line"> </span><br><span class="line">  toggle() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display()&#123;</span><br><span class="line">    <span class="keyword">this</span>.itemComponent.display();</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>자식 엘리먼트 탐색 : 쉐도우 DOM 복수개의 엘리먼트 가져오기</strong></li></ul><blockquote><p>@ViewChildren(‘설명 레이블’) children:QueryList&lt;참조 변수의 형&gt;;</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;child-cmp #child1 [childname]=<span class="string">"'자식1'"</span>&gt;&lt;<span class="regexp">/child-cmp&gt;</span></span><br><span class="line"><span class="regexp">&lt;child-cmp #child2 [childname]="'자식2'"&gt;&lt;/</span>child-cmp&gt;</span><br><span class="line">&lt;child-cmp #child3 [childname]=<span class="string">"'자식3'"</span>&gt;&lt;<span class="regexp">/child-cmp&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">export class ViewchildrenComponnet &#123;</span></span><br><span class="line"><span class="regexp">  @ViewChildren('child1,child2,child3') children:QueryList&lt;ChildCmp&gt;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>자식 엘리먼트 탐색 : DOM의 단수 개의 엘리먼트 가져오기</strong></p><p>@ContentChild(클래스명) 사용할 변수명: 클래스명;</p></li><li><p><strong>자식 엘리먼트 탐색 : DOM의 복수 개의 엘리먼트 가져오기</strong></p><p>@ContentChildren(클래스명) 사용할 변수명: 클래스명;</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p><p>@ViewChild와 @ConentChild의 차이 <a href="http://stackoverflow.com/questions/34326745/whats-the-difference-between-viewchild-and-contentchild" target="_blank" rel="noopener">http://stackoverflow.com/questions/34326745/whats-the-difference-between-viewchild-and-contentchild</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>12. 장식자 정리 - @ViewChild, @ViewChildren</title>
      <link href="/2017/07/26/Angular/12.%20%EC%9E%A5%EC%8B%9D%EC%9E%90%20%EC%A0%95%EB%A6%AC-@ViewChild-@ViewChildren/"/>
      <url>/2017/07/26/Angular/12.%20%EC%9E%A5%EC%8B%9D%EC%9E%90%20%EC%A0%95%EB%A6%AC-@ViewChild-@ViewChildren/</url>
      
        <content type="html"><![CDATA[<h2 id="ViewChild"><a href="#ViewChild" class="headerlink" title="@ViewChild"></a>@ViewChild</h2><p>자식 엘리먼트와 같이 캡슐화되어 있는, 템플릿의 경우 템플릿이 그려진 이후에 참조가 가능하다. 이때 @ViewChild를 이용하면 템플릿이 만들어지기 전에 참조 가능하다. </p><p>지시자는 템플릿 내에 선언돼 있기 때문에(쉐도우 DOM), 초기화 되고 나서 지시자 정보를 얻을 수 있다. 때문에 <strong>@ViewChild와 setTimeout()</strong>함수를 이용해 상태정보를 알아냄.</p><blockquote><p>@ViewChild(클래스명) 변수명: 클래스명;</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;AfterViewInit, Component, Directive, Input, ViewChild&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 지시자의 속성값은 DOM 생성 후 알 수 있음.</span></span><br><span class="line"><span class="meta">@Directive</span>(&#123; selector: <span class="string">'item'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Item &#123;</span><br><span class="line">  <span class="meta">@Input</span>() status: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'item-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;button&gt;알림창&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ItemComponent &#123;</span><br><span class="line">  display()&#123;</span><br><span class="line">    alert(<span class="string">'ItemComponent입니다'</span>);     </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-view-child'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;item status="false" *ngIf="isShow==false"&gt;&lt;/item&gt;</span></span><br><span class="line"><span class="string">    &lt;item status="true" *ngIf="isShow==true"&gt;&lt;/item&gt;    </span></span><br><span class="line"><span class="string">    &lt;button (click)="toggle()"&gt;선택&lt;/button&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    isShow : &#123;&#123;isShow&#125;&#125;&lt;br&gt;</span></span><br><span class="line"><span class="string">    status : &#123;&#123;status&#125;&#125;&lt;br&gt;    </span></span><br><span class="line"><span class="string">    &lt;item-component (click)="display()"&gt;&lt;/item-component&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ViewchildComponent &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//@ViewChild를 통해 첫번째 item 엘리먼트를 가져옴.</span></span><br><span class="line">  <span class="meta">@ViewChild</span>(Item)</span><br><span class="line">  <span class="keyword">set</span> item(v: Item) &#123;    </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">this</span>.status = v.status; &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ViewChild</span>(ItemComponent) itemComponent: ItemComponent;</span><br><span class="line">  isShow: <span class="built_in">boolean</span> = <span class="literal">true</span>;</span><br><span class="line">  status: <span class="built_in">boolean</span>;</span><br><span class="line"> </span><br><span class="line">  toggle() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isShow = !<span class="keyword">this</span>.isShow;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  display()&#123;</span><br><span class="line">    <span class="keyword">this</span>.itemComponent.display();</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ViewChildren"><a href="#ViewChildren" class="headerlink" title="@ViewChildren"></a>@ViewChildren</h2><blockquote><p>@ViewChildren(‘설명 레이블’) children:QueryList&lt;참조 변수의 형&gt;;</p></blockquote><p>복수개의 캡슐화된 엘리먼트(쉐도우 Dom)를 참조한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;child-cmp #child1 [childname]=<span class="string">"'자식1'"</span>&gt;&lt;<span class="regexp">/child-cmp&gt;</span></span><br><span class="line"><span class="regexp">&lt;child-cmp #child2 [childname]="'자식2'"&gt;&lt;/</span>child-cmp&gt;</span><br><span class="line">&lt;child-cmp #child3 [childname]=<span class="string">"'자식3'"</span>&gt;&lt;<span class="regexp">/child-cmp&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">export class ViewchildrenComponnet &#123;</span></span><br><span class="line"><span class="regexp">  @ViewChildren('child1,child2,child3') children:QueryList&lt;ChildCmp&gt;;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="번외"><a href="#번외" class="headerlink" title="번외"></a>번외</h4><ul><li><p><strong>@ContentChild  : DOM의 단수 개의 엘리먼트 가져오기</strong></p><p>@ContentChild(클래스명) 사용할 변수명: 클래스명;</p></li><li><p><strong>@ContentChildren : DOM의 복수 개의 엘리먼트 가져오기</strong></p><p>@ContentChildren(클래스명) 사용할 변수명: 클래스명;</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p><p>@ViewChild와 @ConentChild의 차이 <a href="http://stackoverflow.com/questions/34326745/whats-the-difference-between-viewchild-and-contentchild" target="_blank" rel="noopener">http://stackoverflow.com/questions/34326745/whats-the-difference-between-viewchild-and-contentchild</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS 적용 우선순위</title>
      <link href="/2017/07/24/CSS/%EC%A0%81%EC%9A%A9-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84/"/>
      <url>/2017/07/24/CSS/%EC%A0%81%EC%9A%A9-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84/</url>
      
        <content type="html"><![CDATA[<ol><li>!important를 붙인 속성</li><li>인라인 스타일(inline style) &gt; 내부 스타일(internal style) &gt; 외부 스타일(external sytle) &gt; 브라우저 기본값 순</li><li>특정도(specify) 우선순위 id priority &gt; class priority &gt; type priority</li><li>두 가지가 똑같은 등급일 때, 가장 마지막으로 적용한 것이 가장 우선한다.</li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>border 겹칠시 해결법</title>
      <link href="/2017/07/24/CSS/border-%EA%B2%B9%EC%B9%A0%EB%95%8C-%ED%95%B4%EA%B2%B0%EB%B2%95/"/>
      <url>/2017/07/24/CSS/border-%EA%B2%B9%EC%B9%A0%EB%95%8C-%ED%95%B4%EA%B2%B0%EB%B2%95/</url>
      
        <content type="html"><![CDATA[<p><code>margin: -1px 0 0 -1px</code> 을 주자!<br>위와 왼쪽 마진을 줄이는 코드.</p><p><a href="https://codepen.io/wolfcry911/pen/zAyFw" target="_blank" rel="noopener">https://codepen.io/wolfcry911/pen/zAyFw</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>요소별 수직, 수평 정렬 방법, 수평 수직 정렬</title>
      <link href="/2017/07/24/CSS/%EC%9A%94%EC%86%8C%EB%B2%8C-%EC%A0%95%EB%A0%AC%EB%B0%A9%EB%B2%95/"/>
      <url>/2017/07/24/CSS/%EC%9A%94%EC%86%8C%EB%B2%8C-%EC%A0%95%EB%A0%AC%EB%B0%A9%EB%B2%95/</url>
      
        <content type="html"><![CDATA[<ol><li>수직정렬</li><li>block 자체 수평정렬</li><li>inline 수평정렬</li><li>정중앙 정렬(flex)</li></ol><h2 id="수직정렬"><a href="#수직정렬" class="headerlink" title="수직정렬"></a>수직정렬</h2><ol><li>바깥 요소(outer)로 감싼다.</li><li>height를 설정한다.</li><li>바깥요소에 <code>vertical-align:middle; display:table-cell;</code> 셋팅</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outer"</span> <span class="attr">style</span>=<span class="string">"height:100px;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>vertical-align: baseline|<em>length</em>|sub|super|top|text-top|middle|bottom|text-bottom|initial|inherit;</p><p><a href="https://www.w3schools.com/cssref/playit.asp?filename=playcss_vertical-align&amp;preval=25px" target="_blank" rel="noopener">https://www.w3schools.com/cssref/playit.asp?filename=playcss_vertical-align&amp;preval=25px</a></p><p>또는 <strong>flex</strong>를 활용</p><p>요소에 </p><ol><li><code>display:flex; align-items:center</code>  하거나 </li><li><code>display:flex; flex-direction:column;justify-content:center;</code> </li></ol><p>둘중 하나를 사용</p><h2 id="block-자체-수평-정렬"><a href="#block-자체-수평-정렬" class="headerlink" title="block 자체 수평 정렬"></a>block 자체 수평 정렬</h2><p>block 요소는 원래 한줄을 다 차지한다. 따라서 요소 자체의 수평정렬이 불가하다. 그렇기 때문에 width를 통해 정렬이 가능하도록 해주고 해주고 왼쪽 오른쪽 마진 값, 또는 float으로 정렬한다.</p><ul><li><p>수평정렬</p><ul><li><p>block 요소의 정렬을 위해서는 <em>width 설정</em>이 필요.</p></li><li><p>가운데 정렬 : 좌우의 margin 값을 auto로 자동 맞춤 <code>margin: 0 auto</code></p></li><li><p>왼쪽 오른쪽 정렬 : <code>float: left, right</code></p></li></ul></li></ul><h2 id="inline-수평-정렬"><a href="#inline-수평-정렬" class="headerlink" title="inline 수평 정렬"></a>inline 수평 정렬</h2><ul><li>inline요소의 경우 감싸는 <code>wrapper div</code> 추가가 필요<ul><li>text-align: left,right,center : inline을 감싸고 있는 div에 적용.</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>sdfsdf<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="수평-수직-정렬"><a href="#수평-수직-정렬" class="headerlink" title="수평 수직 정렬"></a>수평 수직 정렬</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.area</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">display</span>:table-cell;</span><br><span class="line">    <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div class="area"&gt;</span><br><span class="line">    울랄라</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>flex 이용</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#outer</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;           <span class="comment">/* establish flex container */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: column;  <span class="comment">/* make main axis vertical */</span></span><br><span class="line">    <span class="attribute">justify-content</span>: center; <span class="comment">/* center items vertically, in this case */</span></span><br><span class="line">    <span class="attribute">align-items</span>: center;     <span class="comment">/* center items horizontally, in this case */</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> grey solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#inner</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;     <span class="comment">/* will center text in &lt;p&gt;, which is not a flex item */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div id="outer" style="height:100px;"&gt;</span><br><span class="line">  &lt;span id="inner"&gt;12345&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.w3schools.com/cssref/pr_pos_vertical-align.asp" target="_blank" rel="noopener">https://www.w3schools.com/cssref/pr_pos_vertical-align.asp</a></p><p><a href="http://inspiredjw.com/entry/CSS%EB%A1%9C-DIV-%ED%83%9C%EA%B7%B8%EB%A5%BC-%EC%83%81%ED%95%98-%EC%A2%8C%EC%9A%B0-%EA%B0%80%EC%9A%B4%EB%8D%B0-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0" target="_blank" rel="noopener">http://inspiredjw.com/entry/CSS%EB%A1%9C-DIV-%ED%83%9C%EA%B7%B8%EB%A5%BC-%EC%83%81%ED%95%98-%EC%A2%8C%EC%9A%B0-%EA%B0%80%EC%9A%B4%EB%8D%B0-%EC%A0%95%EB%A0%AC%ED%95%98%EA%B8%B0</a></p><p><a href="https://stackoverflow.com/questions/19026884/flexbox-center-horizontally-and-vertically" target="_blank" rel="noopener">https://stackoverflow.com/questions/19026884/flexbox-center-horizontally-and-vertically</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>media 태그</title>
      <link href="/2017/07/24/CSS/@media-%ED%83%9C%EA%B7%B8/"/>
      <url>/2017/07/24/CSS/@media-%ED%83%9C%EA%B7%B8/</url>
      
        <content type="html"><![CDATA[<p>출력 장치의 여러 특징을 분기 처리하여 하나의 HTML 소스가 여러가지 뷰를 갖도록 구현하는 명세.</p><p><code>@media only all and (조건문) {실행문}</code></p><ul><li><strong>@media</strong> : 미디어 쿼리가 시작됨을 선언.</li><li><strong>only</strong> : 미디어 쿼리를 지원하는 사용자만 쿼리 구문을 해석(default only)<ul><li>지원 브라우저 : ie9+, chrome 21+, firefox 3.5+, safari 4.0+, opera 9+</li></ul></li><li><strong>all</strong> : 미디어 쿼리를 해석해야 할 대상 미디어를 선언.<ul><li>all/ screen/ print 등이 있음.</li></ul></li><li><strong>and</strong> 또는 <strong>or(,)</strong></li><li><strong>(조건문)</strong> <ul><li>orientation : 가로모드/세로모드 판별 (orientation:portrait), (orientation:landscape)</li><li>width / height : (min-width:768px), (max-height:500px)</li></ul></li><li><strong>{실행문}</strong> :  CSS 코드를 작성</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://aboooks.tistory.com/365" target="_blank" rel="noopener">http://aboooks.tistory.com/365</a></p><p><a href="http://naradesign.net/wp/2012/05/30/1823/" target="_blank" rel="noopener">http://naradesign.net/wp/2012/05/30/1823/</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS display, visibility 속성</title>
      <link href="/2017/07/24/CSS/display_visibility_%ED%83%9C%EA%B7%B8%EC%A0%95%EB%A6%AC/"/>
      <url>/2017/07/24/CSS/display_visibility_%ED%83%9C%EA%B7%B8%EC%A0%95%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<p>inline 속성 : <code>&lt;b&gt;</code>, <code>&lt;span&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;a&gt;</code> 등 줄 바꿈이 되지 않음, 주로 줄속에 넣는 요소</p><p>block 속성 : <code>&lt;table&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;div&gt;</code>, <code>&lt;form&gt;</code> 등 줄 바꿈이 됌. 가로 화면 100%를 차지.</p><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><ul><li><strong>display: inline</strong> : 요소들을 inline 요소 처럼 표시</li><li><strong>display: block</strong> : 요소들을 block 요소 처럼 표시</li><li><strong>display:none</strong> : 박스가 생성되지 않고, <em>공간을 차지하지도 않음.</em></li><li><strong>float</strong> : block 요소들을 정렬함.</li><li><strong>dispaly:inline-block</strong> : 박스모양을 inline처럼 늘어뜨림.</li><li><strong>display:table-cell</strong> : 테이블 셀처럼 블록요소들을 늘어뜨린다.</li></ul><h2 id="inline-float-inline-block-table-cell의-차이"><a href="#inline-float-inline-block-table-cell의-차이" class="headerlink" title="inline, float, inline-block, table-cell의 차이"></a>inline, float, inline-block, table-cell의 차이</h2><p>셋 모두, block 요소들을 쭉 늘어뜨려 정리하는 역할을 가지고 있다. 그럼 어떤 차이점이 있나?</p><ol><li><strong>inline, inline-block</strong></li></ol><p>인라인 요소를 사용할 경우, 정렬은 되지만 요소들을 엔터로 구분한 것 때문에 빈칸이 생기게 된다.</p><p><img src="https://i.stack.imgur.com/aDgsb.png" alt="display:inline image"></p><ol start="2"><li><strong>float</strong></li></ol><p>float 요소를 사용할 경우, 감싸고 있는 div요소가 붕괴된다.</p><p><img src="https://i.stack.imgur.com/oIMvg.png" alt="float:left image"></p><ol start="3"><li><strong>table-cell</strong></li></ol><p>빈칸 없이, 테이블 모양으로 늘어뜨려진다. margin 속성을 주어도 요소간에 공간이 생기지 않는다.</p><p><img src="https://i.stack.imgur.com/BPtXn.png" alt="display:table-cell image"></p><h2 id="visibility"><a href="#visibility" class="headerlink" title="visibility"></a>visibility</h2><p>어떤 요소를 보이게할지 숨길지 결정</p><ul><li>visibility: visible : 기본값, 요소가 보임</li><li>visibility: hidden : 요소가 보이지 않음, <em>공간을 차지함</em></li><li>visibility: collapse : <table> 태그에서만 사용, 행과 열을 숨김.</table></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://stackoverflow.com/questions/11805352/floatleft-vs-displayinline-vs-displayinline-block-vs-displaytable-cell" target="_blank" rel="noopener">http://stackoverflow.com/questions/11805352/floatleft-vs-displayinline-vs-displayinline-block-vs-displaytable-cell</a></p><p><a href="http://aboooks.tistory.com/85" target="_blank" rel="noopener">http://aboooks.tistory.com/85</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS Position 속성 정리</title>
      <link href="/2017/07/24/CSS/position%EC%86%8D%EC%84%B1%EC%A0%95%EB%A6%AC/"/>
      <url>/2017/07/24/CSS/position%EC%86%8D%EC%84%B1%EC%A0%95%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>static 속성</strong><ul><li>기본값</li><li><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code>  속성이 <strong>무시</strong>됌.</li></ul></li><li><strong>relative 속성</strong><ul><li>별도의 프로퍼티 지정하지 않는 이상 static과 동일</li><li><strong>인접요소</strong>와의 거리 설정 <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 지정</li></ul></li><li><strong>absolute 속성</strong><ul><li>가장 가까운 <strong>조상 요소</strong>에  <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 에 따라 위치가 결정</li><li>부모요소가  relative일시, <code>left, right, bottom, top</code>은 부모의 영향을 받는다.</li><li>조상 요소가 없을 시에, window의 북서쪽 모서리 끝을 기준으로 정렬됌.</li></ul></li><li><strong>fixed 속성</strong><ul><li>스크롤 되더라도 같은 곳에 위치, <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 지정</li><li>모바일에서는 고정 엘리먼트 지원이 불안정</li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>position : <a href="http://ko.learnlayout.com/position.html" target="_blank" rel="noopener">http://ko.learnlayout.com/position.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SCSS 문법 정리</title>
      <link href="/2017/07/24/CSS/scss-%EB%AC%B8%EB%B2%95%EC%A0%95%EB%A6%AC/"/>
      <url>/2017/07/24/CSS/scss-%EB%AC%B8%EB%B2%95%EC%A0%95%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="변수"><a href="#변수" class="headerlink" title="변수"></a>변수</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$변수명: <span class="number">#ff0000</span>;</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: $변수명;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="스타일-변수-처리"><a href="#스타일-변수-처리" class="headerlink" title="스타일 변수 처리"></a>스타일 변수 처리</h2><blockquote><p>선언 : @mixin mixin명 {}</p><p>호출 : @include mixin명 {}</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> boxStyle &#123;</span><br><span class="line">  <span class="attribute">border</span> : <span class="number">1px</span> <span class="variable">$red</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> boxStyle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>선언 : @mixin mixin명(파라미터){}</p><p>호출 : @include mixin명(파라미터)</p></blockquote><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> style(<span class="variable">$color</span>, <span class="variable">$size</span>) &#123;</span><br><span class="line">  <span class="attribute">border</span> : <span class="variable">$size</span> <span class="variable">$color</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  @<span class="keyword">include</span> style(<span class="number">#fff064</span>, 10px)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.menu</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu1</span> &#123;</span><br><span class="line">  @<span class="keyword">extend</span> .menu;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="부모참조선택자"><a href="#부모참조선택자" class="headerlink" title="부모참조선택자"></a>부모참조선택자</h2><ul><li>scss</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$red</span>: <span class="number">#ff0000</span>;</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$red</span>;</span><br><span class="line">  &amp; <span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$red</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>css</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div &#123; color: #ff0000; &#125;</span><br><span class="line">div span &#123; color: #ff0000; &#125;</span><br></pre></td></tr></table></figure><h2 id="컴파일"><a href="#컴파일" class="headerlink" title="컴파일"></a>컴파일</h2><p>scss가 존재하는 경로로 이동해서</p><blockquote><p>&gt; sass –style <strong>nested</strong> 작성된scss명.scss 바꿔줄css명.css      &lt;- 기본</p><p>&gt; sass –style <strong>expanded</strong> 작성된scss명.scss 바꿔줄css명.css      &lt;- 확장</p><p>&gt; sass –style <strong>compact</strong> 작성된scss명.scss 바꿔줄css명.css      &lt;- 축약</p></blockquote><h4 id="자동-컴파일"><a href="#자동-컴파일" class="headerlink" title="자동 컴파일"></a>자동 컴파일</h4><blockquote><p>&gt; sass –watch 작성된.scss</p><p>&gt; sass –watch –style 스타일종류 작성된.scss</p><p>&gt; sass –watch .:. </p><p>&gt; sass –watch –style 스타일종류 .:. </p></blockquote><h2 id="Refenrece"><a href="#Refenrece" class="headerlink" title="Refenrece"></a>Refenrece</h2><p> [회복맨 블로그] : <a href="http://recoveryman.tistory.com/277" target="_blank" rel="noopener">http://recoveryman.tistory.com/277</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS 상대 크기</title>
      <link href="/2017/07/24/CSS/%EC%83%81%EB%8C%80-%ED%81%AC%EA%B8%B0/"/>
      <url>/2017/07/24/CSS/%EC%83%81%EB%8C%80-%ED%81%AC%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>CSS 상대적인 크기에 대해 알아본다.</p><h1 id="em"><a href="#em" class="headerlink" title="em"></a>em</h1><ul><li>최근에 정의한(부모 요소) font-size를 1em 으로 함, 계속해서 누적됌.</li><li>없으면 브라우저 기본값을 따름</li><li>9pt = 16px = 1em</li></ul><h1 id="REM"><a href="#REM" class="headerlink" title="REM"></a>REM</h1><ul><li>최상위 브라우저 기본 폰트 크기를 1rem으로 함, 누적되지 않음.</li></ul><h2 id="vh-ve"><a href="#vh-ve" class="headerlink" title="vh, ve"></a>vh, ve</h2><p>브라우저 윈도우 크기의 1/100 크기를 “1”로 함</p><ul><li>2000 x 1000 px 크기의 윈도우라면</li></ul><blockquote><p>1vh = 10px</p></blockquote><blockquote><p>1vw = 20px</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://pshweb.tistory.com/entry/REM-%EA%B3%BC-EM-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%95%8C%EC%95%84%EB%B4%85%EC%8B%9C%EB%8B%A4" target="_blank" rel="noopener">http://pshweb.tistory.com/entry/REM-%EA%B3%BC-EM-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%95%8C%EC%95%84%EB%B4%85%EC%8B%9C%EB%8B%A4</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.2. 모달 추가 방법 정리</title>
      <link href="/2017/07/24/Ionic/3.2.%20modal/"/>
      <url>/2017/07/24/Ionic/3.2.%20modal/</url>
      
        <content type="html"><![CDATA[<p>모달 추가 방법 정리</p><h2 id="모달-호출"><a href="#모달-호출" class="headerlink" title="모달 호출"></a>모달 호출</h2><ul><li>호출 컴포넌트</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; ModalController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이번의 주인공 모달 페이지 추가</span></span><br><span class="line"><span class="keyword">import</span> &#123; DrugboxModal &#125; <span class="keyword">from</span> <span class="string">'../drugbox/drugbox'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomePage <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">...</span></span><br><span class="line"><span class="params"><span class="keyword">public</span> modalCtrl: ModalController</span></span><br><span class="line"><span class="params">    </span>) &#123; ... &#125;</span><br><span class="line">  </span><br><span class="line">  openDrugboxModal() &#123;</span><br><span class="line"><span class="keyword">const</span> modal = <span class="keyword">this</span>.modalCtrl.create(DrugboxModal);</span><br><span class="line">modal.present();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>템플릿</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row row-center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col col-center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-button</span> <span class="attr">block</span> <span class="attr">color</span>=<span class="string">"danger"</span> (<span class="attr">click</span>)=<span class="string">openDrugboxModal()</span>&gt;</span><span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"archive"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      약물 등록</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="모달"><a href="#모달" class="headerlink" title="모달"></a>모달</h2><ul><li>모달 컴포넌트</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ViewController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  templateUrl: <span class="string">'drugbox.html'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DrugboxModal &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> viewCtrl: ViewController</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  closeModal(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.viewCtrl.dismiss();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>모달 템플릿</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-buttons</span> <span class="attr">start</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>)=<span class="string">"closeModal()"</span> <span class="attr">ion-button</span> <span class="attr">icon-only</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-buttons</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>약품함<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span>&gt;</span>약품함입니다.<span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span>&gt;</span>약품을 등록해주세요!<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="모달-등록"><a href="#모달-등록" class="headerlink" title="모달 등록"></a>모달 등록</h2><ul><li>app.module.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; DrugboxModal &#125; <span class="keyword">from</span> <span class="string">'../pages/drugbox/drugbox'</span>;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    ...</span><br><span class="line">    DrugboxModal</span><br><span class="line">  ],</span><br><span class="line">  ....</span><br><span class="line">    entryComponents: [</span><br><span class="line">    ...</span><br><span class="line">    DrugboxModal</span><br><span class="line">  ],</span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/angularjs-de/ionic2-pizza-service/blob/master/src/pages/order/order.component.ts" target="_blank" rel="noopener">https://github.com/angularjs-de/ionic2-pizza-service/blob/master/src/pages/order/order.component.ts</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01.1. Ionic App Component</title>
      <link href="/2017/07/24/Ionic/1.1.%20app_component/"/>
      <url>/2017/07/24/Ionic/1.1.%20app_component/</url>
      
        <content type="html"><![CDATA[<h3 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h3><p>W3C 표준인 웹 컴포넌트 기술을 기반으로 HTML, CS, JS를 하나의 단위로 묶어주는 기술로, 앱을 구성하는 요소나 로직을 말함.</p><h3 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h3><p>Decorator는 주로 클래스, 서비스, 타입, 멤버변수 등을 ‘장식’하는 역할.</p><ul><li>클래스 앞에 <code>@Component</code>를 해주면 그 클래스는 컴포넌트가 됌.</li><li>변수 앞에  <code>@Input</code> 를 해주면 외부로 부터 값을 받음</li><li>변수 앞에 <code>@output</code>를 해주면 외부로 값을 보냄.</li></ul><p>Decorator는 Typescript의 실험적인 구문으로,  <code>tsconfig.json</code>의 <code>experimentalDecorators&quot; : true</code>를 설정하면 사용할 수 있음(ionic-cli 자동셋팅)</p><p>Ionic2에서는 Typescript의 일부 Decorator만 사용 가능, 앵귤러와도 약간 다름.</p><blockquote><p>ex) 앵귤러의 decorations 등을 아이오닉에서는 사용 불가</p></blockquote><h3 id="Ionic의-컴포넌트"><a href="#Ionic의-컴포넌트" class="headerlink" title="Ionic의 컴포넌트"></a>Ionic의 컴포넌트</h3><p><code>@Component 데코레이터</code>로 장식된 클래스를 컴포넌트라고 통칭함.</p><h3 id="메타데이터"><a href="#메타데이터" class="headerlink" title="메타데이터"></a>메타데이터</h3><p>메타에디터 : <code>@Component</code> 에는 하나의 객체 파라미터를 전달할 수 있음 이를 메타데이터라고 함.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: ... <span class="comment">// 컴포넌트를 어디에 표시할지</span></span><br><span class="line">  template: ... <span class="comment">// 컴포넌트 내용을 담는 곳</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>app.component.ts</li></ul><p>앱이 최초 실행되는 위치이다. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomePage &#125; <span class="keyword">from</span> <span class="string">'../pages/home/home'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  template: <span class="string">'&lt;ion-nav #content [root]="rootPage"&gt;&lt;/ion-nav&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  rootPage: any = TabsPage;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Component의 메타데이터에, <code>selector</code>가 없는 대신 디폴트로 <code>ion-app</code>이 사용된다.</p><p><code>[root]</code> 는 DOM 속성으로, 어떤 페이지가 RootPage 인지 표시.</p><p><strong>#은 참조변수의 의미</strong>이다. 참조변수가 #content이라고 선언돼 있을때 root 페이지를 참조하려면 과 같이 접근한다.</p><ul><li>home.ts</li></ul><p>앱 컴포넌트에서 참조한 HomePage</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">selector: <span class="string">'page-home'</span>,</span><br><span class="line">templateUrl: <span class="string">'home.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HomePage &#123;</span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> navCtrl: NavController</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"시작!"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.module.ts</li></ul><p>어떤 페이지, 서비스를 사용하는지, 어떤 컴포넌트가 루트 컴포넌트인지.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    MyApp,</span><br><span class="line">    HomePage,</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    IonicModule.forRoot(MyApp)</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [IonicApp],</span><br><span class="line">  entryComponents: [</span><br><span class="line">    MyApp,</span><br><span class="line">    HomePage,</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  providers: [</span><br><span class="line">    ...</span><br><span class="line">    &#123; provide: ErrorHandler, useClass: IonicErrorHandler &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>@NgModule을 통해 AppModule을 장식</p><ol><li><p>declarations : 사용할 컴포넌트들 등록</p></li><li><p>imports: [ IonicModule.forRoot(MyApp) ] : 루트 컴포넌트 등록(MyApp)</p></li><li><p>entryComponents : 페이지 컴포넌트를 등록.</p></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.youtube.com/watch?v=zp3goVaR8Vg&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq&amp;index=9" target="_blank" rel="noopener">https://www.youtube.com/watch?v=zp3goVaR8Vg&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq&amp;index=9</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01. Ionic2의 프로젝트 구조</title>
      <link href="/2017/07/24/Ionic/1.%20Ionic%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B5%AC%EC%A1%B0/"/>
      <url>/2017/07/24/Ionic/1.%20Ionic%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B5%AC%EC%A1%B0/</url>
      
        <content type="html"><![CDATA[<p>src 폴더에 작업 코드가 있고, 컴파일 후 www 폴더로 전환되는 구조.</p><p>ionic serve로 앱을 실행하면 src 폴더 내용이 컴파일되고 합쳐져서 www 폴더로 저장(<code>rollup js</code> 활용)</p><p><code>www/build</code></p><p>main.css</p><blockquote><p>src 폴더의 모든 css 파일들이 main.css 파일들이 저장 됌</p></blockquote><p>main.js</p><blockquote><p>src 폴더의 모든 TS 파일들이 js로 컴파일되고 합쳐져 main.js로 저장.</p></blockquote><p>index.html을 보면 build/main.js와 build/main.css를 참조하는 것을 확인할 수 있다.</p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05. Ionic Push</title>
      <link href="/2017/07/24/Ionic/5.%20Ionic-push/"/>
      <url>/2017/07/24/Ionic/5.%20Ionic-push/</url>
      
        <content type="html"><![CDATA[<p>서버에서 아이오닉 앱으로 Push 메세지 수신기능 구현.</p><p>구글 FCM을 활용한다. (Ionic 2, Angular 2 기반)</p><h2 id="Cloud-Client-셋팅"><a href="#Cloud-Client-셋팅" class="headerlink" title="Cloud Client 셋팅"></a>Cloud Client 셋팅</h2><p>아이오닉 서비스와 통신하기 위해서 Cloud Client 셋팅이 필요</p><blockquote><p>$ npm install @ionic/cloud-angular –save</p></blockquote><h2 id="App-Id"><a href="#App-Id" class="headerlink" title="App Id"></a>App Id</h2><blockquote><p>$ ionic io init</p></blockquote><p>위 명령어를 치면 <strong>ionic.config.json</strong>에 APP_ID 가 셋팅된다.</p><p>이 APP_ID를 기억할것.</p><h2 id="안드로이드-Push-ID-발급"><a href="#안드로이드-Push-ID-발급" class="headerlink" title="안드로이드 Push ID 발급"></a>안드로이드 Push ID 발급</h2><p>구글 Firebase로 이동해 Fcm Server Key/Sender Id를 발급받는다.</p><p>프로젝트 생성 후, Settings-&gt;Cloud Messageing Tab에서 확인할 수 있다.</p><p><a href="http://docs.ionic.io/services/profiles/#android-fcm-project--server-key" target="_blank" rel="noopener">발급 방법</a></p><p><a href="https://console.firebase.google.com/" target="_blank" rel="noopener">Firebase 링크</a></p><h2 id="설정"><a href="#설정" class="headerlink" title="설정"></a>설정</h2><ul><li><strong>src/app/app.module.ts</strong></li></ul><p>위 파일에 아래와 같이 클라우드 셋팅 정보를 추가한다.</p><p>APP_ID에 위에서 메모한 정보를 입력</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; CloudSettings, CloudModule &#125; <span class="keyword">from</span> <span class="string">'@ionic/cloud-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cloudSettings: CloudSettings = &#123;</span><br><span class="line">  <span class="string">'core'</span>: &#123;</span><br><span class="line">    <span class="string">'app_id'</span>: <span class="string">'APP_ID'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'push'</span>: &#123;</span><br><span class="line">    <span class="string">'sender_id'</span>: <span class="string">'SENDER_ID'</span>,</span><br><span class="line">    <span class="string">'pluginConfig'</span>: &#123;</span><br><span class="line">      <span class="string">'ios'</span>: &#123;</span><br><span class="line">        <span class="string">'badge'</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">'sound'</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'android'</span>: &#123;</span><br><span class="line">        <span class="string">'iconColor'</span>: <span class="string">'#343434'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [ ... ],</span><br><span class="line">  imports: [</span><br><span class="line">    IonicModule.forRoot(MyApp),</span><br><span class="line">    CloudModule.forRoot(cloudSettings)</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [IonicApp],</span><br><span class="line">  entryComponents: [ ... ],</span><br><span class="line">  providers: [ ... ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Push-Plugin-설치"><a href="#Push-Plugin-설치" class="headerlink" title="Push Plugin 설치"></a>Push Plugin 설치</h2><p>위에서 발급받은 Sender_ID를 포함하여 아래 명령어를 입력</p><blockquote><p>$ cordova plugin add phonegap-plugin-push –variable SENDER_ID=12341234 –save</p></blockquote><h2 id="Push-등록-메세지-수신-코드"><a href="#Push-등록-메세지-수신-코드" class="headerlink" title="Push 등록/메세지 수신 코드"></a>Push 등록/메세지 수신 코드</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavController, NavParams, Platform &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Push, PushToken &#125; <span class="keyword">from</span> <span class="string">'@ionic/cloud-angular'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">    selector: <span class="string">'page-schedule'</span>,</span><br><span class="line">    templateUrl: <span class="string">'schedule.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulePage</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(</span><br><span class="line">        public navCtrl: NavController,</span><br><span class="line">        public navParams: NavParams,</span><br><span class="line">        public push: Push,</span><br><span class="line">        public platform: Platform</span><br><span class="line">    ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    ngOnInit() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.platform.is(<span class="string">'android'</span>)) &#123;</span><br><span class="line">            <span class="comment">// 푸시 Register</span></span><br><span class="line">            <span class="keyword">this</span>.push.register().then(<span class="function">(<span class="params">t: PushToken</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.push.saveToken(t);</span><br><span class="line">            &#125;).then(<span class="function">(<span class="params">t: PushToken</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Token saved:'</span>, t.token);</span><br><span class="line">            &#125;);</span><br><span class="line">    </span><br><span class="line">            <span class="comment">// 푸시 메세지 수신</span></span><br><span class="line">            <span class="keyword">this</span>.push.rx.notification()</span><br><span class="line">                .subscribe(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">                    alert(msg.title + <span class="string">': '</span> + msg.text);</span><br><span class="line">            &#125;);   </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'not android'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>푸시를 등록할 페이지에 위와 같이 코드를 등록한다.</p><p>웹에서 테스트하면, push not found… 와 같은 에러메세지가 나오므로</p><p>에뮬레이터나 실제 디바이스에서 테스트 해야한다.</p><blockquote><p> 푸시 Register 부분은 로그인 이후에 넣는 것이 권장된다.</p></blockquote><h2 id="푸시-수신-테스트-안드로이드"><a href="#푸시-수신-테스트-안드로이드" class="headerlink" title="푸시 수신 테스트(안드로이드)"></a>푸시 수신 테스트(안드로이드)</h2><p><a href="https://apps.ionic.io/apps/" target="_blank" rel="noopener">대시보드</a></p><p>대시보드에서 앱설정으로 들어간 뒤 Settings -&gt; Certificates 에서 프로필을 생성한다.</p><p>다음 생성된 프로필에 ‘Edit’에 들어간뒤 키를 넣어야 하는데.</p><ul><li>MY-RELEASE-KEY : 키 파일 이름</li><li>MY_ALIAS_NAME : 식별 이름 </li></ul><p>위 내용을 본인에 맞게 수정 후 커맨드를 입력한다.</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; $ keytool -genkey -v -keystore MY-RELEASE-KEY.keystore -alias MY_ALIAS_NAME -keyalg RSA -keysize 2048 -validity 10000</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>키 생성을 위한 정보를 입력하고 비밀번호를 입력하면. 프로젝트 root 폴더에 키가 생성된다.</li><li>해당 키파일과 비밀번호를 위의 Ceftificates -&gt; Profile -&gt; Edit에 등록한다.</li></ul><blockquote><p>등록 후 DashBoard -&gt; 프로젝트 선택 -&gt; Push 탭에서 푸시메세지를 발송해볼 수 있다.</p></blockquote><p>**에뮬레이터나, 실제 디바이스에서 테스트 해볼것</p><h2 id="푸시-발송"><a href="#푸시-발송" class="headerlink" title="푸시 발송"></a>푸시 발송</h2><ul><li>리눅스에서 아래와 같이 curl을 이용하여 푸시를 테스트 해볼 수 있다.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST \</span><br><span class="line">  https://api.ionic.io/push/notifications \</span><br><span class="line">  -H 'authorization: Bearer [아이오닉 API토큰값]' \</span><br><span class="line">  -H 'content-type: application/json' \</span><br><span class="line">  -d '&#123;</span><br><span class="line">    "tokens": ["[디바이스토큰]"],</span><br><span class="line">    "profile": "[위에서 생성한 security profile]",</span><br><span class="line">    "notification": &#123;</span><br><span class="line">        "message": "Hello World! 안녕 친구들"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;'</span><br></pre></td></tr></table></figure><ul><li>Java 버젼 코드</li></ul><p>아래는 아이오닉 푸시 래퍼를 이용하는 방법인데, 한글 전송시 한글이 깨지는 문제가 있어서 필자는 해결책을 찾지 못하였다(문제 코드에 코멘트 부탁드립니다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">HttpClient httpClient = HttpClientBuilder.create().build();</span><br><span class="line">HttpPost request = <span class="keyword">new</span> HttpPost(API_PUSH_URL);</span><br><span class="line"><span class="comment">// 헤더 설정</span></span><br><span class="line">request.addHeader(<span class="string">"content-type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">request.addHeader(<span class="string">"Authorization"</span>, <span class="string">"Bearer "</span> + apiProp.getProperty(<span class="string">"api.ionic.key"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 푸시 메세지 내용</span></span><br><span class="line">JSONObject messageObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">messageObject.put(<span class="string">"message"</span>, URLEncoder.encode(title, <span class="string">"UTF-8"</span>).replaceAll(<span class="string">"[+]"</span>, <span class="string">" "</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 푸시 대상</span></span><br><span class="line">JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</span><br><span class="line"><span class="keyword">for</span> (DataMap result : <span class="keyword">this</span>.userService.selectList(<span class="keyword">new</span> UserVo())) &#123;</span><br><span class="line">  jsonArray.add(result.get(<span class="string">"deviceToken"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 파라미터</span></span><br><span class="line">JSONObject paramters = <span class="keyword">new</span> JSONObject();</span><br><span class="line">paramters.put(<span class="string">"tokens"</span>, jsonArray.toString());</span><br><span class="line">paramters.put(<span class="string">"profile"</span>, apiProp.getProperty(<span class="string">"api.ionic.profile"</span>));</span><br><span class="line">paramters.put(<span class="string">"notification"</span>, messageObject.toString());</span><br><span class="line"></span><br><span class="line">request.setEntity(<span class="keyword">new</span> StringEntity(paramters.toString()));</span><br><span class="line">HttpResponse response = httpClient.execute(request);</span><br><span class="line"><span class="keyword">this</span>.log.debug(<span class="keyword">new</span> BasicResponseHandler().handleResponse(response));</span><br></pre></td></tr></table></figure><p>아이오닉 래퍼가 아닌, 구글 FCM을 활용하는 방법</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">sendAndroidPushNotification</span><span class="params">(String device_token, String topics, String title, String message)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String pushMessage = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (device_token != <span class="keyword">null</span> &amp;&amp; !device_token.equals(<span class="string">"null"</span>)) &#123;</span><br><span class="line">pushMessage = <span class="string">"&#123;\"data\":&#123;\"title\":\""</span> + title + <span class="string">"\",\"message\":\""</span> + message + <span class="string">"\"&#125;,\"to\":\""</span></span><br><span class="line">+ device_token + <span class="string">"\"&#125;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pushMessage = <span class="string">"&#123;\"data\":&#123;\"title\":\""</span> + title + <span class="string">"\",\"message\":\""</span> + message + <span class="string">"\"&#125;,\"to\": \"/topics/"</span></span><br><span class="line">+ topics + <span class="string">"\"&#125;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Create connection to send FCM Message request.</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://fcm.googleapis.com/fcm/send"</span>);</span><br><span class="line">HttpURLConnection conn = (HttpURLConnection) url.openConnection();</span><br><span class="line">conn.setRequestProperty(<span class="string">"Authorization"</span>, <span class="string">"key="</span> + SERVER_KEY);</span><br><span class="line">conn.setRequestProperty(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">conn.setRequestMethod(<span class="string">"POST"</span>);</span><br><span class="line">conn.setDoOutput(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// Send FCM message content.</span></span><br><span class="line">OutputStream outputStream = conn.getOutputStream();</span><br><span class="line">outputStream.write(pushMessage.getBytes());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Android Push Notification: "</span> + conn.getResponseCode() + <span class="string">" "</span> + conn.getResponseMessage() + <span class="string">" - "</span> + pushMessage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>서버키는 파이어베이스 대시보드 - 프로젝트 설정 - 클라우드 메세징 탭에서 확인이 가능하다.</p><ul><li>푸시 클릭시 action 설정</li></ul><p>아직 작성해보지는 않았지만 아래 소스처럼 셋팅을 하면 된다고 함.</p><p><a href="https://github.com/aggarwalankush/ionic-push-base/blob/master/src/app/app.ts" target="_blank" rel="noopener">https://github.com/aggarwalankush/ionic-push-base/blob/master/src/app/app.ts</a></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://docs.ionic.io/services/push/" target="_blank" rel="noopener">Ionic Doc Push</a></p><p><a href="http://docs.ionic.io/api/endpoints/push.html#post-notifications" target="_blank" rel="noopener">http://docs.ionic.io/api/endpoints/push.html#post-notifications</a></p><p><a href="https://forum.ionicframework.com/t/ionic-push-notification-android-and-ios-working/64004/36" target="_blank" rel="noopener">https://forum.ionicframework.com/t/ionic-push-notification-android-and-ios-working/64004/36</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02. Ionic 시작하기</title>
      <link href="/2017/07/24/Ionic/2.%20Ionic-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/"/>
      <url>/2017/07/24/Ionic/2.%20Ionic-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<p>아이오닉을 시작하기 위해서</p><p>기본 셋팅과, 명령어를 알아본다.</p><h2 id="Node-설치"><a href="#Node-설치" class="headerlink" title="Node 설치"></a>Node 설치</h2><p><a href="https://nodejs.org" target="_blank" rel="noopener">https://nodejs.org</a></p><p>설치 후 커맨드 창을 열어</p><blockquote><p>$ node</p><p>&gt; console.log(‘hello node’);</p><p>hello node</p><p>undefined</p></blockquote><p>와 같이 나온다면 성공.</p><h2 id="Cordova-설치"><a href="#Cordova-설치" class="headerlink" title="Cordova 설치"></a>Cordova 설치</h2><p>코도바는 하이브리드 앱에서 네이티브 앱의 기능을 사용할 수 있게 하는 라이브러리다.</p><blockquote><p>npm install -g cordova</p></blockquote><h2 id="CLI-설치하기"><a href="#CLI-설치하기" class="headerlink" title="CLI 설치하기"></a>CLI 설치하기</h2><p>CLI는 아이오닉 프레임워크 개발에 가장 기초가 되는 툴이다.</p><p>start/build/serve/run/emulate/info 같은 명령어를 사용하기 위해서는</p><p>CLI 툴을 설치해야 한다.</p><p>node와 npm이 설치 되어 있어야 한다.</p><blockquote><p>$ npm install -g ionic</p></blockquote><h2 id="명령어"><a href="#명령어" class="headerlink" title="명령어"></a>명령어</h2><ul><li>새 프로젝트 만들기</li></ul><blockquote><p>$ ionic start –v2 myApp blank</p></blockquote><p>blank 대신 다른 템플릿을 입력할 수도 있다. (blank/sidemenu/tabs/tutorial,github-url)</p><ul><li>정보 보기</li></ul><blockquote><p>$ ionic info</p></blockquote><ul><li>디버깅</li></ul><blockquote><p>$ ionic serve</p></blockquote><ul><li>플랫폼별 브라우저 확인</li></ul><blockquote><p>$ ionic serve –lab</p></blockquote><ul><li>업로드</li></ul><blockquote><p>$ ionic upload</p></blockquote><ul><li>사용가능 명령어 확인</li></ul><blockquote><p>$ ionic .</p></blockquote><h4 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h4><p><a href="http://ionicframework.com/docs/cli/" target="_blank" rel="noopener">Ionic docs</a></p><p><a href="https://medium.com/witinweb/ionic-2-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-ed011c7fe69b" target="_blank" rel="noopener">스키머님 블로그</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04. MVC 패턴으로 Http request</title>
      <link href="/2017/07/24/Ionic/4.%20mvc-http-request/"/>
      <url>/2017/07/24/Ionic/4.%20mvc-http-request/</url>
      
        <content type="html"><![CDATA[<p>Angular 2, Ionic 2 기준 MVC 생성</p><h2 id="모델-생성"><a href="#모델-생성" class="headerlink" title="모델 생성"></a>모델 생성</h2><p>src/models 폴더를 생성</p><ul><li>index.ts 파일 생성</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./[모델명].model'</span>;</span><br></pre></td></tr></table></figure><ul><li>[모델명].model.ts 파일 생성 : 안에 자료형을 생성해줍니다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface [모델명] &#123;</span><br><span class="line">  [변수이름]: [자료형];</span><br><span class="line">  userNo: number;</span><br><span class="line">  startDt: <span class="built_in">Date</span>;</span><br><span class="line">  timeDivision: string;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="서비스-생성"><a href="#서비스-생성" class="headerlink" title="서비스 생성"></a>서비스 생성</h2><p>아이오닉 작업 폴더에서 아래 커맨드 입력</p><blockquote><p>$ ionic g provider [서비스이름]</p></blockquote><p>그럼 providers 폴더 아래 서비스가 생성된다.</p><ul><li>[서비스파일명].ts : 아래를 참고하여 http 통신 부분을 작성한다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http, Response &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Observable&#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>; <span class="xml"><span class="comment">&lt;!-- Obserable을 사용하여 비동기통신 --&gt;</span></span></span><br><span class="line"><span class="xml">import 'rxjs/add/operator/map';</span></span><br><span class="line"><span class="xml">import 'rxjs/add/operator/delay';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">import &#123;Schedule&#125; from '../models'; <span class="comment">&lt;!-- 위에서 생선한 모델명을 &#123;&#125;안에 입력 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">@Injectable()</span></span><br><span class="line"><span class="xml">export class ScheduleService &#123;</span></span><br><span class="line"><span class="xml">    constructor(public http: Http) &#123;&#125;</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line">    getSchedules(): Observable&lt;Schedule[]&gt; &#123;</span><br><span class="line">        return this.http</span><br><span class="line">          .get('http://localhost/schedule/selectScheduleList.do') &lt;!-- 호출한 url 입력--&gt;</span><br><span class="line">          .delay(2000)</span><br><span class="line">          .map((res: Response) =&gt; res.json());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.ts</li></ul><p>providers 폴더 안에 index 파일을 작성한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">'./[추가한 서비스파일명]'</span>;</span><br></pre></td></tr></table></figure><h2 id="모듈-추가"><a href="#모듈-추가" class="headerlink" title="모듈 추가"></a>모듈 추가</h2><ul><li>app.module.ts</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule, ErrorHandler &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IonicApp, IonicModule, IonicErrorHandler &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; MyApp &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomePage &#125; <span class="keyword">from</span> <span class="string">'../pages/home/home'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SchedulePage &#125; <span class="keyword">from</span> <span class="string">'../pages/schedule/schedule'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ScheduleService &#125; <span class="keyword">from</span> <span class="string">'../providers'</span>; <span class="xml"><span class="comment">&lt;!-- 추가한 서비스경로를 기입 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">import &#123; StatusBar &#125; from '@ionic-native/status-bar';</span></span><br><span class="line"><span class="xml">import &#123; SplashScreen &#125; from '@ionic-native/splash-screen';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">@NgModule(&#123;</span></span><br><span class="line"><span class="xml">  declarations: [</span></span><br><span class="line"><span class="xml">    MyApp,</span></span><br><span class="line"><span class="xml">    HomePage,</span></span><br><span class="line"><span class="xml">    SchedulePage</span></span><br><span class="line"><span class="xml">  ],</span></span><br><span class="line"><span class="xml">  imports: [</span></span><br><span class="line"><span class="xml">    IonicModule.forRoot(MyApp)</span></span><br><span class="line"><span class="xml">  ],</span></span><br><span class="line"><span class="xml">  bootstrap: [IonicApp],</span></span><br><span class="line"><span class="xml">  entryComponents: [</span></span><br><span class="line"><span class="xml">    MyApp,</span></span><br><span class="line"><span class="xml">    HomePage,</span></span><br><span class="line"><span class="xml">    SchedulePage</span></span><br><span class="line"><span class="xml">  ],</span></span><br><span class="line"><span class="xml">  providers: [</span></span><br><span class="line"><span class="xml">    ScheduleService, <span class="comment">&lt;!-- 추가한 서비스를 기입 --&gt;</span></span></span><br><span class="line"><span class="xml">    StatusBar,</span></span><br><span class="line"><span class="xml">    SplashScreen,</span></span><br><span class="line"><span class="xml">    &#123;provide: ErrorHandler, useClass: IonicErrorHandler&#125;</span></span><br><span class="line"><span class="xml">  ]</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">export class AppModule &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="뷰페이지-작성"><a href="#뷰페이지-작성" class="headerlink" title="뷰페이지 작성"></a>뷰페이지 작성</h2><ul><li>schedule.ts</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>; <span class="xml"><span class="comment">&lt;!-- OnInit 추가 --&gt;</span></span></span><br><span class="line"><span class="xml">import &#123; NavController, Refresher, NavParams &#125; from 'ionic-angular'; <span class="comment">&lt;!-- Refresher 추가 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">import &#123;ScheduleService&#125; from '../../providers'; <span class="comment">&lt;!-- 서비스와 모델 추가 --&gt;</span></span></span><br><span class="line"><span class="xml">import &#123;Schedule&#125; from '../../models';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">@Component(&#123;</span></span><br><span class="line"><span class="xml">  selector: 'page-schedule',</span></span><br><span class="line"><span class="xml">  templateUrl: 'schedule.html'</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">export class SchedulePage implements OnInit &#123;</span></span><br><span class="line"><span class="xml">    schedules: Schedule[] = [];<span class="comment">&lt;!-- json 호출 결과를 담을 변수 추가 --&gt;</span></span></span><br><span class="line"><span class="xml">    loading: boolean;</span></span><br><span class="line"><span class="xml">    constructor(</span></span><br><span class="line"><span class="xml">        private scheduleService: ScheduleService, <span class="comment">&lt;!-- 서비스 생성자에 추가 --&gt;</span></span></span><br><span class="line"><span class="xml">        public navCtrl: NavController,</span></span><br><span class="line"><span class="xml">        public navParams: NavParams</span></span><br><span class="line"><span class="xml">    ) &#123;&#125;</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    ngOnInit() &#123;</span></span><br><span class="line"><span class="xml">        this.loading = true;</span></span><br><span class="line"><span class="xml">        const subscription = this.scheduleService.getSchedules().subscribe(schedules =&gt; &#123;</span></span><br><span class="line"><span class="xml">          this.schedules = schedules;</span></span><br><span class="line"><span class="xml">          this.loading = false;</span></span><br><span class="line"><span class="xml">          subscription.unsubscribe();</span></span><br><span class="line"><span class="xml">        &#125;, () =&gt; this.loading = false);</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    doRefresh(refresher: Refresher) &#123;</span></span><br><span class="line"><span class="xml">        const subscription = this.scheduleService.getSchedules().subscribe(schedules =&gt; &#123;</span></span><br><span class="line"><span class="xml">          this.schedules = schedules;</span></span><br><span class="line"><span class="xml">          refresher.complete()</span></span><br><span class="line"><span class="xml">          subscription.unsubscribe();</span></span><br><span class="line"><span class="xml">        &#125;, () =&gt; refresher.complete());</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>[페이지명].html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">menuToggle</span> <span class="attr">ion-button</span> <span class="attr">icon-only</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>IYLM 메인 페이지<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-item-group</span> [<span class="attr">hidden</span>]=<span class="string">"loading"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ion-list-header</span> <span class="attr">default</span>&gt;</span></span><br><span class="line">                스케줄 리스트</span><br><span class="line">            <span class="tag">&lt;/<span class="name">ion-list-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">ion-item</span> *<span class="attr">ngFor</span>=<span class="string">"let schedule of schedules"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">item-left</span> <span class="attr">text-left</span>&gt;</span>&#123;&#123;schedule.schNo&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;schedule.userNo&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;schedule.startDt | date:'y-M-d HH:mm'&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;schedule.endDt | date:'y-M-d HH:mm'&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;schedule.timeDivision&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;schedule.pushTime&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">item-right</span> <span class="attr">ion-button</span> <span class="attr">icon-only</span> <span class="attr">default</span>&gt;</span></span><br><span class="line">                    detail</span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ion-item-group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://github.com/angularjs-de/ionic2-pizza-service" target="_blank" rel="noopener">bengtler’s Git SampleSource</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03.1. NavController를 통한 페이지 이동시 발생 이벤트</title>
      <link href="/2017/07/24/Ionic/3.1.%20nav_controller_life_cycle_event/"/>
      <url>/2017/07/24/Ionic/3.1.%20nav_controller_life_cycle_event/</url>
      
        <content type="html"><![CDATA[<h3 id="NavController의-lifecycle-이벤트"><a href="#NavController의-lifecycle-이벤트" class="headerlink" title="NavController의 lifecycle 이벤트"></a>NavController의 lifecycle 이벤트</h3><p>NavController를 사용하여 페이지를 이동할때, 발생하는 이벤트들에 대해 정리해본다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; NavController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line">...</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> navCtrl: NavController</span>) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">  openPage(page) &#123;</span><br><span class="line">    <span class="keyword">this</span>.navCtrl.push(page);</span><br><span class="line">  &#125;</span><br><span class="line">   ionViewDidLoad() &#123;</span><br><span class="line">     alert(<span class="string">'최초 로딩됌'</span>);</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="이벤트"><a href="#이벤트" class="headerlink" title="이벤트"></a>이벤트</h3><table><thead><tr><th>이벤트 메서드 명</th><th>Returns</th><th>설명</th></tr></thead><tbody><tr><td><code>ionViewDidLoad</code></td><td>void</td><td>처음 페이지가 로딩되었을때, 캐시된 페이지에서는 동작을 하지 않음.</td></tr><tr><td><code>ionViewWillEnter</code></td><td>void</td><td>페이지에 들어가서, 페이지가 활성활 되었을때</td></tr><tr><td><code>ionViewDidEnter</code></td><td>void</td><td>페이지에 완전히 접근하여 활성화가 되었을때, 캐시 여부와 관계없이 실행 됌.</td></tr><tr><td><code>ionViewWillLeave</code></td><td>void</td><td>페이지를 막 떠나기 시작할때</td></tr><tr><td><code>ionViewDidLeave</code></td><td>void</td><td>페이지 떠나기를 완료하였을 때</td></tr><tr><td><code>ionViewWillUnload</code></td><td>void</td><td>페이지가 제거 돼고, 페이지의 엘리먼트가 제거 됐을때</td></tr></tbody></table><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://ionicframework.com/docs/api/navigation/NavController/" target="_blank" rel="noopener">http://ionicframework.com/docs/api/navigation/NavController/</a></p><p><a href="https://www.youtube.com/watch?v=wQTkO0UFfDY&amp;index=12&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq" target="_blank" rel="noopener">https://www.youtube.com/watch?v=wQTkO0UFfDY&amp;index=12&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03. 새 페이지 만들기</title>
      <link href="/2017/07/24/Ionic/3.%20%EC%83%88-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/"/>
      <url>/2017/07/24/Ionic/3.%20%EC%83%88-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="페이지-만들기"><a href="#페이지-만들기" class="headerlink" title="페이지 만들기"></a>페이지 만들기</h1><p>Ionic 2, Anuglar 2 기준에서 새 페이지를 만드는 법</p><p>기본 blank 템플릿을 기준으로 추가된 내용을 작성하였다.</p><h2 id="페이지-만들기-1"><a href="#페이지-만들기-1" class="headerlink" title="페이지 만들기"></a>페이지 만들기</h2><p>cmd 창에 아이오닉 폴더 안으로 이동후 아래 커맨드를 입력한다.</p><blockquote><p>$ ionic g page [만들페이지 이름]</p></blockquote><p>그럼 pages 폴더 안에</p><p><strong>페이지명.html, 페이지명.scss, 페이지명, schedule.ts</strong></p><p>세가지 파일이 추가된다.</p><h2 id="모듈-추가"><a href="#모듈-추가" class="headerlink" title="모듈 추가"></a>모듈 추가</h2><ul><li>app.module.ts</li></ul><p>다음과 같이 새로 만든 페이지 내용을 추가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule, ErrorHandler &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IonicApp, IonicModule, IonicErrorHandler &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; MyApp &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HomePage &#125; <span class="keyword">from</span> <span class="string">'../pages/home/home'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SchedulePage &#125; <span class="keyword">from</span> <span class="string">'../pages/schedule/schedule'</span>; <span class="xml"><span class="comment">&lt;!-- 추가된 소스 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">import &#123; StatusBar &#125; from '@ionic-native/status-bar';</span></span><br><span class="line"><span class="xml">import &#123; SplashScreen &#125; from '@ionic-native/splash-screen';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">@NgModule(&#123;</span></span><br><span class="line"><span class="xml">  declarations: [</span></span><br><span class="line"><span class="xml">    MyApp,</span></span><br><span class="line"><span class="xml">    HomePage,</span></span><br><span class="line"><span class="xml">    SchedulePage <span class="comment">&lt;!-- 추가된 소스 --&gt;</span></span></span><br><span class="line"><span class="xml">  ],</span></span><br><span class="line"><span class="xml">  imports: [</span></span><br><span class="line"><span class="xml">    IonicModule.forRoot(MyApp)</span></span><br><span class="line"><span class="xml">  ],</span></span><br><span class="line"><span class="xml">  bootstrap: [IonicApp],</span></span><br><span class="line"><span class="xml">  entryComponents: [</span></span><br><span class="line"><span class="xml">    MyApp,</span></span><br><span class="line"><span class="xml">    HomePage,</span></span><br><span class="line"><span class="xml">    SchedulePage <span class="comment">&lt;!-- 추가된 소스 --&gt;</span></span></span><br><span class="line"><span class="xml">  ],</span></span><br><span class="line"><span class="xml">  providers: [</span></span><br><span class="line"><span class="xml">    StatusBar,</span></span><br><span class="line"><span class="xml">    SplashScreen,</span></span><br><span class="line"><span class="xml">    &#123;provide: ErrorHandler, useClass: IonicErrorHandler&#125;</span></span><br><span class="line"><span class="xml">  ]</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">export class AppModule &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="컴포넌트-추가"><a href="#컴포넌트-추가" class="headerlink" title="컴포넌트 추가"></a>컴포넌트 추가</h2><ul><li>app.component.ts </li></ul><p>다음과 같은 내용을 추가한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>; <span class="xml"><span class="comment">&lt;!-- 추가된 소스 --&gt;</span></span></span><br><span class="line"><span class="xml">import &#123; Nav, Platform &#125; from 'ionic-angular';</span></span><br><span class="line"><span class="xml">import &#123; StatusBar &#125; from '@ionic-native/status-bar';</span></span><br><span class="line"><span class="xml">import &#123; SplashScreen &#125; from '@ionic-native/splash-screen';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">import &#123; HomePage &#125; from '../pages/home/home';</span></span><br><span class="line"><span class="xml">import &#123; SchedulePage &#125; from '../pages/schedule/schedule';</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">@Component(&#123;</span></span><br><span class="line"><span class="xml">  templateUrl: 'app.html'</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml">export class MyApp &#123;</span></span><br><span class="line"><span class="xml">  rootPage:any = HomePage;</span></span><br><span class="line"><span class="xml">  private pages = &#123;&#125;; <span class="comment">&lt;!-- 추가된 소스 --&gt;</span></span></span><br><span class="line"><span class="xml">  @ViewChild(Nav) nav: Nav; <span class="comment">&lt;!-- 추가된 소스 --&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">  constructor(platform: Platform, statusBar: StatusBar, splashScreen: SplashScreen) &#123;</span></span><br><span class="line"><span class="xml">    platform.ready().then(() =&gt; &#123;</span></span><br><span class="line"><span class="xml">      statusBar.styleDefault();</span></span><br><span class="line"><span class="xml">      splashScreen.hide();</span></span><br><span class="line"><span class="xml">    &#125;);</span></span><br><span class="line"><span class="xml">    this.pages = &#123; <span class="comment">&lt;!-- 추가된 소스 --&gt;</span></span></span><br><span class="line"><span class="xml">        'HomePage': HomePage,</span></span><br><span class="line"><span class="xml">        'SchedulePage': SchedulePage</span></span><br><span class="line"><span class="xml">    &#125;;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">  // 새 페이지 이동 함수를 추가한다.</span></span><br><span class="line"><span class="xml">  openPage(pageName) &#123;</span></span><br><span class="line"><span class="xml">    const component = this.pages[pageName];</span></span><br><span class="line"><span class="xml">    if (!component) &#123;</span></span><br><span class="line"><span class="xml">      return;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    this.nav.setRoot(component);</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p> 방법2 NavControll 이용</p></blockquote><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> &#123; NavController &#125; <span class="keyword">from</span> <span class="string">'ionic-angular'</span>;</span><br><span class="line">...</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> navCtrl: NavController</span>) &#123;</span><br><span class="line">   &#125;</span><br><span class="line">  openPage(page) &#123;</span><br><span class="line">    <span class="keyword">this</span>.navCtrl.push(page);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>NavController.push(PageName) : 페이지 이동</p><p>NavController.pop() : 이전 페이지로 돌아감</p><h2 id="메뉴-버튼-만들기"><a href="#메뉴-버튼-만들기" class="headerlink" title="메뉴 버튼 만들기"></a>메뉴 버튼 만들기</h2><ul><li>app.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-menu</span> [<span class="attr">content</span>]=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>Menu<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ion-toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-content</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-item</span> (<span class="attr">click</span>)=<span class="string">"openPage('HomePage')"</span>&gt;</span></span><br><span class="line">                메인</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">ion-item</span> (<span class="attr">click</span>)=<span class="string">"openPage('새페이지이름')"</span>&gt;</span></span><br><span class="line">                새페이지이름</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ion-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-menu</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-nav</span> #<span class="attr">content</span> [<span class="attr">root</span>]=<span class="string">"rootPage"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-nav</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>home.html / 새페이지.html</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">menuToggle</span> <span class="attr">ion-button</span> <span class="attr">icon-only</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ion-icon</span> <span class="attr">name</span>=<span class="string">"menu"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-icon</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ion-title</span>&gt;</span>제목<span class="tag">&lt;/<span class="name">ion-title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ion-navbar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span>&gt;</span></span><br><span class="line">내용</span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://ionicframework.com/docs/components/#loading" target="_blank" rel="noopener">Ionic Doc</a></p><p><a href="[https://github.com/angularjs-de/ionic2-pizza-service853](https://github.com/angularjs-de/ionic2-pizza-service)">bengtler’s Git SampleSource</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02.1. 빌드 및 테스트</title>
      <link href="/2017/07/24/Ionic/2.1.%20build-and-test/"/>
      <url>/2017/07/24/Ionic/2.1.%20build-and-test/</url>
      
        <content type="html"><![CDATA[<h2 id="웹에서-테스트"><a href="#웹에서-테스트" class="headerlink" title="웹에서 테스트"></a>웹에서 테스트</h2><blockquote><p>$ ionic serve</p><p>또는,</p><p>$ ionic serve -lab</p></blockquote><p>으로 테스트 해볼 수 있다.</p><h2 id="빌드"><a href="#빌드" class="headerlink" title="빌드"></a>빌드</h2><p>안드로이드 빌드시 : 안드로이드 SDK 필요</p><p><a href="https://developer.android.com/studio/index.html?hl=ko" target="_blank" rel="noopener">안드로이드 스튜디오</a></p><p>IOS 빌드시 : Apple Developer 계정 등록 필요.(년 $99 필요)</p><p><a href="https://developer.apple.com/" target="_blank" rel="noopener">Apple Developer</a> </p><p>플랫폼 추가가 필요</p><blockquote><p>$ cordova platform add [android/ios]</p></blockquote><p>빌드</p><blockquote><p>$ ionic build [android/ios]</p></blockquote><p>혹시 빌드 중에 아래 오류가 나오는 경우</p><p><em>could not find gradle wrapper within android sdk</em></p><p><a href="https://dl.google.com/android/repository/tools_r25.2.3-windows.zip" target="_blank" rel="noopener">SDK tools package</a> </p><p>C:\Users\CURRENT_USER\AppData\Local\Android\sdk</p><p>에 압축을 풀어주고, 다시 시도해보자.</p><p>빌드 하면 apk 파일이 생성된다.</p><h2 id="에뮬레이터"><a href="#에뮬레이터" class="headerlink" title="에뮬레이터"></a>에뮬레이터</h2><p>빌드후 안드로이드 스튜디오에 들어가</p><p>AVD를 생성 후, 실행시킨다.   <a href="http://nowordeath.tistory.com/108" target="_blank" rel="noopener">생성법</a></p><p>다음</p><blockquote><p>$ ionic emulate [android/ios]</p></blockquote><p>키고 위 명령어를 입력하면, 자동으로 apk가 설치되고 실행된다.</p><h2 id="실제-디바이스-실행"><a href="#실제-디바이스-실행" class="headerlink" title="실제 디바이스 실행"></a>실제 디바이스 실행</h2><p>실제 디바이스에서는 빌드후</p><blockquote><p>$ ionic run [android/ios]</p></blockquote><p>를 입력하면된다. USB에 꼽은 상태로 하면 되는 것 같은데.</p><p>기기가 없어서 실제 실행은 못시켜보았다.</p><h2 id="아이콘-변경"><a href="#아이콘-변경" class="headerlink" title="아이콘 변경"></a>아이콘 변경</h2><ol><li>이미지를 복사 <project folder>/resources</project></li><li><blockquote><p>$ ionic resources</p></blockquote></li><li>생성된 파일들을 <project folder>/resources/res 에서 <project folder>/platforms/android/res 로 이동시킨다.</project></project></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://nowordeath.tistory.com/108" target="_blank" rel="noopener">어제보다 오늘 더 블로그</a></p><p><a href="https://forum.ionicframework.com/t/ionic-run-android-does-not-install-app-in-device/21795/6" target="_blank" rel="noopener">Ionic Forum</a></p><p><a href="http://ionicframework.com/docs/v1/cli/run.html" target="_blank" rel="noopener">Ionic Doc</a></p>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ionic Component 한줄에 복수개 출력</title>
      <link href="/2017/07/24/Ionic/css_ionic_component/"/>
      <url>/2017/07/24/Ionic/css_ionic_component/</url>
      
        <content type="html"><![CDATA[<p>아이오닉 컴포넌트 체크 박스 4개를 한줄에 출력해보자.</p><ul><li><strong>html</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ion-content</span> <span class="attr">padding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span> <span class="attr">class</span>=<span class="string">"timeDivision"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>아침<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-checkbox</span> [(<span class="attr">ngModel</span>)]=<span class="string">"morning"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span> <span class="attr">class</span>=<span class="string">"timeDivision"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>점심<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-checkbox</span> [(<span class="attr">ngModel</span>)]=<span class="string">"noon"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span> <span class="attr">class</span>=<span class="string">"timeDivision"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>저녁<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-checkbox</span> [(<span class="attr">ngModel</span>)]=<span class="string">"evening"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ion-item</span> <span class="attr">class</span>=<span class="string">"timeDivision"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-label</span>&gt;</span>심야<span class="tag">&lt;/<span class="name">ion-label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ion-checkbox</span> [(<span class="attr">ngModel</span>)]=<span class="string">"night"</span>&gt;</span><span class="tag">&lt;/<span class="name">ion-checkbox</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ion-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ion-content</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>scss</li></ul><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.timeDivision</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">23%</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Ionic </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git Pull Request 방법 정리</title>
      <link href="/2017/07/24/GIT/pull_request/"/>
      <url>/2017/07/24/GIT/pull_request/</url>
      
        <content type="html"><![CDATA[<ol><li>저장소에서 fork 버튼을 눌러, 개인 repository에 포크 한다.</li><li>로컬 저장소와 원격 저장소 추가</li></ol><ul><li>로컬 저장소를 클론</li></ul><blockquote><p>$ git clone fork깃주소 폴더명</p></blockquote><ul><li>로컬 저장소에 원격저장소[원본 프로젝트] 추가</li></ul><blockquote><p>$ git remote add upstream 원본깃주소</p></blockquote><p><em>원본 저장소의 별칭은 보통 upstream을 사용, 다른 별칭 사용해도 무관</em></p><ol start="3"><li>작업은 매번 Branch를 만들어서 Branch 단위로 한다.</li></ol><ul><li>브랜치 생성</li></ul><blockquote><p>$ git branch [브랜치명]</p></blockquote><ul><li>브랜치 이동</li></ul><blockquote><p>$ git checkout [브랜치명]</p></blockquote><ol start="4"><li>작업 내역 커밋</li></ol><ul><li>인덱스 확인, 등록, 커밋</li></ul><blockquote><p>$ git status</p><p>$ git add .</p><p>$ git commit -m ‘[메세지]’</p></blockquote><ol start="5"><li>원본 저장소 내역 업데이트</li></ol><ul><li>원본 저장소의 소스를 로컬 저장소로 가져옴.</li></ul><blockquote><p>$ git fetch upstream</p></blockquote><ul><li>커밋 내역을 합침</li></ul><blockquote><p>$ git rebase upstream/master</p></blockquote><ol start="6"><li>Pull Request 보내기</li></ol><ul><li>push 하기</li></ul><blockquote><p>$ git push origin [브랜치명]</p></blockquote><ul><li>fork 한 저장소에서 pull request 작성</li></ul><p>github 포크한 저장소로 이동후, <code>Crete Pull Request</code>를 눌러 변경 사항 확인 및 pull request 메세지를 작성한다.</p><ol start="7"><li>원본 저장소에서 변경사항 Merge 하기</li></ol><ul><li>원본 저장소의 pull request 메뉴에서 <code>Merge</code> 버튼을 눌러 변경사항 Merge</li></ul><p>Or</p><ul><li>직접 명령어 입력</li></ul><blockquote><p>$ git checkout master</p><p>$ git remote add [기여자별칭] 기여자깃주소</p><p>$ git fetch [기여자별칭]</p><p>$ git rebase [기여자별칭/브랜치명]</p><p>$ git push origin master</p></blockquote><p><em>그외 명령어</em></p><ul><li>리모트 저장소 목록 확인</li></ul><blockquote><p>$ git remote -v</p></blockquote><ul><li>리모트 저장소 삭제</li></ul><blockquote><p> $ git remote rm [별칭 이름]</p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://dogfeet.github.io/articles/2012/how-to-github.html" target="_blank" rel="noopener">http://dogfeet.github.io/articles/2012/how-to-github.html</a></p><p><a href="https://www.slideshare.net/mobile/jungseobshin/github-pull-request" target="_blank" rel="noopener">https://www.slideshare.net/mobile/jungseobshin/github-pull-request</a></p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Merge VS Rebase</title>
      <link href="/2017/07/24/GIT/merge_vs_rebase/"/>
      <url>/2017/07/24/GIT/merge_vs_rebase/</url>
      
        <content type="html"><![CDATA[<p>merge를 하면 branch를 생성한 시점의 베이스를 기준으로 합병이 된다</p><p>rebase는 <code>git rebase 브랜치</code> 에서 지정한 브랜치를 베이스로 기준 삼아 합병이 된다</p><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p><code>master</code> 와 <code>slave</code>가 있고 <code>master</code> 에서 <code>git merge slave</code> 를 하면</p><ol><li><code>master</code>의 커밋 내역 이후 <code>slave</code>의 커밋내역이 단순 합쳐짐.</li><li>커밋을 묶음으로 관리 : 마지막 <code>merge</code> 커밋을 <code>reset</code> 하면 통째로 모든 <code>merge</code>커밋들이 사라짐.</li></ol><h2 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h2><ul><li><p><code>master</code> 에서 <code>git rebase slave</code>를 하면</p><p>슬레이브 뒤에 마스터의 커밋 이력이 쌓임.</p></li></ul><ul><li><p><code>slave</code> 에서 <code>git rebase master</code>를 하면</p><p>마스터 커밋 뒤로 슬레이브 이력이 쌓임.</p></li></ul><ol><li>트리 그래프도 브랜치 없이 일렬로 나타남.</li><li>중복된 수정 내용은 로그가 남지 않음.</li><li>reset시 통째로 merge 커밋들이 사라지지 않음.</li></ol><h2 id="rebase-과정"><a href="#rebase-과정" class="headerlink" title="rebase 과정"></a>rebase 과정</h2><ol><li>커밋로그 보기</li></ol><p><code>git log --decorate --all --oneline --graph</code></p><ol start="2"><li>데브의 마지막 커밋을 베이스로 머지함</li></ol><p><code>git rebase dev</code></p><ol start="3"><li>conflict 수정 후</li></ol><p><code>git add 파일 전체경로</code></p><ol start="4"><li>상태 확인</li></ol><p><code>git status</code></p><ol start="5"><li>리베이스 계속</li></ol><p><code>git rebase --continue</code></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://dogfeet.github.io/articles/2012/git-merge-rebase.html" target="_blank" rel="noopener">http://dogfeet.github.io/articles/2012/git-merge-rebase.html</a></p><p><a href="https://blog.outsider.ne.kr/666" target="_blank" rel="noopener">https://blog.outsider.ne.kr/666</a></p>]]></content>
      
      
      <categories>
          
          <category> GIT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS3 새로운 스타일 정리</title>
      <link href="/2017/07/16/CSS/CSS3-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%A0%95%EB%A6%AC/"/>
      <url>/2017/07/16/CSS/CSS3-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%8A%A4%ED%83%80%EC%9D%BC-%EC%A0%95%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<div class="myResize">Junho's Hexo Blog</div><style>.myResize { width: 200px; height: 50px; border: solid black 2px; overflow: auto; resize: both; box-shadow: #ff8080 3px 3px 2px; text-shadow: #ff8080 3px 3px 2px;}</style><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myResize"</span>&gt;</span>Junho's Hexo Blog<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.myResize</span> &#123;</span></span><br><span class="line">  width: 300px;</span><br><span class="line">  height: 100px;</span><br><span class="line">  border: solid black 2px;</span><br><span class="line">  overflow: auto;</span><br><span class="line">  resize: both;</span><br><span class="line"><span class="css">  <span class="selector-tag">box-shadow</span>: <span class="selector-id">#ff8080</span> 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> 2<span class="selector-tag">px</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">text-shadow</span>: <span class="selector-id">#ff8080</span> 3<span class="selector-tag">px</span> 3<span class="selector-tag">px</span> 2<span class="selector-tag">p</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-resize-크기를-변경할-수-있는-박스-만들기"><a href="#1-resize-크기를-변경할-수-있는-박스-만들기" class="headerlink" title="1. resize : 크기를 변경할 수 있는 박스 만들기"></a>1. resize : 크기를 변경할 수 있는 박스 만들기</h4><p><code>resize: both;</code></p><ul><li>none : 크기 변경 불가</li><li>horizontal, vertical, both : 수평, 높이, 수평과 폭 높이 둘다 변경 가능, </li></ul><h4 id="2-box-shadow-박스에-그림자-효과-주기"><a href="#2-box-shadow-박스에-그림자-효과-주기" class="headerlink" title="2. box-shadow : 박스에 그림자 효과 주기"></a>2. box-shadow : 박스에 그림자 효과 주기</h4><p><code>box-shadow: #ff8080 3px 3px 2px;</code></p><ul><li>가로위치, 세로 위치, 불투명, 확대 반지름</li><li>그림자의 색</li><li>inset 지정시 그림자를 박스 안쪽에 표시</li></ul><h4 id="3-text-shadow-문자열에-그림자-효과-주기"><a href="#3-text-shadow-문자열에-그림자-효과-주기" class="headerlink" title="3. text-shadow : 문자열에 그림자 효과 주기"></a>3. text-shadow : 문자열에 그림자 효과 주기</h4><p><code>text-shadow: #ff8080 3px 3px 2p;</code></p><ul><li>위치와 크기 : 가로, 세로, 불투명, 확대 반지름</li><li>색 : 그림자색</li></ul><hr><h4 id="word-wrap-문자-줄바꿈-처리"><a href="#word-wrap-문자-줄바꿈-처리" class="headerlink" title="word-wrap : 문자 줄바꿈 처리"></a>word-wrap : 문자 줄바꿈 처리</h4><ul><li>normal : 줄을 바꿀 수 없는 경우, 줄 바꿈하지 않고 표시, 공백과 같이 줄 바꿀 수 있는 경 줄 바꿈</li><li>break-word : 단어 중간에서 줄바꿈.</li></ul><h4 id="writing-mode-vertical-rl-세로-쓰기-표시"><a href="#writing-mode-vertical-rl-세로-쓰기-표시" class="headerlink" title="writing-mode: vertical-rl: 세로 쓰기 표시"></a>writing-mode: vertical-rl: 세로 쓰기 표시</h4><ul><li>horizontal-tb</li><li>vertical-lr : 세로 왼쪽 쓰기</li><li>vertical-rl : 세로 오른쪽 쓰기</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08.2. Angular Reactive 폼</title>
      <link href="/2017/07/15/Angular/8.2.%20Angular-Reactive-%ED%8F%BC/"/>
      <url>/2017/07/15/Angular/8.2.%20Angular-Reactive-%ED%8F%BC/</url>
      
        <content type="html"><![CDATA[<ol><li>ReactiveFormModule Import 하기</li></ol><ul><li>app.module.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;            <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125;       <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ReactiveFormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;  <span class="comment">// &lt;-- #1 import module</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125;        <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PrescriptionModal &#125;   <span class="keyword">from</span> <span class="string">'[path]'</span>; <span class="comment">// &lt;-- #1 import component</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    ReactiveFormsModule <span class="comment">// &lt;-- #2 add to @NgModule imports</span></span><br><span class="line">  ],</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    PrescriptionModal, <span class="comment">// &lt;-- #3 declare app component</span></span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [ AppComponent ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormControl, FormGroup &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h2&gt;Hero Detail&lt;/h2&gt;</span></span><br><span class="line"><span class="string">  &lt;h3&gt;&lt;i&gt;Just a FormControl&lt;/i&gt;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;label&gt;Name:</span></span><br><span class="line"><span class="string">    &lt;input [formControl]="name"&gt;</span></span><br><span class="line"><span class="string">  &lt;/label&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;h3&gt;&lt;i&gt;FormControl in a FormGroup&lt;/i&gt;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">  &lt;form [formGroup]="heroForm" novalidate&gt;</span></span><br><span class="line"><span class="string">    &lt;div&gt;</span></span><br><span class="line"><span class="string">      &lt;label&gt;Name:</span></span><br><span class="line"><span class="string">        &lt;input formControlName="name"&gt;</span></span><br><span class="line"><span class="string">      &lt;/label&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/form&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;p&gt;Form value: &#123;&#123; heroForm.value | json &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;Form status: &#123;&#123; heroForm.status | json &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PrescriptionModal &#123;</span><br><span class="line">  name = <span class="keyword">new</span> FormControl();</span><br><span class="line"></span><br><span class="line">  heroForm = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">    name: <span class="keyword">new</span> FormControl()</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>FormControl : 값이나 validity를 추적한다.</p><p>FormGroup : 값이나 validity 추적을위한 AbstractControl 인스턴스 그룹.</p><p>AbstractControl : FormControl, FormGroup, FormArray의 추상 클래스로, 프로퍼티나 common behaviors들을 제공한다.</p></blockquote><ul><li>FormControl</li></ul><p><code>FormControl 초기화</code> : 초기값, validators, async validators 값이 인자로 들어간다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">form = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">  lowerCase: <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required),</span><br><span class="line">  upperCase: <span class="keyword">new</span> FormControl(<span class="string">''</span>,</span><br><span class="line">               Validators.compose([</span><br><span class="line">                 Validators.required,</span><br><span class="line">                 Validators.pattern(<span class="string">"[A-Z]&#123;3&#125;"</span>)]))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>템플릿에 <code>[formControl]=&quot;폼컨트롤이름&quot;</code>으로 적용한다.</p><ul><li>FormGroup</li></ul><p><code>FormGroup 초기화</code>  : 폼 그룹 안에 폼컨트롤러를 선언해준다.</p><p>, form에 <code>[formGroup]=&quot;폼그룹이름&quot;</code>으로 적용, input이나 select 태그에 <code>formControlName=&quot;폼컨트롤이름&quot;</code> 과 같이 적용한다.</p><ul><li>novalidators</li></ul><p><code>&lt;form&gt;</code> 태그 안에 novalidators는 브라우저가 원시 HTML 검증을 하지 않도록 해준다.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML5 태그 정리</title>
      <link href="/2017/07/14/Frontend/HTML5-%ED%83%9C%EA%B7%B8-%EC%A0%95%EB%A6%AC/"/>
      <url>/2017/07/14/Frontend/HTML5-%ED%83%9C%EA%B7%B8-%EC%A0%95%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<h4 id="문서형-정의"><a href="#문서형-정의" class="headerlink" title="문서형 정의"></a>문서형 정의</h4><table><thead><tr><th>HTML 5</th><th>HTML4.01</th></tr></thead><tbody><tr><td><code>&lt;!DOCTYPE html&gt;</code></td><td><!DOCTYPE HTML PUBLIC "-//W3C//DTD//HTML4.01//EN"></td></tr><tr><td><code>&lt;style&gt;&lt;/style&gt;</code></td><td><code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;</code></td></tr><tr><td><code>&lt;script&gt;&lt;/script&gt;</code></td><td><code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></td></tr><tr><td><code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></td><td><code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html&quot;; EUC-KR&quot;&gt;</code></td></tr></tbody></table><h4 id="문서-구성"><a href="#문서-구성" class="headerlink" title="문서 구성"></a>문서 구성</h4><p>텍스트를 의미적으로 구분, 시작적 변화 없음. HTML 문서 안에서 텍스트가 어떤 위치에 있는지 나타내기 위한 태그.</p><p><img src="http://www.cellbiol.com/bioinformatics_web_development/wp-content/uploads/2017/01/html5_tags.png" alt="section article에 대한 이미지 검색결과"></p><table><thead><tr><th>태그</th><th>기능</th></tr></thead><tbody><tr><td><code>&lt;section&gt;</code></td><td>소단락, 제목을 붙여도 좋을 만한 문장의 모음</td></tr><tr><td><code>&lt;article&gt;</code></td><td>컨텐츠, 뉴스기사/블로그/게시판 컨텐츠</td></tr><tr><td><code>&lt;header&gt;</code></td><td>헤더가 되는 컨텐츠, 섹션이나 아티클의 제목을 표현</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>푸터, 저작관 관련 정보, 페이지 링크</td></tr><tr><td><code>&lt;nav&gt;</code></td><td>웹페이지 내비게이션 콘텐츠, 페이지 목차, 항목 리스트</td></tr><tr><td><code>&lt;aside&gt;</code></td><td>보충 컨텐츠, 메인 컨텐츠와는 관계가 약한 컨텐츠</td></tr><tr><td><code>&lt;time&gt;</code></td><td>텍스트가 날짜나 그와 관련된 것이라는 것을 나타냄</td></tr><tr><td><code>&lt;figure&gt;</code></td><td>도표를 나타내는데 사용</td></tr><tr><td><code>&lt;figcaption&gt;</code></td><td>도표의 제목, figure 요소 안에서 사용</td></tr></tbody></table><h4 id="기능-태그"><a href="#기능-태그" class="headerlink" title="기능 태그"></a>기능 태그</h4><table><thead><tr><th>태그</th><th>기능</th></tr></thead><tbody><tr><td><code>&lt;mark&gt;</code></td><td>하이라이트 표시</td></tr><tr><td><meter></meter><code>&lt;meter&gt;</code></td><td>지정 값을 막대그래프로 나타냄, min/max, low/high/optimum 속성 사용</td></tr><tr><td><progress></progress><code>&lt;progress&gt;</code></td><td>프로그레스 바, max 속성으로 최대값 지정</td></tr><tr><td><code>&lt;output&gt;</code></td><td>폼안에서 계산 결과를 나타냄</td></tr><tr><td><code>&lt;details&gt;</code></td><td>접혀있지만, 조작에 따라 상세 정보를 나타냄. open 속성을 지정하면 열린 상태로 작성</td></tr><tr><td><code>&lt;summary&gt;</code></td><td>details 요소에서 지정한 내용의 모음을 나타냄. 접혀있을 때는 이 부분만 표시</td></tr></tbody></table><ul><li>output, details 예제</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">oninput</span>=<span class="string">"r.value = v1.valueAsNumber + v2.valueAsNumber"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"v1"</span> <span class="attr">value</span>=<span class="string">0</span>&gt;</span></span><br><span class="line">  +<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"v1"</span> <span class="attr">value</span>=<span class="string">0</span>&gt;</span></span><br><span class="line">  = <span class="tag">&lt;<span class="name">output</span> <span class="attr">name</span>=<span class="string">"r"</span>&gt;</span><span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span></span><br><span class="line">  옵션</span><br><span class="line">  <span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  확인 메일을 보낸다.</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="input-type-속성"><a href="#input-type-속성" class="headerlink" title="input type 속성"></a>input type 속성</h4><table><thead><tr><th>태그</th><th>기능</th></tr></thead><tbody><tr><td>search</td><td>검색 키워드</td></tr><tr><td>tel</td><td>전화번호 입력</td></tr><tr><td>url</td><td>URL 입력</td></tr><tr><td>email</td><td>메일 주소 입력</td></tr><tr><td>month</td><td>연월 입력</td></tr><tr><td>week</td><td>주 입력</td></tr><tr><td>date</td><td>날짜 입력</td></tr><tr><td>time</td><td>시각 입력</td></tr><tr><td>datetime</td><td>UTD(협정 세계시) 입력</td></tr><tr><td>number</td><td>수치 입력</td></tr><tr><td>range</td><td>지정 범위의 수치 입력, min 속성 최소값, max 속성 최대값</td></tr><tr><td>color</td><td>색 입력</td></tr></tbody></table><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>HTML5가 보이는 그림책 - ANK Co., Ltd 저, 이영란 역</p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>npm install --save와 --save-dev 차이</title>
      <link href="/2017/07/14/Frontend/npm-savedev%EB%9E%80/"/>
      <url>/2017/07/14/Frontend/npm-savedev%EB%9E%80/</url>
      
        <content type="html"><![CDATA[<ol><li>npm install</li></ol><p>./node_modules 디렉터리에 패키지 설치를 하고 종료.</p><ol start="2"><li>npm install –save 또는 npm install –save-dev</li></ol><p><code>./node_modules</code> 디렉터리에 패키지 설치 + <code>./package.json</code> 디렉터리에 업데이트를 같이 해준다. 또한 -dev를 하면 <code>package.json</code> 파일 내에 <code>devDependencies</code> object에 추가를 해주고, 그렇지 않을때는 <code>dependencies</code> object에 추가해준다.</p><h4 id="dependencies와-devDependencies의-차이"><a href="#dependencies와-devDependencies의-차이" class="headerlink" title="dependencies와 devDependencies의 차이"></a>dependencies와 devDependencies의 차이</h4><p>dependencies는 항상 설치되고, devDependencies 는 –production 옵션을 붙이면 빠진다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://ohyecloudy.com/ddiary/2016/09/04/til-npm-install-save-or-save-dev/" target="_blank" rel="noopener">http://ohyecloudy.com/ddiary/2016/09/04/til-npm-install-save-or-save-dev/</a></p>]]></content>
      
      
      <categories>
          
          <category> Frontend </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08. Angular 폼</title>
      <link href="/2017/07/14/Angular/8.%20Angular%20%ED%8F%BC/"/>
      <url>/2017/07/14/Angular/8.%20Angular%20%ED%8F%BC/</url>
      
        <content type="html"><![CDATA[<p>Angular 폼을 만들기 위해서는 다음과 같은 스텝이 필요하다.</p><ol><li><p><code>모델</code> 생성</p></li><li><p><code>폼 컨트롤러</code> 컴포넌트를 생성</p></li><li><p><code>앱 모듈</code>에 작성한 폼컴포넌트추가.</p></li><li><p><code>템플릿</code> 생성,  <code>ngModel</code>로 양방향 데이터 바인딩을 함</p></li><li><p><code>폼 검증</code>을 수행</p></li><li><p><code>ngSubmit</code>을 통해 submit을 컨트롤</p></li></ol><h4 id="Step-1-모델-생성"><a href="#Step-1-모델-생성" class="headerlink" title="Step 1. 모델 생성"></a>Step 1. 모델 생성</h4><p>생성자의 인자로 public 을 사용하면, 자동으로 해당 모델에 변수 값을 선언함.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Prescription &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> psNo: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> userNo: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> mainDiseaseCd: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> subDiseaseCd: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> drugCd: <span class="built_in">string</span>,</span></span><br><span class="line"><span class="params">        <span class="keyword">public</span> timeDivision: <span class="built_in">string</span></span></span><br><span class="line"><span class="params">    </span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step2-폼-컨트롤러"><a href="#Step2-폼-컨트롤러" class="headerlink" title="Step2. 폼 컨트롤러"></a>Step2. 폼 컨트롤러</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Prescription &#125; <span class="keyword">from</span> <span class="string">'./prescription.model'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'page-prescription'</span>,</span><br><span class="line">  templateUrl: <span class="string">'prescription.html'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PrescriptionComponent &#123;</span><br><span class="line">  <span class="comment">// user = &#123; userId: '', userName: '' &#125;;</span></span><br><span class="line">  timeDivison = [<span class="string">'MOR'</span>, <span class="string">'EVE'</span>, <span class="string">'NOON'</span>, <span class="string">'NIGHT'</span>];</span><br><span class="line">  model = <span class="keyword">new</span> Prescription(<span class="number">1</span>, <span class="number">1</span>, <span class="string">"abc"</span>, <span class="string">"def"</span>, <span class="string">"aa"</span>, <span class="keyword">this</span>.timeDivison[<span class="number">0</span>]);</span><br><span class="line">  submitted = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  onSubmit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 테스트를 위함</span></span><br><span class="line">  <span class="keyword">get</span> diagnostic() &#123; <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(<span class="keyword">this</span>.model) &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step3-앱-모듈"><a href="#Step3-앱-모듈" class="headerlink" title="Step3. 앱 모듈"></a>Step3. 앱 모듈</h4><p>작성한 폼 컴포넌트를 추가한다. </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;      <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125;   <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125;  <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PrescriptionComponent &#125; <span class="keyword">from</span> <span class="string">'./prescription.component'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    PrescriptionComponent</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [ AppComponent ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>BrowserModule : 브라우저에서 실행하기 위한 모듈, 컴포넌트나 지시자, 파이프 같은 구성요소를 템플릿에 나타나게 하는 역할.</li></ul><ul><li>FormsModule : NgModel 지시자나 내장 검증기 지시자 등을 포함.</li></ul><ul><li>delarations : imports에 입력한 모듈 내에서 선언된 내용들을 재선언 해서는 안된다.</li></ul><h4 id="Step-4-템플릿-작성"><a href="#Step-4-템플릿-작성" class="headerlink" title="Step 4. 템플릿 작성"></a>Step 4. 템플릿 작성</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;diagnostic&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> #<span class="attr">prescriptionForm</span>=<span class="string">"ngForm"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mainDiseaseCd"</span>&gt;</span>Main Disease CD<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"mainDiseaseCd"</span> <span class="attr">required</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.mainDiseaseCd"</span> <span class="attr">name</span>=<span class="string">"mainDiseaseCd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"subDiseaseCd"</span>&gt;</span>Sub Disease Cd<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"subDiseaseCd"</span> <span class="attr">required</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.subDiseaseCd"</span> <span class="attr">name</span>=<span class="string">"subDiseaseCd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"timeDivision"</span>&gt;</span>Time Division<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"timeDivision"</span> <span class="attr">required</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.timeDivision"</span> <span class="attr">name</span>=<span class="string">"timeDivision"</span> #<span class="attr">timeDivision</span>=<span class="string">"ngModel"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> *<span class="attr">ngFor</span>=<span class="string">"let timeDivision of timeDivisions"</span> [<span class="attr">value</span>]=<span class="string">"timeDivision"</span>&gt;</span>&#123;&#123;timeDivision&#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>#prescriptionForm=&quot;ngForm&quot;</code> : 해당 폼을 ngForm이 관리하도록 함. ngModel과 name 속성을 사용하여, 속성을 모니터링 함.</li><li><code>required</code>: 내장 검증기로, 필수값을 의미. 그외에도 <code>minlength, maxlength, pattern</code> 가 있다.</li><li><code>[(ngModel)]=&quot;model.mainDiseaseCd&quot; name=&quot;mainDiseaseCd&quot;</code> : ngModel과 name은 함께 선언해 주어야함. name 프로퍼티는 폼과 함께 컨트롤러에 등록되기 위해 필요하다.</li><li><code>&lt;label for=&quot;timeDivision&quot;&gt;</code> : <code>input id</code>태그와 <code>label for</code> 속성이 연결된다.</li><li><code>#timeDivision=&quot;ngModel&quot;</code>: 검증 결과를 확인하기 위해 timeDivision 참조변수에 ngModel을 할당한다. timeDivision.valid로 검증 결과를 확인할 수 있다.</li></ul><h4 id="Step-5-폼-검증-수행"><a href="#Step-5-폼-검증-수행" class="headerlink" title="Step 5. 폼 검증 수행"></a>Step 5. 폼 검증 수행</h4><ul><li>템플릿 파일 폼 검증 결과 문구 추가</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mainDiseaseCd"</span>&gt;</span>Main Disease CD<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"mainDiseaseCd"</span> <span class="attr">required</span> [(<span class="attr">ngModel</span>)]=<span class="string">"model.mainDiseaseCd"</span> <span class="attr">name</span>=<span class="string">"mainDiseaseCd"</span> #<span class="attr">mainDiseaseCd</span>=<span class="string">"ngModel"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> [<span class="attr">hidden</span>]=<span class="string">"mainDiseaseCd.valid || mainDiseaseCd.pristine"</span>&gt;</span></span><br><span class="line">      mainDiseaseCd is required</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>#mainDiseaseCd=&quot;ngModel&quot;</code>: 검증 결과를 확인하기 위해 mainDiseaseCd참조변수에 ngModel을 할당한다. mainDiseaseCd.valid로 검증 결과를 확인할 수 있다.</p><ul><li>css</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.ng-valid</span><span class="selector-attr">[required]</span>, <span class="selector-class">.ng-valid</span><span class="selector-class">.required</span>  &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="number">#42A948</span>; <span class="comment">/* green */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.ng-invalid</span><span class="selector-pseudo">:not(form)</span>  &#123;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">5px</span> solid <span class="number">#a94442</span>; <span class="comment">/* red */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step-6-submit-컨트롤"><a href="#Step-6-submit-컨트롤" class="headerlink" title="Step 6. submit 컨트롤"></a>Step 6. submit 컨트롤</h4><p>다음과 같이 수정한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> (<span class="attr">ngSubmit</span>)=<span class="string">"onSubmit()"</span> #<span class="attr">prescriptionForm</span>=<span class="string">"ngForm"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://angular.io/guide/forms#create-an-initial-html-form-template" target="_blank" rel="noopener">https://angular.io/guide/forms#create-an-initial-html-form-template</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09. Angular 템플릿 문법</title>
      <link href="/2017/07/12/Angular/9.%20Angular-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95-%ED%8A%B9%EC%88%98%EB%AC%B8%EC%9E%90%EC%A0%95%EB%A6%AC/"/>
      <url>/2017/07/12/Angular/9.%20Angular-%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%AC%B8%EB%B2%95-%ED%8A%B9%EC%88%98%EB%AC%B8%EC%9E%90%EC%A0%95%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<h3 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h3><p>이중 중괄호 {{ }} 사이에 수식을 표현하고, 계산한 다음 그 결과를 화면에 표시</p><h3 id="Safe-Navigation-Operator"><a href="#Safe-Navigation-Operator" class="headerlink" title="Safe Navigation Operator"></a>Safe Navigation Operator</h3><p>존재하지 않는 <code>객체의 변수</code>를 Interpolation할 때, 앱전체가 중지됌. 예를들어 {{ Animal.Cat }}이 없는데, 템플릿에서 사용한다면 앱 전체가 중지된다. 이를 방지하기위해 {{ Animal?.Cat }} 을 사용한다면, Animal이 존재할때만 Cat에 접근하게 돼어 오류가 발생하지 않는다.</p><h4 id="기호의-의미-Property-Binding"><a href="#기호의-의미-Property-Binding" class="headerlink" title="[]기호의 의미 : Property Binding"></a>[]기호의 의미 : Property Binding</h4><p><strong>custom property</strong> 로 클래스와 연결시킬 수 있음.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div class="app"&gt;</span></span><br><span class="line"><span class="string">      &lt;counter [init]="initialCount"&gt;&lt;/counter&gt;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123;</span><br><span class="line">  initialCount: <span class="built_in">number</span> = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>클래스에서 속성을 변경할 경우, 템플릿에도 반영됌.</p><h4 id="기호의-의미-Template-Statement"><a href="#기호의-의미-Template-Statement" class="headerlink" title="()기호의 의미 : Template Statement"></a>()기호의 의미 : Template Statement</h4><p>이벤트를 바인딩하기 위해 사용.</p><ol><li>(click) 이벤트</li></ol><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  templateUrl: <span class="string">'&lt;button ion-button (click)="onClick()&gt;버튼&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsPage &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  onClick() &#123;</span><br><span class="line">    alert(<span class="string">'dd'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>(mouseover) 이벤트</li><li>@Output() outputProperty = new EventEmitter<boolean>();`</boolean></li></ol><p><code>&lt;child (outputProperty)=&quot;outputEvent($event)&quot;&gt;&lt;/child&gt;</code></p><p>@Output()장식자로 선언한 변수와 동일한 속성명.</p><p><code>&lt;child-cmp #child1 [childname]=&quot;&#39;자식1&#39;&quot;&gt;&lt;/child-cmp&gt;</code></p><h4 id="기호의-의미"><a href="#기호의-의미" class="headerlink" title="# 기호의 의미"></a># 기호의 의미</h4><p><strong>참조변수의 의미</strong>이다. 참조변수가 #child1이라고 선언돼 있을때 childname을 참조하려면 {{ child1.childname }} 과 같이 접근한다.</p><p>ts파일에서 <code>참조 변수에 접근</code>하기 위해서는 ViewChild를 이용한다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ViewChild, ElementRef&#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SchedulePage <span class="keyword">implements</span> OnInit &#123;</span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">'scheduleContents'</span>) scheduleContents: ElementRef;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// 다음과 같이 element에 접근.</span></span><br><span class="line">      <span class="keyword">this</span>.scheduleContents.nativeElement.innerHTML = <span class="string">'후후'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="ngFor-ngIf"><a href="#ngFor-ngIf" class="headerlink" title="*ngFor, *ngIf"></a>*ngFor, *ngIf</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  templateUrl: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;div *ngFor="let person of persons; let i = index"&gt;</span></span><br><span class="line"><span class="string">&#123;&#123; i + 1 &#125;&#125; 번째 사람</span></span><br><span class="line"><span class="string">&#123;&#123; person.name &#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123; person.old &#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;div *ngFor="let command of myAliens; let i = index"&gt;</span></span><br><span class="line"><span class="string">&#123;&#123; i + 1 &#125;&#125; 번째 에일리언 목표</span></span><br><span class="line"><span class="string">&#123;&#123; aliens[command]['name'] &#125;&#125;</span></span><br><span class="line"><span class="string">&#123;&#123; aliens[command]['old'] &#125;&#125;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Persons &#123;</span><br><span class="line">  persons = [</span><br><span class="line">    &#123; name: <span class="string">'남준호'</span>, old: <span class="number">28</span> &#125;,</span><br><span class="line">    &#123; name: <span class="string">'남정연'</span>, old: <span class="number">22</span> &#125;</span><br><span class="line">  ];</span><br><span class="line">  aliens = &#123;</span><br><span class="line">    kill : &#123; name: <span class="string">'뛸릴릴리'</span>, old: <span class="number">12942</span> &#125;,</span><br><span class="line">    him : &#123; name: <span class="string">'뀔릴뗋슭'</span>, old: <span class="number">12942</span> &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> myAliens() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Object</span>.keys(<span class="keyword">this</span>.aliens);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ngFor</code>은 <code>iterable</code>한 변수에서만 사용가능, 배열에서 사용가능</p><p>객체에서 사용하기 위해서는 get 함수 만들어 주기.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://toddmotto.com/passing-data-angular-2-components-input" target="_blank" rel="noopener">https://toddmotto.com/passing-data-angular-2-components-input</a></p><p><a href="https://www.youtube.com/watch?v=Llt_jms4liU&amp;index=16&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq" target="_blank" rel="noopener">https://www.youtube.com/watch?v=Llt_jms4liU&amp;index=16&amp;list=PLAiXlfcSCXYTA8k8AQX0sdRtvpOGkY7yq</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>08.1. Angular 폼 검증</title>
      <link href="/2017/07/12/Angular/8.1.%20Angular%20%ED%8F%BC%20%EA%B2%80%EC%A6%9D/"/>
      <url>/2017/07/12/Angular/8.1.%20Angular%20%ED%8F%BC%20%EA%B2%80%EC%A6%9D/</url>
      
        <content type="html"><![CDATA[<p>Form 을 검증하기 위해서는 템플릿 주도인 <code>내장 검증기</code>와 모델주도인 <code>외부 검증모듈</code>이 있다.</p><h2 id="템플릿-주도-검증"><a href="#템플릿-주도-검증" class="headerlink" title="템플릿 주도 검증"></a>템플릿 주도 검증</h2><p>템플릿 외부에 별도의 검증 모듈을 두지 않고, 템플릿 내에서 검증되게 하는 방법으로 검증대상이 적고 <strong>단순한 검증</strong>을 수행할때 적합한 방식이다.</p><p>내장 검증기로는 <code>required, minlength, maxlength, pattern</code>가 있다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  아이디 : &lt;input type="text" [(ngModel)]="user.userId" minlength="2" maxlength="5" #userId="ngModel" required&gt;&#123;&#123;userId.valid&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &lt;div *ngIf="userId.valid"&gt;</span></span><br><span class="line"><span class="string">    완료</span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span>,</span><br><span class="line">  styles: [<span class="string">`</span></span><br><span class="line"><span class="string">   .ng-touched&#123; font-weight: bold; &#125;</span></span><br><span class="line"><span class="string">  `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> FormComponent &#123;</span><br><span class="line">  user = &#123; userId: <span class="string">''</span>, userName: <span class="string">''</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#userId의 의미는 참조변수이다. input태그의 value값을 가져오기 위해서는 참조변수를 <code>#userId</code>과 같이 등록한후 {{{userId.value}}를 입력하면 된다.</p><p><strong>검증 결과를 확인하기 위해서</strong>는 참조변수에 <code>#userId = &quot;ngModel&quot;</code> 을 할당한뒤 {{userId.valid}}로 확인할 수 있다.</p><h4 id="엘리먼트의-검증상태"><a href="#엘리먼트의-검증상태" class="headerlink" title="엘리먼트의 검증상태"></a>엘리먼트의 검증상태</h4><p>위의 {{userName.valid}} 외에도 다른 상태정보를 확인할 수 있다.</p><ol><li>valid : 검증 통과 true, 실패 false</li><li>untouched : 포커스를 주지 않았을 경우 true</li><li>touched : 포커스를 뒀다가 포커스를 잃어버린 경우</li><li>pristine : 값이 한번도 입력되지 않았을 경우</li><li>dirty : 값이 한 번이라도 입력된 경우</li><li>erros : 검증 실패 이유들이 담겨 있음 {{userName.error | json}} 으로 확인해보자</li></ol><h4 id="폼-참조변수를-이용한-검증"><a href="#폼-참조변수를-이용한-검증" class="headerlink" title="폼 참조변수를 이용한 검증"></a>폼 참조변수를 이용한 검증</h4><p>폼 엘리먼트와 연결된 참조변수를 이용해서 검증을 해보자</p><ul><li>NgForm 모듈 필요</li></ul><p><code>import { NgForm } from &#39;@angular/forms&#39;;</code></p><ul><li>폼 엘리먼트와 참조변수 연결</li></ul><p><code>&lt;form #f=&quot;ngForm&quot;&gt; ...</code> ngForm을 참조변수 #f에 연결한다.</p><ul><li>f.valid를 통해 하나의 변수로 검사 가능</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgForm &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;form #f="ngForm"&gt;</span></span><br><span class="line"><span class="string">    아이디 :</span></span><br><span class="line"><span class="string">    &lt;input type="text" name="userId" [(ngModel)]="user.userId" #userId="ngModel" minlength="2" maxlength="5" required&gt;&#123;&#123;userId.valid&#125;&#125;</span></span><br><span class="line"><span class="string">    비밀번호 :</span></span><br><span class="line"><span class="string">    &lt;input type="password" name="password" [(ngModel)]="user.userPassword" #password="ngModel" minlength="4" maxlength="12" required&gt;&#123;&#123;password.valid&#125;&#125;</span></span><br><span class="line"><span class="string">    이름 :</span></span><br><span class="line"><span class="string">    &lt;input type="text" [(ngModel)]="user.userName" #name="ngModel" [ngModelOptions]="&#123;standalone: true&#125;" required&gt;&#123;&#123;name.valid&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;div *ngIf="f.valid"&gt;</span></span><br><span class="line"><span class="string">      완료 &#123;&#123;f.value | json&#125;&#125;, &#123;&#123;f.valid&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;/div&gt;</span></span><br><span class="line"><span class="string">  &lt;/form&gt;`</span>,</span><br><span class="line">  styles: [<span class="string">`</span></span><br><span class="line"><span class="string">   .ng-touched&#123; font-weight: bold; &#125;</span></span><br><span class="line"><span class="string">  `</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> FormComponent &#123;</span><br><span class="line">  user = &#123; userId: <span class="string">''</span>, userName: <span class="string">''</span> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>{{standalone: true}}를 하면 f.valid에 영향을 미치지 않으며, name property를 입력하지 않아도 된다.<h2 id="모델-주도-검증"><a href="#모델-주도-검증" class="headerlink" title="모델 주도 검증"></a>모델 주도 검증</h2><p>템플릿 외부 모듈에서 검증이 수행된다. <strong>검증과정이 반복적이고 복잡할 경우</strong> 고려한다.</p><h4 id="폼-그룹-기반-검증"><a href="#폼-그룹-기반-검증" class="headerlink" title="폼 그룹 기반 검증"></a>폼 그룹 기반 검증</h4><p>폼 참조변수는 템플릿 내부에서만 사용할 수 있기 때문에, 클래스와의 연결을 고려한 <code>폼 그룹 방식</code>을 사용한다.</p><p><code>&lt;form [formGroup]=&quot;form&quot;&gt; ...</code>, <code>&lt;div [formGroup]=&quot;form&quot;&gt;...</code></p><p>폼 그룹은 <code>&lt;form&gt;</code> 엘리먼트 외에 엘리먼트의 사용 또한 허용한다. <code>form</code> 변수는 클래스 내부에 정의된 FromGroup 객체이다. 폼 그룹을 통해 클래스에서 검증기를 선언할 수 있다.</p><ul><li>Validators.required</li><li>Validators.minLength(5)</li><li>Validators.maxLength(5)</li><li>Validators.pattern(“[a-zA-Z]+”)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormGroup, FormControl, Validators &#125; <span class="keyword">from</span> <span class="string">"@angular/forms"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;form [formGroup]="form" (ngSubmit)="onSubmit($event)"&gt;</span></span><br><span class="line"><span class="string">    소문자 : &lt;input formControlName="lowerCase" pattern="[a-z]&#123;3&#125;"&gt;</span></span><br><span class="line"><span class="string">    &lt;br&gt; 대문자 : &lt;input formControlName="upperCase"&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">    &lt;button type="submit" *ngIf="form.valid"&gt;확인&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;/form&gt;</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)="setValue()"&gt;값 채우기&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)="reset()"&gt;리셋&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;button (click)="patch()"&gt;패치&lt;/button&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;&lt;br&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> FormComponent &#123;</span><br><span class="line">  form = <span class="keyword">new</span> FormGroup(&#123;</span><br><span class="line">    lowerCase: <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.required),</span><br><span class="line">    upperCase: <span class="keyword">new</span> FormControl(<span class="string">''</span>, Validators.compose([Validators.required, Validators.pattern(<span class="string">"[A-Z]&#123;3&#125;"</span>)]))</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  setValue() &#123;</span><br><span class="line">    <span class="keyword">this</span>.form.setValue(&#123; lowerCase: <span class="string">'abc'</span>, upperCase: <span class="string">'ABC'</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  reset() &#123;</span><br><span class="line">    <span class="keyword">this</span>.form.setValue(&#123; lowerCase: <span class="string">''</span>, upperCase: <span class="string">''</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onSubmit(event) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this.form.value"</span>, <span class="keyword">this</span>.form.value.lowerCase, <span class="keyword">this</span>.form.value.upperCase);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"this.form.value"</span>, <span class="keyword">this</span>.form.get(<span class="string">'lowerCase'</span>).value, <span class="keyword">this</span>.form.get(<span class="string">'upperCase'</span>).value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  patch() &#123;</span><br><span class="line">    <span class="keyword">this</span>.form.patchValue(&#123; lowerCase: <span class="string">'one'</span> &#125;);</span><br><span class="line">    <span class="keyword">this</span>.form.patchValue(&#123; upperCase: <span class="string">'ONE'</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>두개이상의 Validators를 조합하기 위해서는 compose를 사용한다.</p><p><code>ngSubmit</code> 속성을 통해 <code>onSubmit()</code> 메서드 호출을 한다. <code>this.form.get(&#39;lowerCase&#39;).value</code> 혹은 <code>this.form.value.lowerCase</code>와 같은 방식으로 값을 가져올 수 있다.</p><h4 id="커스텀-검증기"><a href="#커스텀-검증기" class="headerlink" title="커스텀 검증기"></a>커스텀 검증기</h4><p>복잡한 검증을 수행하기 위해선 커스텀 검증기를 추가해야함. 컴포넌트 외부에 정의함.</p><ul><li>input-validator.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FormControl &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> InputValidator &#123;</span><br><span class="line">  <span class="keyword">static</span> startsWithNumber(control: FormControl) &#123;</span><br><span class="line">    <span class="keyword">var</span> valid = <span class="regexp">/^\d/</span>.test(control.value);</span><br><span class="line">    <span class="keyword">if</span>(valid &amp;&amp; control.value != <span class="string">""</span> &amp;&amp; !<span class="built_in">isNaN</span>(control.value.charAt(<span class="number">0</span>))) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; startsWithNumber: <span class="literal">true</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="폼-검증-상태"><a href="#폼-검증-상태" class="headerlink" title="폼 검증 상태"></a>폼 검증 상태</h4><p><code>&lt;form [formGroup]=&quot;form&quot;&gt; ...</code>  폼그룹 기반의 검증시에 검증 상태를 알아보자.</p>{{form.valid}}<ul><li>form.valid : 폼 내부 전체적인 검증상태 확인</li><li>Form.touched : 폼 전체적인 방문 여부</li><li>Form.value | json : 폼 내부 값들을 출력해줌</li><li>Form.controls.email.value : 특정 엘리먼트 속성 값 가져옴</li><li>Form.controls.email.touched</li><li>Form.controls.email.errors | json </li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07.1. Angular 가드</title>
      <link href="/2017/07/12/Angular/7.1.%20Angular%20%EA%B0%80%EB%93%9C/"/>
      <url>/2017/07/12/Angular/7.1.%20Angular%20%EA%B0%80%EB%93%9C/</url>
      
        <content type="html"><![CDATA[<p>앵귤러2의 가드를 사용해서, 로그인 서비스를 만들어보자.</p><h2 id="로그인-페이지"><a href="#로그인-페이지" class="headerlink" title="로그인 페이지"></a>로그인 페이지</h2><ul><li><strong>로그인 컴포넌트</strong></li></ul><p>ngIf 지시자를 활용해 화면 표시 상태 결정.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Router, NavigationExtras &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">'./auth.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h3&gt;LOGIN&lt;/h3&gt; &#123;&#123;message&#125;&#125;</span></span><br><span class="line"><span class="string">    &lt;p&gt;</span></span><br><span class="line"><span class="string">      &lt;input type="text" [(ngModel)]="userId" placeholder="사용자 아이디" *ngIf="!authService.isLogin"&gt;</span></span><br><span class="line"><span class="string">      &lt;button (click)="login()"  *ngIf="!authService.isLogin"&gt;로그인&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;button (click)="logout()" *ngIf="authService.isLogin"&gt;로그아웃&lt;/button&gt;</span></span><br><span class="line"><span class="string">    &lt;/p&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> LoginComponent &#123;</span><br><span class="line">  message: <span class="built_in">string</span>; userId: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> authService: AuthService, <span class="keyword">public</span> router: Router</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setMessage();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  setMessage() &#123;</span><br><span class="line">    <span class="keyword">this</span>.message = (<span class="keyword">this</span>.authService.isLogin ? <span class="keyword">this</span>.authService.userId + <span class="string">'님 환영합니다.'</span> : <span class="string">'로그인 필요'</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> doLogin() &#123;</span><br><span class="line">    <span class="keyword">this</span>.setMessage();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.authService.isLogin) &#123;</span><br><span class="line">      <span class="keyword">let</span> redirect = <span class="keyword">this</span>.authService.redirectUrl ? <span class="keyword">this</span>.authService.redirectUrl : <span class="string">'/admin'</span>;</span><br><span class="line">      <span class="keyword">let</span> navigationExtras: NavigationExtras = &#123;</span><br><span class="line">        preserveQueryParams: <span class="literal">true</span>,</span><br><span class="line">        preserveFragment: <span class="literal">true</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">this</span>.router.navigate([redirect], navigationExtras);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      alert(<span class="string">'로그인을 할 수 없습니다.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  login() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.userId) &#123;</span><br><span class="line">      alert(<span class="string">'id를 입력해주세요'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.message = <span class="string">'로그인을 진행해주세요'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.authService.checkId(<span class="keyword">this</span>.userId).then(<span class="function"><span class="params">children</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (children) &#123;</span><br><span class="line">        <span class="keyword">this</span>.authService.login(<span class="keyword">this</span>.userId).subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.doLogin());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'아이디가 없습니다'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.setMessage();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  logout() &#123;</span><br><span class="line">    <span class="keyword">this</span>.authService.logout();</span><br><span class="line">    <span class="keyword">this</span>.setMessage();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router의 navigate 함수를 통해 로그인 성공시, 페이지 이동.</p><p>로그인 버튼을 누르면 <code>login()</code> 메서드가 실행, <code>authService.checkId()</code> 실행.</p><ul><li><strong>Auth 서비스</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/observable/of'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/do'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/delay'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> User &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> id: <span class="built_in">number</span>, <span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> USERS = [</span><br><span class="line">  <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">'첫번째 사용자'</span>),</span><br><span class="line">  <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">'두번째 사용자'</span>),</span><br><span class="line">  <span class="keyword">new</span> User(<span class="number">3</span>, <span class="string">'세번째 사용자'</span>)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> userPromise = <span class="built_in">Promise</span>.resolve(USERS);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AuthService &#123;</span><br><span class="line">  isLogin: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br><span class="line">  redirectUrl: <span class="built_in">string</span>;</span><br><span class="line">  userId: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  checkId(userId: <span class="built_in">string</span>): <span class="built_in">Promise</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> userPromise</span><br><span class="line">      .then(<span class="function"><span class="params">children</span> =&gt;</span> children.find(<span class="function"><span class="params">children</span> =&gt;</span> children.id === +userId));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  login(userId: <span class="built_in">string</span>): Observable&lt;<span class="built_in">boolean</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> Observable.of(<span class="literal">true</span>).delay(<span class="number">500</span>).do(<span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">this</span>.isLogin = <span class="literal">true</span>).do(<span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">this</span>.userId = userId);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  logout(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.isLogin = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>시뮬레이션을 위해 목객체 사용.</p><ul><li><strong>권한 접근 제어 : AuthGuard 서비스</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CanActivate, Router, ActivatedRouteSnapshot, RouterStateSnapshot, CanActivateChild, NavigationExtras, CanLoad, Route &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AuthService &#125; <span class="keyword">from</span> <span class="string">'./auth.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AuthGuard <span class="keyword">implements</span> CanActivate, CanActivateChild, CanLoad &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> authService: AuthService, <span class="keyword">private</span> router: Router</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url: <span class="built_in">string</span> = state.url;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.checkLogin(url);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.canActivate(route, state);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// lazy load 사용시, canLoad 사용.</span></span><br><span class="line">  canLoad(route: Routce): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="string">`/<span class="subst">$&#123;route.path&#125;</span>`</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.confirm(<span class="string">"자식 라우트가 모두 로드 되었습니다. 진행하시겠습니까?"</span>))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.checkLogin(url);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  checkLogin(url: <span class="built_in">string</span>): <span class="built_in">boolean</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.authService.isLogin) &#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</span><br><span class="line">    <span class="keyword">this</span>.authService.redirectUrl = url;</span><br><span class="line">    <span class="keyword">let</span> sessionId = <span class="number">1234</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> navigationExtras: NavigationExtras = &#123;</span><br><span class="line">      queryParams: &#123; <span class="string">'session_id'</span>: sessionId &#125;,</span><br><span class="line">      fragment: <span class="string">'anchor'</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.router.navigate([<span class="string">'/login'</span>], navigationExtras);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URL에 세션 매개변수 정보를 전달하기 위해, NavigationExtras를 사용. session_id와 앵커를 url에 붙임. (결과 : <a href="http://localhostL4200/login?session_id=1234#anchor" target="_blank" rel="noopener">http://localhostL4200/login?session_id=1234#anchor</a>)</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱 지음</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05. Angular 서비스</title>
      <link href="/2017/07/12/Angular/5.%20Angular%20%EC%84%9C%EB%B9%84%EC%8A%A4/"/>
      <url>/2017/07/12/Angular/5.%20Angular%20%EC%84%9C%EB%B9%84%EC%8A%A4/</url>
      
        <content type="html"><![CDATA[<p>컴포넌트에 제공할 목적으로 외부에 정의한 클래스. 모든 컴포넌트에 공통적으로 존재할 수 있는 공통 관심 기능을 서비스로 만듬.</p><p>Angular CLI 사용할 경우 </p><blockquote><p>$ ng g service</p></blockquote><h2 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h2><p>서비스 정의는 @Injectable 장식자를 사용. 주입 가능한 클래스라는 의미. 서비스 클래스 라는 것을 명시하는 역할.</p><ul><li>서비스</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloService &#123;</span><br><span class="line">  sayHello()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello 서비스!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>컴포넌트</li></ul><p>providers에 서비스를 등록해준다.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HelloService &#125; <span class="keyword">from</span> <span class="string">'./hello.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'hello'</span>,</span><br><span class="line">  template: <span class="string">`&#123;&#123;welcome&#125;&#125;`</span>,</span><br><span class="line">  providers: [HelloService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloComponent &#123;</span><br><span class="line">  welcome: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">helloService: HelloService</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.welcome = helloService.sayHello();    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="서비스를-통한-데이터-교환"><a href="#서비스를-통한-데이터-교환" class="headerlink" title="서비스를 통한 데이터 교환"></a>서비스를 통한 데이터 교환</h2><p>부모 컴포넌트에는 제공자 설정을 통해 주입. 자식 컴포넌트에는 제공자 설정을 하지 않고 서비스를 받아서 사용하면 같은 서비스를 통해 값 공유 가능.</p><ul><li>공유 서비스 정의</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SharedService &#123;</span><br><span class="line">  num: <span class="built_in">number</span>;</span><br><span class="line">  message: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">public</span> names: <span class="built_in">string</span>[] = [];</span><br><span class="line">  addName(data: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.names.unshift(data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>자식 컴포넌트</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SharedService &#125; <span class="keyword">from</span> <span class="string">'./shared.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'car-component'</span>,</span><br><span class="line">  template: <span class="string">`car 컴포넌트 : &#123;&#123; s.message&#125;&#125; &lt;button (click)="s.message='car'"&gt;선택&lt;/button&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CarComponent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> s: SharedService</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SharedService &#125; <span class="keyword">from</span> <span class="string">'./shared.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'taxi-component'</span>,</span><br><span class="line">  template: <span class="string">`taxi 컴포넌트 : &#123;&#123; s.message&#125;&#125; &lt;button (click)="s.message='taxi'"&gt;선택&lt;/button&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TaxiComponent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> s: SharedService</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>부모 컴포넌트</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; SharedService &#125; <span class="keyword">from</span> <span class="string">'./shared.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'parent-component'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  부모 컴포넌트 : &#123;&#123;s.message&#125;&#125; &lt;button (click)="s.message='parent'"&gt;선택&lt;/button&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">  &lt;car-component&gt;&lt;/car-component&gt;&lt;br&gt;</span></span><br><span class="line"><span class="string">  &lt;taxi-component&gt;&lt;/taxi-component&gt;`</span>,</span><br><span class="line">  providers: [SharedService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ParentComponent &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> s: SharedService</span>) &#123;</span><br><span class="line">    s.message = <span class="string">"hello"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>05.1. Angular 의존성 주입</title>
      <link href="/2017/07/12/Angular/5.1.%20%EC%9D%98%EC%A1%B4%EC%84%B1%20%EC%A3%BC%EC%9E%85/"/>
      <url>/2017/07/12/Angular/5.1.%20%EC%9D%98%EC%A1%B4%EC%84%B1%20%EC%A3%BC%EC%9E%85/</url>
      
        <content type="html"><![CDATA[<p>객체 생성과 설정에 들어가는 코드를 최소화하고, 컴포넌트 마다 일관된 방법으로 생성한 객체를 제공하기 위해서 필요함.</p><ol><li>@Injector : 주입할 클래스 선택</li><li>Provider : 주입할 클래스를 제공자에 등록</li><li>Dependency Injection : 생성자로 의존성 주입을 받음</li></ol><h2 id="제공자를-통한-의존성-주입"><a href="#제공자를-통한-의존성-주입" class="headerlink" title="제공자를 통한 의존성 주입"></a>제공자를 통한 의존성 주입</h2><ul><li>클래스 제공자</li></ul><ol><li><code>@Injectable()</code> 장식자 활용 </li><li><code>@Component({ ... providers: [주입할 클래스]})</code></li><li>생성자 패턴을 이용해 의존성 주입 <code>constructor(public [주입할 클래스명:클래스])</code></li></ol><ul><li>값 제공자</li></ul><p>컴포넌트에 값을 제공할 목적으로 사용.</p><ul><li>팩토리 제공자</li></ul><p>싱글턴이 아닌 새롭게 생성한 객체를 의존성 주입을 통해 사용할 때.</p><h2 id="제공자-없이-의존성-주입"><a href="#제공자-없이-의존성-주입" class="headerlink" title="제공자 없이 의존성 주입"></a>제공자 없이 의존성 주입</h2><ul><li>팩토리 패턴</li></ul><p>제공자 이용하지 않고 새로운 객체를 만들어 의존성을 주입하고 싶을 때.</p><ul><li>주입기 이용</li></ul><p>Angular에서 만들어 놓은 팩토리 패턴, <code>new</code> 키워드 대신 <code>resolveAndCreate()</code> 메서드 활용</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ReflectiveInjector &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; 클래스 &#125; <span class="keyword">from</span> <span class="string">'...'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> injector: ReflectiveInjector = ReflectiveInjector.resoleveAndCreate([클래스명]);</span><br><span class="line">  <span class="keyword">return</span> injector.get(클래스명);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>07. Angular 라우터</title>
      <link href="/2017/07/12/Angular/7.%20Angular%20%EB%9D%BC%EC%9A%B0%ED%84%B0/"/>
      <url>/2017/07/12/Angular/7.%20Angular%20%EB%9D%BC%EC%9A%B0%ED%84%B0/</url>
      
        <content type="html"><![CDATA[<p>사용자가 요청한 URL을 해석하고 출력을 담당하는 컴포넌트와 연결하는 역할. </p><ul><li>기본적으로 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> 영역에 출력.</li></ul><h2 id="라우터-지시자"><a href="#라우터-지시자" class="headerlink" title="라우터 지시자"></a>라우터 지시자</h2><ul><li>a 태그</li></ul><p>href 속성은 애플리케이션 전체를 로딩하기 때문에 routerLink를 사용함.</p><p><code>&lt;a routerLink=&quot;/pages/first-page&quot;&gt;1&lt;/a&gt;</code></p><ul><li>네비게이션</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Router &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 생성자 매개변수 public 사용시, 클래스 전역 변수가 됌.</span></span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> _router: Router</span>) &#123; &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 페이지 이동</span></span><br><span class="line"><span class="keyword">this</span>._router.navigateByUrl(<span class="string">"/pages/first-page"</span>);</span><br><span class="line"><span class="comment">// 또는</span></span><br><span class="line"><span class="keyword">this</span>._router.navigate([<span class="string">'pages'</span>, <span class="string">'second-page'</span>]);</span><br></pre></td></tr></table></figure><h2 id="라우터-골격"><a href="#라우터-골격" class="headerlink" title="라우터 골격"></a>라우터 골격</h2><ul><li>라우터 설정</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ModuleWithProviders &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; IntroComponent &#125; <span class="keyword">from</span> <span class="string">'./intro.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NotFoundComponent &#125; <span class="keyword">from</span> <span class="string">'./not-found.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HelloComponent &#125; <span class="keyword">from</span> <span class="string">'./hello/hello.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> helloRoutes: Routes = [</span><br><span class="line">  <span class="comment">// 라우터 설정 정보</span></span><br><span class="line">  &#123; path: <span class="string">''</span>, component: IntroComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'hello'</span>, component: HelloComponent &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">  <span class="comment">// 라우터 설정 변수</span></span><br><span class="line">  ...helloRoutes,</span><br><span class="line">  &#123; path: <span class="string">'**'</span>, component: NotFoundComponent,</span><br><span class="line">    path: <span class="string">'lazy'</span>, loadChildren: <span class="string">'app/player.module#PlayerModule'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRoutingProviders: <span class="built_in">any</span>[] = [</span><br><span class="line">  ...</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> AppRoutingModule: ModuleWithProviders = RouterModule.forRoot(appRoutes);</span><br></pre></td></tr></table></figure><p><code>Routes</code>는 라우터 설정의 구조를 정의한 인터페이스 모듈</p><p><code>RouterModule</code>은 지시자나 컴포넌트를 포함해 모듈을 만들 때 사용하는 모듈로 <code>RouterModule.forRoot(...)</code> 메서드는 appRoutes의 라우터 설정 정보에 담긴 지시자나 컴포넌트의 정보를 합해서, 어플리케이션 단위의 모듈로 만드는 역할.</p><p><code>appRoutes</code>에서 여러 라우터 설정 정보를 합치려면 <code>...</code> 와 같은 절개 연산자를 이용하면 됌.</p><p><code>AppRoutingModule</code>은 루트 모듈에 포함돼야 하기 때문에 <code>export</code> 처리를 함.</p><p><code>loadChildren</code> 게으르게 임포트함.</p><ul><li>루트 모듈</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">/* application router settings */</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppRoutingModule, appRoutingProviders &#125; <span class="keyword">from</span> <span class="string">'./app.routing'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* global components */</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; IntroComponent &#125; <span class="keyword">from</span> <span class="string">'./intro.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HelloComponent &#125; <span class="keyword">from</span> <span class="string">'./hello/hello.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ...</span><br><span class="line">    AppRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  providers: [appRoutingProviders],</span><br><span class="line">  declarations: [</span><br><span class="line">    ...</span><br><span class="line">    AppComponent, IntroComponent, HelloComponent,</span><br><span class="line">    NotFoundComponent</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><ul><li>어플리케이션 컴포넌트(app.component.ts)</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-root'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    ...</span></span><br><span class="line"><span class="string">    &lt;router-outlet&gt;&lt;/router-outlet&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent &#123; &#125;</span><br></pre></td></tr></table></figure><p><code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> 라우터 아울렛을 반드시 포함.</p><ul><li>라우터로 연결되는 컴포넌트</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'hello'</span>,</span><br><span class="line">  template: <span class="string">`&lt;h1&gt;Hello!!&lt;/h1&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloComponent &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="특징-모듈에서-라우팅-설정"><a href="#특징-모듈에서-라우팅-설정" class="headerlink" title="특징 모듈에서 라우팅 설정"></a>특징 모듈에서 라우팅 설정</h2><p>위의 코드는 루트 모듈에서만 사용된다. 루트 모듈은 맨 처음 한번 시작 포인트를 갖기 때문에, lazy load와 같은 어플리케이션이 시작 시점에 초기화 되지 않는 모듈일 경우에는 오류가 발생한다. 그래서 이러한 점을 대처하기 위해 <code>RouterModule.forChild</code>를 활용한다.</p><ul><li><strong>forChild()를 이용한 라우팅 설정</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;            <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule &#125;        <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; MemberComponent &#125;    <span class="keyword">from</span> <span class="string">'./member.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forChild([</span><br><span class="line">    &#123; path: <span class="string">'member'</span>, component: MemberComponent&#125;</span><br><span class="line">  ])],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MemberRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>라우팅 설정을 특징 모듈에 추가</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;           <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125;       <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125;        <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; MemberComponent &#125;   <span class="keyword">from</span> <span class="string">'./member.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MemberRoutingModule &#125;   <span class="keyword">from</span> <span class="string">'./member-routing.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports:      [ CommonModule, FormsModule, MemberRoutingModule ],</span><br><span class="line">  declarations: [ MemberComponent ],</span><br><span class="line">  providers:    [ ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MemberModule &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="라우팅-접근-제어"><a href="#라우팅-접근-제어" class="headerlink" title="라우팅 접근 제어"></a>라우팅 접근 제어</h2><p>라우팅 접근제어에 <strong>가드(guard)</strong>를 사용, 크게 4가지 종류가 있음</p><ul><li>CanActivate 가드, CanActivateChild 가드</li></ul><p>라우터의 접근 권한을 검사, CanActivate 인터페이스 모듈을 받아 canActivate() 메서드를 구현. url을 체크하고 참이나 거짓 값중 하나를 반환함.</p><ul><li>CanDeactive 가드</li></ul><p>라우트 변경시 호출 되는 라우트.</p><ul><li>Resolve 가드</li></ul><p>라우트 데이터를 가져와 컴포넌트에 제공하는 가드.(주소에서 id를 가져온다든지)</p><ul><li>CanLoad 가드</li></ul><p>lazy 모듈 임포트시 사용되는 가드.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lazyRoutes: Routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'lazy'</span>,</span><br><span class="line">    loadChildren: <span class="string">'app/player/player.module#PlayerModule'</span>,</span><br><span class="line">    canLoad: [AuthGuard]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p><p><a href="https://stackoverflow.com/questions/40498081/routermodule-forrootroutes-vs-routermodule-forchildroutes" target="_blank" rel="noopener">https://stackoverflow.com/questions/40498081/routermodule-forrootroutes-vs-routermodule-forchildroutes</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>06. Angular 파이프</title>
      <link href="/2017/07/12/Angular/6.%20Angular%20%ED%8C%8C%EC%9D%B4%ED%94%84/"/>
      <url>/2017/07/12/Angular/6.%20Angular%20%ED%8C%8C%EC%9D%B4%ED%94%84/</url>
      
        <content type="html"><![CDATA[<p>템플릿에서 값의 표시되는 형태를 변환해서 보여주기 위해 사용, Filter라는 이름으로 불리기도 함.(|)</p><ul><li>선언</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123; name: <span class="string">'myupper'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyUpperPipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line">  transform(phrase: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> phrase.toUpperCase();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 문자열을 대문자로 바꿔주는 파이프.</p><ul><li>루트 모듈이나, 공유모듈에 등록</li></ul><p><code>@NgModule({declarations:[MyUpperPipe], exports: [MyUpperPipe]})</code></p><ul><li>사용</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'player'</span>,</span><br><span class="line">  template: <span class="string">`&lt;div highlight&gt;&#123;&#123;"player!!!"|myupper&#125;&#125;&lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PlayerComponent &#123; &#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://medium.com/witinweb/angular-4-2-pipes-%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-651848186633" target="_blank" rel="noopener">https://medium.com/witinweb/angular-4-2-pipes-%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-651848186633</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>04. Angular 모듈</title>
      <link href="/2017/07/12/Angular/4.%20Angular%20%EB%AA%A8%EB%93%88/"/>
      <url>/2017/07/12/Angular/4.%20Angular%20%EB%AA%A8%EB%93%88/</url>
      
        <content type="html"><![CDATA[<p>모듈은 관련된 기능을 하나로 묶어 다른 코드와 결합도를 줄이고, 재사용성을 높이기 위해 사용된다. </p><h2 id="Angular-라이브러리-모듈"><a href="#Angular-라이브러리-모듈" class="headerlink" title="Angular 라이브러리 모듈"></a>Angular 라이브러리 모듈</h2><p>Angular 라이브러리 모듈의 종류로는 크게 지시자, 파이프, 장식자, 클래스, 인터페이스, Enum, 타입 별칭, 상수가 있음.</p><ul><li>@angular/common :  파이프, 구조 지시자, 속성 지시자 관련 모듈</li><li>@angular/core : 주요 요소 장식자 및 핵심 모듈</li><li>@angular/forms : 폼 관련 모듈, 지시자</li><li>@angular/http : HTTP 통신과 관련된 모듈</li><li>@angular/platform-browser : 브라우저 모듈, DOM 새니타이저 등</li><li>@angular/router : 라우터 관련 모듈이나 지시자</li><li>@angular/testing : 테스팅 관련 모듈</li></ul><p><code>import { Component} from &#39;@angular/core&#39;;</code> 와 같이 추가.</p><h2 id="사용자-정의-모듈"><a href="#사용자-정의-모듈" class="headerlink" title="사용자 정의 모듈"></a>사용자 정의 모듈</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hi &#123;</span><br><span class="line">  sayHi() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hi!"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> District &#123;</span><br><span class="line">  id: <span class="built_in">number</span>; name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> DISTRICT: District[] = [</span><br><span class="line">  &#123; id: <span class="number">1</span>, name: <span class="string">'서울'</span>&#125;, &#123;id: <span class="number">2</span>, name: <span class="string">'부산'</span>&#125;, &#123;id: <span class="number">3</span>, name: <span class="string">'대구'</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">echo</span>(<span class="params">msg:<span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>export 키워드를 이용해 <strong>모듈을 정의</strong>하고, 모듈을 외부로 노출할 것임을 알림.</p><ul><li><strong>사용</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Hi, echo, DISTRICT &#125; <span class="keyword">from</span> <span class="string">'./hi'</span>;</span><br></pre></td></tr></table></figure><h2 id="Angular-모듈"><a href="#Angular-모듈" class="headerlink" title="Angular 모듈"></a>Angular 모듈</h2><p>모듈성이란 성능을 향상 시킬 수 있도록 모듈 간 결합을 최소화하고, 모듈 내부의 응집도는 최대화하는 것을 의미함.</p><p>Angular 모듈은 모듈성을 극대화시키기 위해서 <strong>모듈을 그룹단위로 관리</strong>.</p><p><strong>루트모듈/핵심모듈/특징모듈/공유모듈</strong>로 나누어 관리.</p><h3 id="루트모듈"><a href="#루트모듈" class="headerlink" title="루트모듈"></a>루트모듈</h3><p>최상위 모듈로서, 컴포넌트, 지시자, 서비스, 파이프와 같은 모듈을 등록하고 관리</p><p>루트모듈은 @NgModule 장식자를 이용해 정의</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MyComponent &#125; <span class="keyword">from</span> <span class="string">'./my.component'</span>;</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">  BrowserModule, CommonModule, FormsModule,</span><br><span class="line">    AppRoutingModule,</span><br><span class="line">    CoreModule.forRoot(&#123;nickName: <span class="string">'Happy'</span>&#125;), <span class="comment">// 매개변수 전달</span></span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  declarations : [</span><br><span class="line">    컴포넌트, 지시자, 파이프,</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  providers: [서비스 모듈, ...]</span><br><span class="line">  ,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li>imports 속성</li></ol><ul><li><p><strong>브라우저 모듈(Browser Module)</strong></p><p>브라우저 상에서 동작한다면 반드시 포함, 컴포넌트나 지시자, 파이프 같은 구성요소를 템플릿에 나타나게 하는 역할.</p></li><li><p><strong>공통 모듈(Common Module)</strong></p><p>템플릿에 사용하는 ngIf, ngFor와 관련된 기능 포함(브라우저 모듈에 포함)</p></li><li><p><strong>폼 모듈(FormsModule)</strong></p><p>NgModel 지시자나 내장 검증기 지시자 등을 포함.</p></li><li><p><strong>라우딩 모듈(RoutingModule)</strong> </p><p>어플리케이션 수준에서 라우팅 수행</p></li></ul><p><code>라우팅 모듈 설정</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; IntroComponent &#125; <span class="keyword">from</span> <span class="string">'./intro.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HelloComponent &#125; <span class="keyword">from</span> <span class="string">'./hello/hello.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CoreTestComponent &#125; <span class="keyword">from</span> <span class="string">'./core-test/core-test.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appRoutes: Routes = [</span><br><span class="line">  &#123; path: <span class="string">''</span>, component: IntroComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'hello'</span>, component: HelloComponent &#125;,</span><br><span class="line">  &#123; path: <span class="string">'lazy'</span>, loadChildren: <span class="string">'app/player/player.module#PlayerModule'</span> &#125;,</span><br><span class="line">  &#123; path: <span class="string">'core-test'</span>, component: CoreTestComponent &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forRoot(appRoutes)],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><p>forRoot를 이용해 라우트를 등록, <code>app.module.ts</code> 파일 <code>imports</code>에 추가</p><ol start="2"><li>providers 속성</li></ol><p>전역에서 사용할 서비스 등록</p><blockquote><p>ex) 개발단계에서 전역적으로 사용되는 로거 서비스</p></blockquote><ol start="3"><li>declarations 속성</li></ol><p>어플리케이션 레벨에서 사용하고자 하는 컴포넌트, 지시자 파이프. imports내에서 선언된 내용들을 재선언해서는 안된다.</p><ol start="4"><li>bootstrap 속성</li></ol><p>최상위 컴포넌트인 애플리케이션 컴포넌트 등록</p><ol start="5"><li>entryComponents</li></ol><p>페이지 컴포넌트를 등록</p><h3 id="핵심-모듈"><a href="#핵심-모듈" class="headerlink" title="핵심 모듈"></a>핵심 모듈</h3><p>  항상 동작할 필요가 있거나, 어플리케이션 전체 동작에 핵심적인 역할을 하는 모듈.</p><blockquote><p>ex) 타이틀 컴포넌트 : 동작 내내 호출되어야 하기 때문</p></blockquote><ul><li><strong>루트 모듈</strong></li></ul><p><code>imports</code>에 핵심모듈 등록, <code>CoreModule.forRoot({nickName: &#39;Happy&#39;})</code></p><ul><li><strong>핵심모듈</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ModuleWithProviders, NgModule, Optional, SkipSelf &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; TitleComponent &#125; <span class="keyword">from</span> <span class="string">'./title.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'./user.service'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserServiceConfig &#125; <span class="keyword">from</span> <span class="string">'./user.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [CommonModule],</span><br><span class="line">  declarations: [TitleComponent],</span><br><span class="line">  exports: [TitleComponent],</span><br><span class="line">  providers: [UserService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CoreModule &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"> <span class="meta">@Optional</span>() <span class="meta">@SkipSelf</span>() parentModule: CoreModule</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (parentModule) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'CoreModule이 이미 로딩되었습니다.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> forRoot(config: UserServiceConfig): ModuleWithProviders &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ngModule: CoreModule,</span><br><span class="line">      providers: [</span><br><span class="line">        &#123; provide: UserServiceConfig, useValue: config &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>핵심 모듈을 루트 모듈에 추가하기 위해, <code>@NgModule</code> 설정에서 <code>TitleComponent</code>를 선언하고, 다시 <code>export</code>로 노출</p><p>@SkipSelf() : 핵심 모듈이 이미 생성됐는지 검사, 존재 한다면 @Optional 장식자를 이용해 주입</p><p>@Optional : 파라미터가 없으면 null 리턴, 있으면 개체 리턴</p><p>forRoot : 전달받은 {nickName: ‘Happy’} 값이, UserService에서 전달됌.</p><ul><li><strong>서비스</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable, Optional &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserServiceConfig &#123;</span><br><span class="line">  nickName = <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> UserService &#123;</span><br><span class="line">  <span class="keyword">private</span> _nickName = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"> <span class="meta">@Optional</span>() config: UserServiceConfig</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (config) &#123; <span class="keyword">this</span>._nickName = config.nickName; &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> nickName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._nickName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>forRoot의 파라미터 값으로 UserService 생성자가 실행.</p><ul><li><strong>타이틀 컴포넌트</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; UserService &#125; <span class="keyword">from</span> <span class="string">'../core/user.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'app-title'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;h1 highlight&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;</span></span><br><span class="line"><span class="string">  by &lt;b&gt;&#123;&#123;user&#125;&#125;&lt;/b&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TitleComponent &#123;</span><br><span class="line">  <span class="meta">@Input</span>() title = <span class="string">''</span>;</span><br><span class="line">  user = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">userService: UserService</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.user = userService.nickName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>사용</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'core-test'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">  &lt;app-title [title]="title"&gt;&lt;/app-title&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CoreTestComponent &#123;</span><br><span class="line">  title = <span class="string">'반갑습니다! Core Module!'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="특징모듈"><a href="#특징모듈" class="headerlink" title="특징모듈"></a>특징모듈</h3><p>  단위 어플리케이션(특정 기능 수행하는 여러 컴포넌트, 서비스 등의 집합)을 구성하는 모듈, 하위 분리하는 모듈.</p><blockquote><p>ex) 게시판 = 단위 어플리케이션 = 리스트컴포넌트 + 글쓰기 컴포넌트 + …</p></blockquote><ul><li>특징 모듈 선언</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;           <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125;       <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125;        <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; MemberListComponent &#125;   <span class="keyword">from</span> <span class="string">'./member-list.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HighlightDirective &#125; <span class="keyword">from</span> <span class="string">'./highlight.directive'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MemberRoutingModule &#125;   <span class="keyword">from</span> <span class="string">'./member-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; MemberService &#125;     <span class="keyword">from</span> <span class="string">'./member.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports:      [ CommonModule, FormsModule, MemberRoutingModule ],</span><br><span class="line">  declarations: [ MemberListComponent, HighlightDirective ],</span><br><span class="line">  providers:    [ MemberService ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MemberModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>루트 모듈과 유사한 형태로 작성</p><ul><li>특징 모듈 라우팅 모듈</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;            <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RouterModule &#125;        <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; MemberListComponent &#125;    <span class="keyword">from</span> <span class="string">'./member-list.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [RouterModule.forChild([</span><br><span class="line">    &#123; path: <span class="string">'member-list'</span>, component: MemberListComponent&#125;</span><br><span class="line">  ])],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MemberRoutingModule &#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>루트 모듈에 추가</li></ul><p><code>imports:[ MemberModule, ...]</code></p><h3 id="공유-모듈"><a href="#공유-모듈" class="headerlink" title="공유 모듈"></a>공유 모듈</h3><p>자주 사용되는 모듈이지만, 핵심 모듈처럼 항상 사용되는 모듈이 대상이 아닌 특징 모듈을 구성할 때 자주 반복적으로 선언되는 모듈로 반복적으로 나타나는 패턴을 묶어 공유모듈로 정의.</p><p>루트 모듈은 특징 모듈을 임포트하고, 특징 모듈은 공유모듈을 임포트함.</p><ul><li>공유 모델에 사용할 구성요소 정의</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Pipe, PipeTransform &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Pipe</span>(&#123; name: <span class="string">'myupper'</span> &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MyUpperPipe <span class="keyword">implements</span> PipeTransform &#123;</span><br><span class="line">  transform(phrase: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> phrase.toUpperCase();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>입력을 대문자로 변환하는 파이프.</p><ul><li>공유 모듈 설정 파일</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; CommonModule &#125; <span class="keyword">from</span> <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; MyUpperPipe &#125; <span class="keyword">from</span> <span class="string">'./my-upper.pipe'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [CommonModule],</span><br><span class="line">  declarations: [MyUpperPipe],</span><br><span class="line">  exports: [MyUpperPipe, CommonModule, FormsModule]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SharedModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>declarations 선언을 통해 모듈로 등록, 다른 모듈에 포함되어 사용되도록 exports를 통해 다시 외부로 노출]</p><ul><li>공유모듈 임포트</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; SharedModule &#125; <span class="keyword">from</span> <span class="string">'../shared/shared.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; PlayerRoutingModule &#125; <span class="keyword">from</span> <span class="string">'./player-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PlayerComponent &#125; <span class="keyword">from</span> <span class="string">'./player.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [ PlayerRoutingModule, SharedModule],</span><br><span class="line">  declarations: [PlayerComponent],</span><br><span class="line">  providers: []</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> PlayerModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>이미 공유모듈에 있는 모듈들은 공유모듈안에 있기 때문에, 다시 선언할 필요가 없음. 따라서 모듈 구성에 따른 복잡도를 줄일 수 있음.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p><p>모듈을 이용하여 어플리케이션 구성하기 : <a href="http://webframeworks.kr/tutorials/angularjs/app_structure_with_module/" target="_blank" rel="noopener">http://webframeworks.kr/tutorials/angularjs/app_structure_with_module/</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>03. Angular 컴포넌트</title>
      <link href="/2017/07/12/Angular/3.%20Angular%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/"/>
      <url>/2017/07/12/Angular/3.%20Angular%20%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8/</url>
      
        <content type="html"><![CDATA[<p>Angular 컴포넌트는 W3C 표준인 웹 컴포넌트 기술을 기반으로 함. 이 웹 컴포넌트는 HTML, CS, JS를 하나의 단위로 묶어주는 기술.</p><h2 id="웹-컴포넌트의-요소"><a href="#웹-컴포넌트의-요소" class="headerlink" title="웹 컴포넌트의 요소"></a>웹 컴포넌트의 요소</h2><ul><li><p>HTML 템플릿</p><p>컴포넌트의 UI를 표현하는 영역. 재사용 가능하다는 특징.</p></li><li><p>템플릿 호출</p><p>링크 엘리먼트를 이용해 호출</p><p><code>&lt;link rel=&quot;import&quot; href=&quot;template.html&quot;&gt;</code></p></li><li><p>쉐도우 DOM</p><p>쉐도우 DOM은 문서 DOM 외부에 존재하기 때문에 문서 DOM에서 정의한 스타일이나 이벤트가 적용되지 않고 캡슐화됌.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 쉐도우 DOM으로 &lt;some-component&gt; 와 같이 상세내용은 캡슐화되어 보이지않음.</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'some-component'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;h1&gt;I am Shadow DOM!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">    &lt;h2&gt;Nice to meet you :)&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;ng-content&gt;&lt;/ng-content&gt;</span></span><br><span class="line"><span class="string">  `</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> SomeComponent &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DOM으로 캡슐화되지 않아, 사용자가 볼 수 있음.</span></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'another-component'</span>,</span><br><span class="line">  directives: [SomeComponent],</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;some-component&gt;</span></span><br><span class="line"><span class="string">      &lt;h1&gt;Hi! I am Light DOM!&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;h2&gt;So happy to see you!&lt;/h2&gt;</span></span><br><span class="line"><span class="string">    &lt;/some-component&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">class</span> AnotherComponent &#123; <span class="comment">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure></li><li><p>커스텀 엘리먼트</p><p>이름을 임의로 정의해서 만든 엘리먼트 <code>&lt;hello-button&gt;&lt;/hello-button&gt;</code></p></li></ul><blockquote><p>앵귤러2에서는 웹 컴포넌트를 활용하여 html의 <nav> 블록 요소들을 컴포넌트화시켜 사용합니다.</nav></p></blockquote><h2 id="컴포넌트-Component-생성"><a href="#컴포넌트-Component-생성" class="headerlink" title="컴포넌트(Component) 생성"></a>컴포넌트(Component) 생성</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'hello-world'</span>, </span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;textarea [(ngModel)]="title"&gt;&lt;/textarea&gt;`</span>,</span><br><span class="line">  styles: [<span class="string">'div &#123; background: blue; &#125;'</span>] &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloWorld &#123;</span><br><span class="line">  msg: <span class="built_in">string</span> = <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>정의</strong></li></ul><p>@Component 장식자를 이용해 정의.</p><ul><li><strong>지시자</strong></li></ul><p>selector 속성에 컴포넌트를 등록하면 html파일이나, 다른 컴포넌트에</p><blockquote><hellow-world></hellow-world></blockquote><p>형식으로 사용할 수 있다.</p><ul><li><strong>템플릿속성, 스타일 속성</strong></li></ul><p>template, templateUrl : 내부, 외부 파일에 HTML과 템플릿 문법을 이용해 템플릿 정의.</p><p>style, styleUrls : 내부, 외부 CSS 파일에 템플릿 스타일 적용.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>02. Angular 프로젝트의 구성</title>
      <link href="/2017/07/12/Angular/2.%20Angular%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B5%AC%EC%84%B1/"/>
      <url>/2017/07/12/Angular/2.%20Angular%20%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%20%EA%B5%AC%EC%84%B1/</url>
      
        <content type="html"><![CDATA[<p>앵귤러2의 프로젝트는 어떻게 구성되어 있는지 정리해보자</p><ul><li>./app</li><li>./index.html</li><li>./node_modules</li><li>./package.json</li><li>./styles.css</li><li>./systemjs.config.js</li><li>./tsconfig.json</li><li>./typings.json</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><p>npm 명령을 통해 외부 모듈에 대한 “의존성 관리”를 해준다. </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"angular-quickstart"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"tsc &amp;&amp; concurrently \"tsc -w\" \"lite-server\" "</span>,</span><br><span class="line">    <span class="attr">"lite"</span>: <span class="string">"lite-server"</span>,</span><br><span class="line">    <span class="attr">"postinstall"</span>: <span class="string">"typings install"</span>,</span><br><span class="line">    <span class="attr">"tsc"</span>: <span class="string">"tsc"</span>,</span><br><span class="line">    <span class="attr">"tsc:w"</span>: <span class="string">"tsc -w"</span>,</span><br><span class="line">    <span class="attr">"typings"</span>: <span class="string">"typings"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"licenses"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">      <span class="attr">"url"</span>: <span class="string">"https://github.com/angular/angular.io/blob/master/LICENSE"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@angular/common"</span>: <span class="string">"~2.0.2"</span>,</span><br><span class="line">    <span class="attr">"@angular/compiler"</span>: <span class="string">"~2.0.2"</span>,</span><br><span class="line">    <span class="attr">"@angular/core"</span>: <span class="string">"~2.0.2"</span>,</span><br><span class="line">    <span class="attr">"@angular/forms"</span>: <span class="string">"~2.0.2"</span>,</span><br><span class="line">    <span class="attr">"@angular/http"</span>: <span class="string">"~2.0.2"</span>,</span><br><span class="line">    <span class="attr">"@angular/platform-browser"</span>: <span class="string">"~2.0.2"</span>,</span><br><span class="line">    <span class="attr">"@angular/platform-browser-dynamic"</span>: <span class="string">"~2.0.2"</span>,</span><br><span class="line">    <span class="attr">"@angular/router"</span>: <span class="string">"~3.0.2"</span>,</span><br><span class="line">    <span class="attr">"@angular/upgrade"</span>: <span class="string">"~2.0.2"</span>,</span><br><span class="line">    <span class="attr">"angular-in-memory-web-api"</span>: <span class="string">"~0.1.5"</span>,</span><br><span class="line">    <span class="attr">"bootstrap"</span>: <span class="string">"^3.3.7"</span>,</span><br><span class="line">    <span class="attr">"core-js"</span>: <span class="string">"^2.4.1"</span>,</span><br><span class="line">    <span class="attr">"reflect-metadata"</span>: <span class="string">"^0.1.8"</span>,</span><br><span class="line">    <span class="attr">"rxjs"</span>: <span class="string">"5.0.0-beta.12"</span>,</span><br><span class="line">    <span class="attr">"systemjs"</span>: <span class="string">"0.19.39"</span>,</span><br><span class="line">    <span class="attr">"zone.js"</span>: <span class="string">"^0.6.25"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"concurrently"</span>: <span class="string">"^3.0.0"</span>,</span><br><span class="line">    <span class="attr">"lite-server"</span>: <span class="string">"^2.2.2"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^2.0.3"</span>,</span><br><span class="line">    <span class="attr">"typings"</span>:<span class="string">"^1.4.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본 설정 값으로 package.json파일을 만드려면</p><blockquote><p>$ npm init –yes</p></blockquote><p>설정한 pacakge.json 파일대로 패키지 설치하려면</p><blockquote><p>$ npm install</p></blockquote><p>개발 서버 실행</p><blockquote><p>$ npm start</p></blockquote><ul><li>자주 사용하는 npm 명령어</li></ul><table><thead><tr><th>명령어</th><th>의미</th></tr></thead><tbody><tr><td>npm install –global 패키지명</td><td>패키지를 로컬 전역에 설치함</td></tr><tr><td>npm install –global 패키지명@버전</td><td>패키지의 특정 버전을 로컬 전역에 설치함</td></tr><tr><td>npm install -g 패키지명@latest</td><td>패키지의 최신 버전을 로컬에 설치함</td></tr><tr><td>npm uninstall -g 패키지명</td><td>로컬에 설치된 패키지를 삭제</td></tr><tr><td>npm view 패키지명 versions</td><td>원격 저장소에 등록된 모든 패키지 버전 확인</td></tr><tr><td>npm view 패지지명 version</td><td>원격저장소에 등록된 최신 패키지 버전만 확인</td></tr></tbody></table><h2 id="typings-json"><a href="#typings-json" class="headerlink" title="typings.json"></a>typings.json</h2><p>타입스크립트가 외부라이브러리(node, jasmine, core-js)를 인식할 수 있게 한다.</p><h2 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h2><p>타입스크립트를 자바스크립트로 변환할 때 필요한 설정 정보.</p><h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><p>프로젝트의 시작 페이지.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Angular 2 Application<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 첫번째. 전역 스타일 호출 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"styles.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 두번째. 폴리필 라이브러리 호출 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/core-js/client/shim.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/zone.js@0.6.25?main=browser"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/reflect-metadata@0.1.3"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 세번째. SystemJS 라이브러리 호출과 설정 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/systemjs@0.19.27/dist/system.src.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"systemjs.config.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      System.import(<span class="string">'app'</span>).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123; <span class="built_in">console</span>.error(err); &#125;);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 네번째. application 표시 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-app</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">my-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>styles.css</strong></p><p>앱 전역 스타일링</p></li><li><p><strong>폴리필 라이브러리 임포트</strong></p><blockquote><p>폴리필? 구버전의 브라우저가 최신 스크립트 기능에 대응하도록 보완하는 라이브러리</p></blockquote><ul><li>core-js : ES6 지원을 위한 폴리필</li><li>zonde.js : 변화 감지를 위한 라이브러리</li><li>reflect-metadata : ES7 장식자 추가를 위한 폴리필</li></ul></li><li><p><strong>SystemJS 라이브러리</strong></p><p>동적 모듈 로더, systemjs.config.js 파일을 통해 모듈 구성</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global</span>) </span>&#123;</span><br><span class="line">  System.config(&#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">      <span class="comment">// 경로에 대한 별칭 설정</span></span><br><span class="line">      <span class="string">'npm:'</span>: <span class="string">'node_modules/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    map: &#123;</span><br><span class="line">      app: <span class="string">'app'</span>,</span><br><span class="line">      <span class="string">'@angular/core'</span>: <span class="string">'npm:@angular/core/bundles/core.umd.js'</span>,</span><br><span class="line">      <span class="string">'@angular/common'</span>: <span class="string">'npm:@angular/common/bundles/common.umd.js'</span>,</span><br><span class="line">      <span class="string">'@angular/compiler'</span>: <span class="string">'npm:@angular/compiler/bundles/compiler.umd.js'</span>,</span><br><span class="line">      <span class="string">'@angular/platform-browser'</span>: <span class="string">'npm:@angular/platform-browser/bundles/platform-browser.umd.js'</span>,</span><br><span class="line">      <span class="string">'@angular/platform-browser-dynamic'</span>: <span class="string">'npm:@angular/platform-browser-dynamic/bundles/platform-browser-dynamic.umd.js'</span>,</span><br><span class="line">      <span class="string">'@angular/http'</span>: <span class="string">'npm:@angular/http/bundles/http.umd.js'</span>,</span><br><span class="line">      <span class="string">'@angular/router'</span>: <span class="string">'npm:@angular/router/bundles/router.umd.js'</span>,</span><br><span class="line">      <span class="string">'@angular/forms'</span>: <span class="string">'npm:@angular/forms/bundles/forms.umd.js'</span>,</span><br><span class="line">      <span class="comment">// 다른 라이브러리</span></span><br><span class="line">      <span class="string">'rxjs'</span>:                      <span class="string">'npm:rxjs'</span>,</span><br><span class="line">      <span class="string">'angular-in-memory-web-api'</span>: <span class="string">'npm:angular-in-memory-web-api'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 파일이름이 없거나 확장자가 없을때의 처리방법에 대한 설정</span></span><br><span class="line">    packages: &#123;</span><br><span class="line">      app: &#123;</span><br><span class="line">        main: <span class="string">'./main.js'</span>,</span><br><span class="line">        defaultExtension: <span class="string">'js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      rxjs: &#123;</span><br><span class="line">        defaultExtension: <span class="string">'js'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">'angular-in-memory-web-api'</span>: &#123;</span><br><span class="line">        main: <span class="string">'./index.js'</span>,</span><br><span class="line">        defaultExtension: <span class="string">'js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;)(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><ul><li>paths 필드 : 경로에 대한 별칭</li><li>map 필드 : 모듈 호출 정의<ul><li>app 필드 : 어플리케이션 디렉터리 위치 설정</li><li>node_module의 별칭 (npm:@angular/..)으로 Angular 모듈 임포트</li><li>Angular모듈은 @을 기재해서 외부 라이브러리와 구분</li></ul></li><li>packages : 확장자 처리</li></ul></li><li><my-app><p>Angular 앱이 실행되는 위치이다. my-app은 어플리케이션 최상위 컴포넌트이다.</p><ul><li>app.component.ts</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'my-app'</span>,</span><br><span class="line">  template: <span class="string">'&lt;h1&gt;Hello Angular 2 Application&lt;/h1&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>selector의 이름이 <my-app>에 대응하는 것을 확인할 수 있다.</my-app></p><ul><li>app.module.ts</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125;      <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125;   <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports:      [ BrowserModule ],</span><br><span class="line">  declarations: [ AppComponent ],</span><br><span class="line">  bootstrap:    [ AppComponent ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule &#123; &#125;</span><br></pre></td></tr></table></figure><p>애플리케이션 차원의 모듈파일. 전역으로 사용되는 모듈이나 최상위 컴포넌트를 등록. bootstrap 속성에는 애플리케이션을 실행할 때 가장 먼저 호출하게 할 컴포넌트를 등록</p><ul><li><p>main.ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser-dynamic'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app.module'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> platform = platformBrowserDynamic();</span><br><span class="line">platform.bootstrapModule(AppModule);</span><br></pre></td></tr></table></figure></li></ul><p>app.modules.ts 파일을 임포트 해서 platform-browser-dynamic을 등록.</p><blockquote><p>platform-browser-dynamic은 Angular의 모든 API에 대한 진입점.</p></blockquote><p>platform의 bootstrapModule() 메서드에 방금 정의한 AppModule을 지정.</p></my-app></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular 2 프로그래밍 - 정진욱</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>01. Angular의 특징</title>
      <link href="/2017/07/12/Angular/1.%20Angular%20%ED%8A%B9%EC%A7%95/"/>
      <url>/2017/07/12/Angular/1.%20Angular%20%ED%8A%B9%EC%A7%95/</url>
      
        <content type="html"><![CDATA[<p>Jquery를 써서 웹페이지를 작성해도</p><p>크게 문제될 것이 없었다.</p><p>그러나, 비동기 페이지를 작성하다보면</p><p>하드코딩이 필요한 불편한 점이 있었다.</p><p>그렇게 접한 Angular는 답답했던 속을 뻥 뚫어주었다.</p><p>비동기 페이지를 작성하는데 뛰어난 생산성을 가져다주었기 때문이다.</p><p>충분히 만족하며 쓰고 있었지만….</p><p>2015년 4월 Angular2가 발표되었고.</p><p>단순한 확장이 아니라, 아예 새로운 프레임워크 였기에.</p><p>Angular2가 발표된 직후, 개발자들이 “죽음”, “재앙”과 같은 표현을 썼다고</p><p>(나만 그렇게 생각했던게 아니었구나..)</p><p>그런데, 생각보다 큰 장점이 많다고 한다.</p><p>Angular2에서 바뀐 부분을 소개 한다.</p><h2 id="Angular2에서-바뀐-것들"><a href="#Angular2에서-바뀐-것들" class="headerlink" title="Angular2에서 바뀐 것들"></a>Angular2에서 바뀐 것들</h2><ul><li><strong>컴포넌트 기반 개발</strong></li></ul><p>Controller 메서드가 아닌 컴포넌트 중심으로 프로그래밍</p><ul><li><strong>영역 구분</strong></li></ul><p>$scope를 사용하지 않아도, 컴포넌트에 의해 영역이 명확히 구분</p><ul><li><strong>Dom제어 모듈</strong></li></ul><p>angular.module 없이도 향상된 모듈 시스템 제공</p><p>jQlite의 기능을 대체하는 Dom 제어 모듈 제공</p><ul><li><strong>API 단순화</strong></li></ul><p>AngularJS의 지시자 43개를 폐기함으로서 API가 단순해짐</p><ul><li><strong>성능향상</strong></li></ul><p>Angular1은 digest 루프로 인한 성능 저하가 있었음.</p><p>Angular2에서는 이 문제가 발생하지 않음.</p><p>그 외에도 성능 저하요인들이 사라지고 나서</p><p>로딩시간은 2.5배, 바인딩을 통한 렌더링 성능은 4.2배 빨라짐</p><ul><li><strong>TypeScript 사용</strong></li></ul><p> 자바스크립트의 상위집합 언어.</p><p>따라서 자바스크립트 문법을 그대로 이용할 수 있음.</p><p>최신 ECMA 스크립트 표준인 EC6, EC7의 특징까지도 지원</p><ul><li><strong>컴파일 방식 변경</strong></li></ul><p>AOT(Ahead of time compilation)과 같은 사전 컴파일 방식 도입.</p><p>HTML 템플릿과 CSS파일을 컴파일해 코드로 삽입하는 방식.</p><blockquote><p>ex) ngIf나 ngFor와 같은 지시자를 브라우저에서 직접 실행할 일 없으니,</p><p>컴파일 과정에 미리 수행해 코드에 적재해 놓고, 컴파일 없이 곧바로 실행되게 함.</p></blockquote><p>컴파일 과정이 없으므로 화면 표시 속도가 빠름.</p><p>코드 용량도 50%이상까지 최적화.(JIT 컴파일러를 적재하지 않아도 되기 때문)</p><h2 id="Angular2의-구조"><a href="#Angular2의-구조" class="headerlink" title="Angular2의 구조"></a>Angular2의 구조</h2><p>Angular 하나의 어플리케이션은 컴포넌트들의 조합으로 이루어진다.</p><p><strong>Component는 Template + Class</strong>로 이루어진다.</p><p>컴포넌트들 끼리는 Routing이 가능하며.</p><p>모듈과 서비스를 두어 중복 코드를 최소화 시킨다.</p><ul><li><strong>Template</strong></li></ul><p>템플릿은 <strong>컴포넌트의 UI</strong>를 나타냄.</p><p>Html로 작성.</p><p>컴포넌트마다 가상 DOM을 이용하므로 컴포넌트간 스타일에 영향을 받지 않음.</p><p>템플릿은</p><p>바인딩(Binding), 지시자(Directive)를 포함한다.</p><p>템플릿은 바인딩을 통해 클래스와 이어지는데..</p><ul><li><strong>Class</strong></li></ul><p>바인딩을 통해 템플릿과 연결됌.</p><blockquote><p>이를 통해 템플릿에서 클래스로 이벤트를 전달하거나, 데이터를 교환할 수 있음.</p></blockquote><p>Properties와 Method를 포함</p><p>TypeScript형태로 작성.</p><ul><li><strong>Routing</strong></li></ul><p>컴포넌트는 자식 컴포넌트를 포함시킬 수 있음</p><p>다른 컴포넌트로 URL을 라우팅할 수 있음(URL이 변경)</p><ul><li><strong>Module</strong></li></ul><p>컴포넌트는 외부의 도움을 받아 기능을 더하거나 중복을 최소화.</p><p>이 방법으로 “모듈”을 이용.</p><ul><li><strong>Service</strong></li></ul><p>컴포넌트 내부 중복로직을 최소화하기 위해 외부에 서비스를 둠.</p><p>서비스를 컴포넌트에 사용할 때 의존성 주입을 이용.</p><h2 id="컴포넌트-Component-생성"><a href="#컴포넌트-Component-생성" class="headerlink" title="컴포넌트(Component) 생성"></a>컴포넌트(Component) 생성</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'hello-world'</span>, </span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;/div&gt;'</span>, </span><br><span class="line">  styles: [<span class="string">'div &#123; background: blue; &#125;'</span>] &#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloWorld &#123;</span><br><span class="line">  msg: <span class="built_in">string</span> = <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>정의</strong></li></ul><p>@Component 장식자를 이용해 정의.</p><ul><li><strong>지시자</strong></li></ul><p>selector 속성에 컴포넌트를 등록하면 html파일이나, 다른 컴포넌트에</p><blockquote><hellow-world></hellow-world></blockquote><p>형식으로 사용할 수 있다.</p><ul><li><strong>바인딩</strong></li></ul><p>클래스에 선언된 msg 변수가 템플릿 표현식 에 바인딩돼 있으므로</p><p>실행시 위치에 hello가 들어감.</p><h2 id="모듈"><a href="#모듈" class="headerlink" title="모듈"></a>모듈</h2><ul><li><strong>정의</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Hello &#123;&#125;</span><br></pre></td></tr></table></figure><p>export 키워드를 이용해 모듈을 정의하고, 모듈을 외부로 노출할 것임을 알림.</p><ul><li><strong>사용</strong></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Hello &#125; <span class="keyword">from</span> <span class="string">'./hello'</span>;</span><br></pre></td></tr></table></figure><ul><li>모듈 등록</li></ul><p>Angular의 모듈을 체계적으로 관리하기 위해 모듈시스템을 제공.(<strong>app.module.ts</strong>)</p><p>@NgModule 장식자를 이용해 일반적인 모듈 구성.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MyComponent &#125; <span class="keyword">from</span> <span class="string">'./my.component'</span>;</span><br><span class="line"><span class="meta">@NgModule</span>(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">  Angular 모듈, routing 모듈, ...</span><br><span class="line">  ],</span><br><span class="line">  declarations : [</span><br><span class="line">    컴포넌트, 지시자, 파이프,</span><br><span class="line">  ],</span><br><span class="line">  providers: [서비스 모듈, ...]</span><br><span class="line">  ,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="서비스"><a href="#서비스" class="headerlink" title="서비스"></a>서비스</h2><p>컴포넌트에 제공할 목적으로 외부에 정의한 클래스.</p><p>서비스 정의는 @Injectable 장식자를 사용.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloService &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="지시자"><a href="#지시자" class="headerlink" title="지시자"></a>지시자</h2><ul><li><strong>정의</strong></li></ul><p>@Directive 장식자 이용</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, ElementRef, Render &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[helloStyle]'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HelloStyleDirective &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> el: ElementRef, <span class="keyword">private</span> renderer: Renderer</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>사용</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'my-component'</span>,</span><br><span class="line">  template: <span class="string">'&lt;div helloStyle&gt;&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="지원"><a href="#지원" class="headerlink" title="지원"></a>지원</h2><ul><li>IE9 이상</li><li>엣지 13 이상</li><li>최신버전 크롬/파이어폭스</li><li>IE 모바일 11이상</li><li>IOS7 이상, 안드로이드 4.1 이상</li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍(장진욱 지음)</p><p><a href="http://visualize.tistory.com/442" target="_blank" rel="noopener">비주얼라이즈 </a></p><p><a href="http://sculove.github.io/blog/2016/07/11/react%EB%B3%B4%EB%8B%A4-angular2%EC%97%90-%EB%8D%94-%EC%A3%BC%EB%AA%A9%ED%95%B4%EC%95%BC%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0/" target="_blank" rel="noopener">React보다 Angular2에 더 주목해야하는 이유 | 손찬욱 Blog</a></p><p><a href="http://sticky32.tistory.com/entry/Angular2-컴포넌트에-대해서" target="_blank" rel="noopener">http://sticky32.tistory.com/entry/Angular2-컴포넌트에-대해서</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>@RequestBody, @ResponseBody</title>
      <link href="/2017/07/07/Spring/message_converter/"/>
      <url>/2017/07/07/Spring/message_converter/</url>
      
        <content type="html"><![CDATA[<p>JAVA Server에 request/response를 보낼 시에, content-type을 변환해서 송신할 수 있는 기능을 제공해준다.</p><blockquote><p>예를들어 웹페이지에서 json으로 request한 파라미터들을 java에서 받으려면 java object로의 변환이 필요하며 마찬가지로 response 시에도 java object에서 json으로 변환이 필요하다.</p></blockquote><p>이러한 작업들을 해주는 어노테이션이 바로 <code>@RequestBody</code> 와 <code>@ResponseBody</code> 이다. 컨트롤러에 두 어노테이션을 추가해주면, JSON이나 key/value 방식 xml 등으로 송수신 할 수 있다.</p><h2 id="설정-방법"><a href="#설정-방법" class="headerlink" title="설정 방법"></a>설정 방법</h2><ul><li>spring-servlet.xml 설정파일</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 방법 1 : 직접 정의 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">id</span>=<span class="string">"jacksonMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:list</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">beans:value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">beans:value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans:bean</span> <span class="attr">name</span>=<span class="string">"handlerAdapter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">beans:property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">beans:list</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Json 컨버터 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">beans:ref</span> <span class="attr">bean</span>=<span class="string">"jacksonMessageConverter"</span> /&gt;</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">beans:list</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">beans:property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans:bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 방법 2 : spring 3.1 이상에서 annotaion-driven을 사용하면 자동 등록 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>ByteArrayHttpMessageConverter(*)</p><p>HTTP 메시지와 byte 배열 사이의 변환을 처리한다. 컨텐츠 타입은  application/octet-stream이다.</p></li><li><p>StringHttpMessageConverter(*)</p><p>HTTP 메시지와 String 사이의 변환을 처리한다. 컨텐츠 타입은  text/plain;charset=ISO-8859-1이다.</p></li><li><p>FormHttpMessageConverter(*)</p><p>HTML 폼 데이터를 MultiValueMap으로 전달받을 때 사용된다. 지원하는 컨텐  츠 타입은 application-x-www-form-urlencorded이다.</p></li><li><p>SourceHttpMessageConverter(*)</p><p>HTTP 메시지와 javax.xml.transform.Source 사이 변환을 처리한다. 컨텐츠 타  입은 application/xml 또는 text/xml이다.</p></li><li><p>MarshallingHttpMessageConverter(*)</p><p>스프링의 Marshaller와 unMarshaller를 이용해서 XML HTTP 메시지와 객체 사  이의 변환을 처리한다. 컨텐츠 타입은 application/xml 또는 text/xml이다.</p></li><li><p>MappingJacksonHttpMessageConverter(*)</p><p>Jackson 라이브러리를 이용해서 JSON HTTP 메시지와 객체 사이의 변환을 처리한다. 컨텐츠 타입은 applicaion/json이다.</p></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://devbox.tistory.com/entry/Spring-RequestBody-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EA%B3%BC-ReponseBody-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%98-%EC%82%AC%EC%9A%A9" target="_blank" rel="noopener">http://devbox.tistory.com/entry/Spring-RequestBody-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EA%B3%BC-ReponseBody-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%EC%9D%98-%EC%82%AC%EC%9A%A9</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>메모리</title>
      <link href="/2017/07/07/OS/memory/"/>
      <url>/2017/07/07/OS/memory/</url>
      
        <content type="html"><![CDATA[<p>컴퓨터의 저장공간은 역시 성능이 좋을 수록 비싸다. 때문에 메모리를 계층화시키고 이를 효율적으로 이용하기 위한 연구가 계속 되고 있다.</p><h2 id="메모리의-계층-구조"><a href="#메모리의-계층-구조" class="headerlink" title="메모리의 계층 구조"></a>메모리의 계층 구조</h2><blockquote><p> 캐시 메모리 - 메인메모리 - 디스크 스토리지</p></blockquote><p>따라서 위와 같이 메모리를 계층화하여 용도에 맞게 사용한다.</p><h2 id="메모리의-추상화"><a href="#메모리의-추상화" class="headerlink" title="메모리의 추상화"></a>메모리의 추상화</h2><p>각 프로세스는 자신만의 <code>주소공간</code>(프로그램에 적재될 수 있는 추상화된 주소집합)을 갖는다.</p><blockquote><p>A 프로세스의 28번 주소</p><p>B 프로세스의 28번 주소 </p></blockquote><p>위 두 28번 주소는 달라야 한다.  </p><p><strong><em>따라서 논리주소만 고려할 수 있도록 조치</em></strong>가 필요하다.</p><h4 id="재배치"><a href="#재배치" class="headerlink" title="재배치"></a>재배치</h4><ul><li>동적 재배치 : 프로그램 실행시, MMU 통해 동적으로 배치</li></ul><blockquote><p>but 덧셈을 매번 해야 하는 단점이 있다..</p></blockquote><ul><li>정적 재배치 : 적재한 초기 위치부터 주소 재배치(적재기 Loader 통해)</li></ul><blockquote><p>그러나…</p><p>1) 실수나 의도적으로 OS 파괴가 가능하다.</p><p>2) 여러 프로그램 동시에 실행이 어렵다.</p></blockquote><h2 id="가용메모리-공간-관리"><a href="#가용메모리-공간-관리" class="headerlink" title="가용메모리 공간 관리"></a>가용메모리 공간 관리</h2><p>실제 메모리보다 사용 메모리가 더 클 경우에 이것을 어떻게 대처할 것인가?</p><h4 id="스와핑"><a href="#스와핑" class="headerlink" title="스와핑"></a>스와핑</h4><p>실행되지 않는 것, 디스크로 내림. 스왑 될때 재배치가 필요.</p><p><strong>어떤 메모리를 스와핑 할 것인가?</strong> 리스트를 활용하여 가용메모리 공간을 관리한다.</p><p>1) 최초적합 : 빈공간 발견시 할당</p><p>2) 다음적합 : 지난번 위치의 다음부터 검색</p><p>3) 최적적합 : 모두 검색-&gt; 가장 근접 공간에 할당 &lt;-&gt; 최악적합</p><p>4) 빠른적합 : 공통크기 메모리 공간 -&gt; 서로 다른 리스트로 관리</p><blockquote><p>그러나 스와핑은 너무 느리다.</p></blockquote><h4 id="오버레이"><a href="#오버레이" class="headerlink" title="오버레이"></a>오버레이</h4><p>프로세스를 작은 조각으로 나누어 실행한다.</p><blockquote><p>그러나 그것은 프로그래머의 몫으로, 너무 복잡하다.</p></blockquote><h3 id="가상메모리"><a href="#가상메모리" class="headerlink" title="가상메모리"></a>가상메모리</h3><p>가용 메모리 공간을 종결할, 가상 메모리.</p><p>프로세스는 자신의 <code>고유한 주소공간</code>(프로그램에 적재될 수 있는 추상화된 주소집합)을 가지며, 주소공간은 <code>페이지</code>라는 조각으로 구성된다.</p><p> <code>페이징 기법</code>을 활용하면, 여러 프로그램의 부분들이 <code>물리 메모리에 동시 존재</code>할 수 있다.</p><h3 id="페이징-기법"><a href="#페이징-기법" class="headerlink" title="페이징 기법"></a>페이징 기법</h3><p>어떻게 가상 메모리가 페이징 기법을 사용해서 매핑되는지 보자.</p><p><img src="http://i.imgur.com/tBTUlGH.png" alt="img"></p><p><img src="http://i.imgur.com/eEKHY9D.png" alt="img"></p><ol><li>프로그램이 메모리의 주소(가상메모리)를 참조한다.</li><li>가상메모리는 <code>16bit 메모리</code> 는 <code>4bit/8bit</code>로 나누어 지는데, <code>4bit</code>로 <code>페이지테이블</code>을 검색한다.</li><li>4bit <code>0 0 1 0</code> 은 10진수로 <code>2</code> 이므로 <code>페이지테이블</code> 2번과 매핑되고, 해당 페이지 테이블을 살펴보니 <code>1 1 0 1</code> 로 4번째 <code>1</code> 은 present/absent bit 이므로, 현재 메모리에 적재되어 있다는 것을 알 수 있다.</li><li>페이지 테이블에서 찾은 <code>1 1 0</code>과 8bit 메모리 주소 <code>0 0 0 0 0 1 0 0</code>을 합친 주소가 실제 물리 메모리 주소이다. MMU를 이용하여, 실제 물리 메모리 주소로 매핑된다.</li></ol><blockquote><p>만약 present bit가 0으로 매핑되어 있지 않으면, 페이지 폴트가 일어나고 페이지 프레임 내용이 교체 된다.</p></blockquote><h4 id="페이지-테이블-구조"><a href="#페이지-테이블-구조" class="headerlink" title="페이지 테이블 구조"></a>페이지 테이블 구조</h4><p>|캐싱가능여부|참조|수정|보호|present/absent|페이지 프레임 Num</p><h4 id="페이징-속도-향상"><a href="#페이징-속도-향상" class="headerlink" title="페이징 속도 향상"></a>페이징 속도 향상</h4><p>페이지 테이블 전체를 적재하여, 구현 비용이 커진다. TLB(Translation Lookaside Buffer)를 이용하여 페이지 테이블 참조없이 가상주소를 물리주소에 매핑한다. MMU 내부에 존재하며 순서 없이 한 번에 찾는다.</p><h4 id="페이지-교체-알고리즘"><a href="#페이지-교체-알고리즘" class="headerlink" title="페이지 교체 알고리즘"></a>페이지 교체 알고리즘</h4><p>페이지 프레임 교체 대상은 누구인가?</p><ol><li>최적 페이지 교체 알고리즘(OPT) : 가장 먼 미래에 참조될 캐시 퇴출(그러나 미래를 알 수 없음;;)</li><li>LRU(Least Recently Used) : 시간상 최근 참조 -&gt; 최근에 다시 참조</li><li>LFU(Least Frequently Used) : 빈도상 많이 참조 -&gt; 미래에도 많이 참조(maxheap으로 구현)</li><li>FIFO(First-In First-Out) : 먼저 들어온게 먼저 나감.</li><li>Second-Chance 페이지 교체 알고리즘, 클록 페이지 교체 알고리즘</li></ol><p><img src="http://i.imgur.com/8BXWsCu.png" alt="img"></p><p>대상인지 아닌지 확인할 때 R=1 이면, 0으로 바꾸고 넘어감. R이 0이라면 대상.</p><ol start="6"><li>작업집합 페이지 교체 알고리즘 : 프로세스가 현재 자주 참조하는 페이지들의 집합인지 확인. 문맥교환시 - 선페이징 통해 프로세스 시작전 작업집합들 페이지 적재.</li></ol><h4 id="페이지-교체시-쟁점"><a href="#페이지-교체시-쟁점" class="headerlink" title="페이지 교체시 쟁점"></a>페이지 교체시 쟁점</h4><p>지역 페이지 교체 : 자기 프로세스에 속해있는 페이지중 고려.</p><p>전역 페이지 교체 : 전체 프로세스 중에 고려, 실행에 따라 작업집합의 크기 변할 때 유리.</p><p>혼합 : 전역 알고리즘 사용, 크기에 비례하여 페이지 할당. 페이지 폴트 빈도수(PFF)에 맞추어 추가 할당/반납 -&gt; 상한/하한</p><p>페이지 크게 : 페이지 폴트 적게 일어남, 관리 쉽다, 페이지 테이블 작아짐, but 내부 단편화 심함.</p><p>페이지 작게 : 내부 단편화 줄어듬, But 많은 페이지 필요</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>운영체제론 - 노삼혁</p>]]></content>
      
      
      <categories>
          
          <category> OS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>심플하게 스프링 스케줄러 사용하기</title>
      <link href="/2017/07/07/Spring/scheduler/"/>
      <url>/2017/07/07/Spring/scheduler/</url>
      
        <content type="html"><![CDATA[<p>Spring Quartz를 사용할때</p><p>@Autowired가 안먹어서, 직접 bean을 찾아 등록해줘야 하는</p><p>번거로움이 있었다.</p><p>스프링 3버전 이상부터 간단히 스케줄러를 사용할 수 있다.</p><ul><li><strong>context-scheduler.xml</strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.iyl.stock.service"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- job bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"scheduleJob"</span> <span class="attr">class</span>=<span class="string">"com.iyl.stock.schedule.Schedule"</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">task:scheduled-tasks</span>&gt;</span> <span class="comment">&lt;!-- scheduled job list --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">task:scheduled</span> <span class="attr">ref</span>=<span class="string">"scheduleJob"</span> <span class="attr">method</span>=<span class="string">"executeJob"</span> <span class="attr">cron</span>=<span class="string">"0/30 * * * * ?"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- add more job here --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">task:scheduled-tasks</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>Schedule.java</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Schedule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ScheduleService scheduleService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executeJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.scheduleService.insertPush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml을 더 간단하게 하려면 다음을 추가하고.</p><ul><li><strong>context-schedule.xml</strong></li></ul><blockquote><p>&lt;task:annotation-driven /&gt;</p></blockquote><p>java파일의 함수 위에 다음과 같은 어노테이션과 크론표현식을 추가해주면 끝.</p><ul><li><strong>Schedule.java</strong></li></ul><blockquote><p>​      @Scheduled(cron=”0 19 16 * * ?”)</p></blockquote><p>아직 성능상이나 비효율적인 부분은 공부해야겠지만…</p><p>너무 허무할 정도.</p><p>단, 서비스를 Autowired하기 위해서</p><p>&lt;context:component-scan base-package&gt;를 통해 </p><p>bean을 한 번 더 스캔 후 등록하는데.</p><p>나는 context-common.xml에서 위 작업을 이미 해놓고 있어서..</p><p>이렇게 해도 성능상이나, 그 외 문제는 없을지 체크가 필요한듯..</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://darkhorizon.tistory.com/316" target="_blank" rel="noopener">SPRING 3.X 스케쥴러 사용하기</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>component-scan / annotation-config / annotation-driven 차이점</title>
      <link href="/2017/07/07/Spring/spring%20default%20config/"/>
      <url>/2017/07/07/Spring/spring%20default%20config/</url>
      
        <content type="html"><![CDATA[<ol><li><h2 id="context-component-scan"><a href="#context-component-scan" class="headerlink" title="context:component-scan/"></a><a href="context:component-scan/" target="_blank" rel="noopener">context:component-scan/</a></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.controller"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>위의 선언은 특정 패키지(위에서는 org.controller) 안의 클래스들을 스캔하고 ,</p><p>빈 인스턴스를 생성한다. </p><p>아래와 같은 정확한 어노테이션이 존재해야지 빈을 생성할수있다. </p><ul><li><strong>@Component</strong></li><li><strong>@Repository</strong></li><li><strong>@Service</strong></li><li><strong>@Controller</strong></li><li><strong>@Autowired</strong></li></ul><p>​</p></li><li><h2 id="mvc-annotation-driven"><a href="#mvc-annotation-driven" class="headerlink" title="mvc:annotation-driven/"></a><a href="mvc:annotation-driven/" target="_blank" rel="noopener">mvc:annotation-driven/</a></h2><p>스프링 MVC 컴포넌트들의 디폴트 설정을 적용.</p><ul><li><strong>HandlerMapping 및 HandlerAdapter 등록.</strong></li><li><strong>@NumberFormat, @DateTimeFormat, @Valid</strong></li><li><strong>Xml 및 JSON 읽고 쓰기</strong></li></ul><p>​</p></li><li><h2 id="context-annotation-config"><a href="#context-annotation-config" class="headerlink" title="context:annotation-config/"></a><a href="context:annotation-config/" target="_blank" rel="noopener">context:annotation-config/</a></h2><ul><li><strong>@Required</strong></li><li><strong>@Autowired</strong></li><li><strong>@Resource, @PostConstruct, @PreDestory</strong></li><li><strong>@Configuration</strong></li></ul><p>위 어노테이션 사용하기 위해서 필요.</p></li></ol><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://hamait.tistory.com/322" target="_blank" rel="noopener">HAMA 블로그</a></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>11. Angular 이벤트</title>
      <link href="/2017/06/12/Angular/11.%20Angular%20%EC%9D%B4%EB%B2%A4%ED%8A%B8/"/>
      <url>/2017/06/12/Angular/11.%20Angular%20%EC%9D%B4%EB%B2%A4%ED%8A%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="Mouse-click-이벤트"><a href="#Mouse-click-이벤트" class="headerlink" title="Mouse click 이벤트"></a>Mouse click 이벤트</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  templateUrl: <span class="string">'&lt;button ion-button (click)="onClick()&gt;버튼&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> TabsPage &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  onClick() &#123;</span><br><span class="line">    alert(<span class="string">'dd'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Mousemove-mouseleave-mouse-over-이벤트-동작"><a href="#Mousemove-mouseleave-mouse-over-이벤트-동작" class="headerlink" title="Mousemove, mouseleave, mouse over 이벤트 동작"></a>Mousemove, mouseleave, mouse over 이벤트 동작</h2><h3 id="지시자-선언"><a href="#지시자-선언" class="headerlink" title="지시자 선언"></a>지시자 선언</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Directive, ElementRef, HostListener, Input &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Directive</span>(&#123;</span><br><span class="line">  selector: <span class="string">'[highlight]'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> HighlightDirective &#123;</span><br><span class="line">  <span class="keyword">private</span> el: HTMLElement;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">el: ElementRef</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.el = el.nativeElement;</span><br><span class="line">    <span class="keyword">this</span>.el.style.fontSize = <span class="string">"30px"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">'mousemove'</span>) onMouseMove() &#123;</span><br><span class="line">    <span class="keyword">this</span>.el.style.backgroundColor = <span class="string">"blue"</span>;</span><br><span class="line">    <span class="keyword">this</span>.el.style.color =<span class="string">"white"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">@HostListener</span>(<span class="string">'mouseleave'</span>) onMouseLeave() &#123;</span><br><span class="line">    <span class="keyword">this</span>.el.style.backgroundColor = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.el.style.color =<span class="string">"black"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="템플릿"><a href="#템플릿" class="headerlink" title="템플릿"></a>템플릿</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'member-list'</span>,</span><br><span class="line">  template: <span class="string">` </span></span><br><span class="line"><span class="string">  &lt;div highlight (mouseover)="setLike('like this')"&gt;</span></span><br><span class="line"><span class="string">    &#123;&#123;like&#125;&#125;  </span></span><br><span class="line"><span class="string">  &lt;/div&gt;`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MemberListComponent &#123;</span><br><span class="line">  like: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">  setLike(likethis: <span class="built_in">string</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.like = likethis;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Key-이벤트"><a href="#Key-이벤트" class="headerlink" title="Key 이벤트"></a>Key 이벤트</h2><p>특정 키의 이벤트시 동작하는 이벤트</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">  selector: <span class="string">'key-up4'</span>,</span><br><span class="line">  template: <span class="string">`</span></span><br><span class="line"><span class="string">    &lt;input #box</span></span><br><span class="line"><span class="string">      (keyup.enter)="update(box.value)"</span></span><br><span class="line"><span class="string">      (blur)="update(box.value)"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;p&gt;&#123;&#123;value&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  `</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> KeyUpComponent_v4 &#123;</span><br><span class="line">  value = <span class="string">''</span>;</span><br><span class="line">  update(value: <span class="built_in">string</span>) &#123; <span class="keyword">this</span>.value = value; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>그외 이벤트 정보 : <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Events</a></p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p><p><a href="https://angular.io/guide/user-input" target="_blank" rel="noopener">https://angular.io/guide/user-input</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Angular CLI 커맨드 정리</title>
      <link href="/2017/06/12/Angular/Angular%20CLI%20%EC%BB%A4%EB%A7%A8%EB%93%9C%20%EC%A0%95%EB%A6%AC/"/>
      <url>/2017/06/12/Angular/Angular%20CLI%20%EC%BB%A4%EB%A7%A8%EB%93%9C%20%EC%A0%95%EB%A6%AC/</url>
      
        <content type="html"><![CDATA[<p>Angular2 커맨드 정리</p><h2 id="Node-js-설치"><a href="#Node-js-설치" class="headerlink" title="Node.js 설치"></a>Node.js 설치</h2><p><a href="https://nodejs.org/en/download" target="_blank" rel="noopener">https://nodejs.org/en/download</a></p><h2 id="Angular-CLI-설치"><a href="#Angular-CLI-설치" class="headerlink" title="Angular CLI 설치"></a>Angular CLI 설치</h2><blockquote><p>$ npm install -g angular-cli</p></blockquote><h2 id="프로젝트-만들기"><a href="#프로젝트-만들기" class="headerlink" title="프로젝트 만들기"></a>프로젝트 만들기</h2><blockquote><p>$ ng new 프로젝트명</p></blockquote><h1 id="포트-변경"><a href="#포트-변경" class="headerlink" title="포트 변경"></a>포트 변경</h1><blockquote><p>$ ng serve –port 4202</p></blockquote><h2 id="구성요소-추가"><a href="#구성요소-추가" class="headerlink" title="구성요소 추가"></a>구성요소 추가</h2><ul><li><p>컴포넌트 추가</p><blockquote><p>$ ng g component 컴포넌트명</p></blockquote></li></ul><ul><li><p>지시자 추가</p><blockquote><p>$ ng g directive 지시자명</p></blockquote></li><li><p>파이프 추가</p><blockquote><p>$ ng g pipe 파이프명</p></blockquote></li><li><p>서비스 추가</p><blockquote><p>$ ng g service 서비스명</p></blockquote></li></ul><h2 id="빌드-및-실행"><a href="#빌드-및-실행" class="headerlink" title="빌드 및 실행"></a>빌드 및 실행</h2><ul><li><p>개발서버 실행</p><blockquote><p>$ ng serve</p></blockquote></li><li><p>빌드</p><blockquote><p>$ ng build</p></blockquote></li><li><p>프로덕션 빌드</p><blockquote><p>$ ng build -prod</p></blockquote></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09.2. HTML 바인딩</title>
      <link href="/2017/06/12/Angular/9.2.%20HTML%20%EB%B0%94%EC%9D%B8%EB%94%A9/"/>
      <url>/2017/06/12/Angular/9.2.%20HTML%20%EB%B0%94%EC%9D%B8%EB%94%A9/</url>
      
        <content type="html"><![CDATA[<ul><li>방법 1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [innerHTML]=&quot;theHtmlString&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li><p>방법 2</p><h1 id="id-부여"><a href="#id-부여" class="headerlink" title="id 부여"></a>id 부여</h1></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div #scheduleContents&gt;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><h1 id="컴포넌트-코드"><a href="#컴포넌트-코드" class="headerlink" title="컴포넌트 코드"></a>컴포넌트 코드</h1><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, ViewChild, ElementRef &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    templateUrl: <span class="string">"some html file"</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MainPageComponent &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ViewChild</span>(<span class="string">'dataContainer'</span>) dataContainer: ElementRef;</span><br><span class="line"></span><br><span class="line">    loadData(data) &#123; <span class="comment">// 데이터를 불러오는 로직 추가</span></span><br><span class="line">        <span class="keyword">this</span>.dataContainer.nativeElement.innerHTML = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="http://stackoverflow.com/questions/31548311/angular-2-html-binding" target="_blank" rel="noopener">http://stackoverflow.com/questions/31548311/angular-2-html-binding</a></p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>09.1. 바인딩</title>
      <link href="/2017/06/12/Angular/09.1.%20%EB%B0%94%EC%9D%B8%EB%94%A9/"/>
      <url>/2017/06/12/Angular/09.1.%20%EB%B0%94%EC%9D%B8%EB%94%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="단방향-바인딩-One-way-Binding"><a href="#단방향-바인딩-One-way-Binding" class="headerlink" title="단방향 바인딩(One-way Binding)"></a>단방향 바인딩(One-way Binding)</h2><p>외부에 상태 변화가 일어나면 자신의 상태를 변경. 자기 상태를 변경한다고 해서 외부에 전달 안됌.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="meta">@Component</span>(&#123;</span><br><span class="line">    templateUrl: <span class="string">`</span></span><br><span class="line"><span class="string">&lt;input type="text" [value]="like"&gt;</span></span><br><span class="line"><span class="string">&#123;&#123; like &#125;&#125;</span></span><br><span class="line"><span class="string">&lt;button class="&#123;&#123;myclass&#125;&#125;"&gt;&#123;&#123;myclass&#125;&#125;&lt;/button&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    styles: [<span class="string">`</span></span><br><span class="line"><span class="string">.my-italic &#123; font-style: italic; &#125;`</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> MainPageComponent &#123;</span><br><span class="line">    like: <span class="built_in">string</span> = <span class="string">"lala"</span>;</span><br><span class="line">    myClass = <span class="string">"my-italic"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://i.imgur.com/dyuaa0U.png" alt="img"></p><blockquote><p>input에 입력을 해도 외부의 값에는 반영이 안되는 것을 알 수 있다.</p></blockquote><ul><li>프로퍼티 바인딩</li></ul><p>[속성] 또는 bind-속성 형태로 사용</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="keyword">type</span>=<span class="string">"text"</span> [value]=<span class="string">"like"</span>&gt;</span><br><span class="line">&lt;input <span class="keyword">type</span>=<span class="string">"text"</span> bind-value=<span class="string">"like"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;button <span class="keyword">class</span>=<span class="string">"&#123;&#123;myclass&#125;&#125;"</span>&gt;&#123;&#123;myclass&#125;&#125;&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button [ngClass]="myclass"&gt;&#123;&#123;myclass&#125;&#125;&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><ul><li>클래스 바인딩</li></ul><p>CSS로 정의한 클래스 이름에 접근, 할당되야할 값은 <code>반드시 boolean형</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [<span class="keyword">class</span>.positive]=<span class="string">"isPositive"</span>&gt;상태&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li>스타일 바인딩</li></ul><p>CSS로 정의한 클래스 이름에 접근, 할당 되야할 값은 <code>구체적인 스타일 이름</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div [style.color]=<span class="string">"isPositive? 'blue':'black'"</span>&gt;상태&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><ul><li>이벤트 바인딩</li></ul><p>(이벤트) 또는 bind-이벤트 형태로 사용</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;button (click)=<span class="string">"onSave()"</span>&gt;저장&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;button on-click="onSave()"&gt;저장&lt;/</span>button&gt;</span><br></pre></td></tr></table></figure><blockquote><p>이벤트 정보 : <a href="https://developer.mozilla.org/en-US/docs/Web/Events" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Events</a></p></blockquote><h2 id="양방향-바인딩-Two-way-Binding"><a href="#양방향-바인딩-Two-way-Binding" class="headerlink" title="양방향 바인딩(Two-way Binding)"></a>양방향 바인딩(Two-way Binding)</h2><p>외부&amp;내부 상태변화를 전달 및 반영함. [(ngModel)] 또는 bindon-ngModel을 사용.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input <span class="keyword">type</span>=<span class="string">"text"</span> [(ngModel)]=<span class="string">"city"</span>&gt;</span><br><span class="line">&lt;input <span class="keyword">type</span>=<span class="string">"text"</span> bindon-ngModel=<span class="string">"city"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;input [value]=<span class="string">"city"</span> (input)=<span class="string">"city=$event.target.value"</span>&gt;</span><br></pre></td></tr></table></figure><p>실행 순서상 이벤트 바인딩인 ()가 처리되고, 프로퍼티 바인딩인 []가 처리 된다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>쉽고 빠르게 배우는 Angular2 프로그래밍 - 정진욱 지음</p>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>10. Angular HTTP - Observable Promise 비교</title>
      <link href="/2017/06/12/Angular/10.%20Angular%20HTTP%20-%20Observable%20Promise%20%EB%B9%84%EA%B5%90/"/>
      <url>/2017/06/12/Angular/10.%20Angular%20HTTP%20-%20Observable%20Promise%20%EB%B9%84%EA%B5%90/</url>
      
        <content type="html"><![CDATA[<p>Obserable과 Promise는 비동기 프로그래밍을 위해 사용된다.</p><p>어떤 차이점이 있는지 알아보자.</p><h2 id="차이점"><a href="#차이점" class="headerlink" title="차이점"></a>차이점</h2><p>둘다 비동기 프로그래밍을 위해 사용되지만,</p><p>차이점이 존재한다.</p><ul><li>Promise</li></ul><p>하나의 이벤트만 핸들링이 가능.</p><p>Subscribe(콜백 모니터링) 취소가 불가능.</p><ul><li>Observable</li></ul><p>0 ~ N개 의 이벤트 핸들랭이 가능</p><p>Unscribe를 통해, Subscribe 취소가 가능.</p><p><code>Stream</code> 방식으로 코딩작성이 가능.</p><p><code>map</code>, <code>forEach</code>, <code>reduce</code> 의 명령어를 제공</p><p>Promise보다 더 강력한 기능이 제공되므로</p><p>Observable이 더 많이 사용되는 추세라고 한다.</p><h2 id="Promise-사용법"><a href="#Promise-사용법" class="headerlink" title="Promise 사용법"></a>Promise 사용법</h2><p>request 성공시 .then()이 실행된다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; URLSearchParams, Jsonp &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">WikipediaService</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(private jsonp: Jsonp) &#123;&#125;</span><br><span class="line">  search (term: string) &#123;</span><br><span class="line">    <span class="keyword">var</span> search = <span class="keyword">new</span> URLSearchParams()</span><br><span class="line">    search.set(<span class="string">'search'</span>, term);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.jsonp</span><br><span class="line">                .get(<span class="string">'http://en.wikipedia.org/w/api.php?callback=JSONP_CALLBACK'</span>, &#123; search &#125;)</span><br><span class="line">                .toPromise()</span><br><span class="line">                .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> </span>&#123;</span><br><span class="line">  items: <span class="built_in">Array</span>&lt;string&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(private wikipediaService: WikipediaService) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  search(term) &#123;</span><br><span class="line">    <span class="keyword">this</span>.wikipediaService.search(term)</span><br><span class="line">                         .then(<span class="function"><span class="params">items</span> =&gt;</span> <span class="keyword">this</span>.items = items);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예제 <a href="http://plnkr.co/edit/8ap1Lm?p=preview" target="_blank" rel="noopener">Plunker</a></p><h2 id="Observable-사용법"><a href="#Observable-사용법" class="headerlink" title="Observable 사용법"></a>Observable 사용법</h2><ul><li>서비스</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Http, Response &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Observable &#125; <span class="keyword">from</span> <span class="string">'rxjs/Observable'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'rxjs/add/operator/map'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Schedule &#125; <span class="keyword">from</span> <span class="string">'../models'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ScheduleService</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>(public http: Http) &#123; &#125;</span><br><span class="line">private baseUrl = CommonTS.BASE_URL;</span><br><span class="line"></span><br><span class="line">getScheduleList(): Observable&lt;Schedule[]&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.http</span><br><span class="line">          .get(<span class="keyword">this</span>.baseUrl + <span class="string">'/schedule/list.do'</span>)</span><br><span class="line">          .map(<span class="function">(<span class="params">res: Response</span>) =&gt;</span> res.json());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>서비스 실행</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> subscription = <span class="keyword">this</span>.scheduleService.getScheduleList().subscribe(</span><br><span class="line">    schedules =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.schedules = schedules;</span><br><span class="line">        subscription.unsubscribe();</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">          <span class="keyword">return</span> err;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li>stackoverflow의 <a href="http://stackoverflow.com/users/3375906/trungk18" target="_blank" rel="noopener">trungk18</a> 님 답변</li></ul>]]></content>
      
      
      <categories>
          
          <category> Angular </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
